// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.13 and Filter Design HDL Coder 3.1.12.
// Generated on: 2024-10-03 21:59:50
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// TargetDirectory: C:\Users\Baron\Desktop\EE_278_Repo\EE_278\hdl\MATLAB HDL
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 49
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   [63:0] filter_in; //double
  output  [63:0] filter_out; //double

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter coeff1 = 8.9707192647749574E-03; //double
  parameter coeff2 = 5.9642173256624128E-03; //double
  parameter coeff3 = 6.8460750730345125E-03; //double
  parameter coeff4 = 6.8482741121937158E-03; //double
  parameter coeff5 = 5.6687119953925070E-03; //double
  parameter coeff6 = 3.1172495097126166E-03; //double
  parameter coeff7 = -8.2328092801277309E-04; //double
  parameter coeff8 = -5.9586055989417474E-03; //double
  parameter coeff9 = -1.1866682819466703E-02; //double
  parameter coeff10 = -1.7907471296094352E-02; //double
  parameter coeff11 = -2.3269955577804296E-02; //double
  parameter coeff12 = -2.7052627601930126E-02; //double
  parameter coeff13 = -2.8363055291544616E-02; //double
  parameter coeff14 = -2.6430810791886816E-02; //double
  parameter coeff15 = -2.0728878127686482E-02; //double
  parameter coeff16 = -1.1059706533614527E-02; //double
  parameter coeff17 = 2.3684893266267128E-03; //double
  parameter coeff18 = 1.8949924051768197E-02; //double
  parameter coeff19 = 3.7668264277684403E-02; //double
  parameter coeff20 = 5.7226952658480927E-02; //double
  parameter coeff21 = 7.6127212336358552E-02; //double
  parameter coeff22 = 9.2825259645400865E-02; //double
  parameter coeff23 = 1.0591626104648394E-01; //double
  parameter coeff24 = 1.1426893530562393E-01; //double
  parameter coeff25 = 1.1714003964745523E-01; //double
  parameter coeff26 = 1.1426893530562393E-01; //double
  parameter coeff27 = 1.0591626104648394E-01; //double
  parameter coeff28 = 9.2825259645400865E-02; //double
  parameter coeff29 = 7.6127212336358552E-02; //double
  parameter coeff30 = 5.7226952658480927E-02; //double
  parameter coeff31 = 3.7668264277684403E-02; //double
  parameter coeff32 = 1.8949924051768197E-02; //double
  parameter coeff33 = 2.3684893266267128E-03; //double
  parameter coeff34 = -1.1059706533614527E-02; //double
  parameter coeff35 = -2.0728878127686482E-02; //double
  parameter coeff36 = -2.6430810791886816E-02; //double
  parameter coeff37 = -2.8363055291544616E-02; //double
  parameter coeff38 = -2.7052627601930126E-02; //double
  parameter coeff39 = -2.3269955577804296E-02; //double
  parameter coeff40 = -1.7907471296094352E-02; //double
  parameter coeff41 = -1.1866682819466703E-02; //double
  parameter coeff42 = -5.9586055989417474E-03; //double
  parameter coeff43 = -8.2328092801277309E-04; //double
  parameter coeff44 = 3.1172495097126166E-03; //double
  parameter coeff45 = 5.6687119953925070E-03; //double
  parameter coeff46 = 6.8482741121937158E-03; //double
  parameter coeff47 = 6.8460750730345125E-03; //double
  parameter coeff48 = 5.9642173256624128E-03; //double
  parameter coeff49 = 8.9707192647749574E-03; //double

  // Signals
  real delay_pipeline [0:48] ; // double
  real product49; // double
  real product48; // double
  real product47; // double
  real product46; // double
  real product45; // double
  real product44; // double
  real product43; // double
  real product42; // double
  real product41; // double
  real product40; // double
  real product39; // double
  real product38; // double
  real product37; // double
  real product36; // double
  real product35; // double
  real product34; // double
  real product33; // double
  real product32; // double
  real product31; // double
  real product30; // double
  real product29; // double
  real product28; // double
  real product27; // double
  real product26; // double
  real product25; // double
  real product24; // double
  real product23; // double
  real product22; // double
  real product21; // double
  real product20; // double
  real product19; // double
  real product18; // double
  real product17; // double
  real product16; // double
  real product15; // double
  real product14; // double
  real product13; // double
  real product12; // double
  real product11; // double
  real product10; // double
  real product9; // double
  real product8; // double
  real product7; // double
  real product6; // double
  real product5; // double
  real product4; // double
  real product3; // double
  real product2; // double
  real product1; // double
  real sum1_1; // double
  real sum1_2; // double
  real sum1_3; // double
  real sum1_4; // double
  real sum1_5; // double
  real sum1_6; // double
  real sum1_7; // double
  real sum1_8; // double
  real sum1_9; // double
  real sum1_10; // double
  real sum1_11; // double
  real sum1_12; // double
  real sum1_13; // double
  real sum1_14; // double
  real sum1_15; // double
  real sum1_16; // double
  real sum1_17; // double
  real sum1_18; // double
  real sum1_19; // double
  real sum1_20; // double
  real sum1_21; // double
  real sum1_22; // double
  real sum1_23; // double
  real sum1_24; // double
  real sum2_1; // double
  real sum2_2; // double
  real sum2_3; // double
  real sum2_4; // double
  real sum2_5; // double
  real sum2_6; // double
  real sum2_7; // double
  real sum2_8; // double
  real sum2_9; // double
  real sum2_10; // double
  real sum2_11; // double
  real sum2_12; // double
  real sum3_1; // double
  real sum3_2; // double
  real sum3_3; // double
  real sum3_4; // double
  real sum3_5; // double
  real sum3_6; // double
  real sum4_1; // double
  real sum4_2; // double
  real sum4_3; // double
  real sum5_1; // double
  real sum5_2; // double
  real sum6_1; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0.0000000000000000E+00;
        delay_pipeline[1] <= 0.0000000000000000E+00;
        delay_pipeline[2] <= 0.0000000000000000E+00;
        delay_pipeline[3] <= 0.0000000000000000E+00;
        delay_pipeline[4] <= 0.0000000000000000E+00;
        delay_pipeline[5] <= 0.0000000000000000E+00;
        delay_pipeline[6] <= 0.0000000000000000E+00;
        delay_pipeline[7] <= 0.0000000000000000E+00;
        delay_pipeline[8] <= 0.0000000000000000E+00;
        delay_pipeline[9] <= 0.0000000000000000E+00;
        delay_pipeline[10] <= 0.0000000000000000E+00;
        delay_pipeline[11] <= 0.0000000000000000E+00;
        delay_pipeline[12] <= 0.0000000000000000E+00;
        delay_pipeline[13] <= 0.0000000000000000E+00;
        delay_pipeline[14] <= 0.0000000000000000E+00;
        delay_pipeline[15] <= 0.0000000000000000E+00;
        delay_pipeline[16] <= 0.0000000000000000E+00;
        delay_pipeline[17] <= 0.0000000000000000E+00;
        delay_pipeline[18] <= 0.0000000000000000E+00;
        delay_pipeline[19] <= 0.0000000000000000E+00;
        delay_pipeline[20] <= 0.0000000000000000E+00;
        delay_pipeline[21] <= 0.0000000000000000E+00;
        delay_pipeline[22] <= 0.0000000000000000E+00;
        delay_pipeline[23] <= 0.0000000000000000E+00;
        delay_pipeline[24] <= 0.0000000000000000E+00;
        delay_pipeline[25] <= 0.0000000000000000E+00;
        delay_pipeline[26] <= 0.0000000000000000E+00;
        delay_pipeline[27] <= 0.0000000000000000E+00;
        delay_pipeline[28] <= 0.0000000000000000E+00;
        delay_pipeline[29] <= 0.0000000000000000E+00;
        delay_pipeline[30] <= 0.0000000000000000E+00;
        delay_pipeline[31] <= 0.0000000000000000E+00;
        delay_pipeline[32] <= 0.0000000000000000E+00;
        delay_pipeline[33] <= 0.0000000000000000E+00;
        delay_pipeline[34] <= 0.0000000000000000E+00;
        delay_pipeline[35] <= 0.0000000000000000E+00;
        delay_pipeline[36] <= 0.0000000000000000E+00;
        delay_pipeline[37] <= 0.0000000000000000E+00;
        delay_pipeline[38] <= 0.0000000000000000E+00;
        delay_pipeline[39] <= 0.0000000000000000E+00;
        delay_pipeline[40] <= 0.0000000000000000E+00;
        delay_pipeline[41] <= 0.0000000000000000E+00;
        delay_pipeline[42] <= 0.0000000000000000E+00;
        delay_pipeline[43] <= 0.0000000000000000E+00;
        delay_pipeline[44] <= 0.0000000000000000E+00;
        delay_pipeline[45] <= 0.0000000000000000E+00;
        delay_pipeline[46] <= 0.0000000000000000E+00;
        delay_pipeline[47] <= 0.0000000000000000E+00;
        delay_pipeline[48] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= $bitstoreal(filter_in);
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
        end
      end
    end // Delay_Pipeline_process


  always @* product49 <= delay_pipeline[48] * coeff49;

  always @* product48 <= delay_pipeline[47] * coeff48;

  always @* product47 <= delay_pipeline[46] * coeff47;

  always @* product46 <= delay_pipeline[45] * coeff46;

  always @* product45 <= delay_pipeline[44] * coeff45;

  always @* product44 <= delay_pipeline[43] * coeff44;

  always @* product43 <= delay_pipeline[42] * coeff43;

  always @* product42 <= delay_pipeline[41] * coeff42;

  always @* product41 <= delay_pipeline[40] * coeff41;

  always @* product40 <= delay_pipeline[39] * coeff40;

  always @* product39 <= delay_pipeline[38] * coeff39;

  always @* product38 <= delay_pipeline[37] * coeff38;

  always @* product37 <= delay_pipeline[36] * coeff37;

  always @* product36 <= delay_pipeline[35] * coeff36;

  always @* product35 <= delay_pipeline[34] * coeff35;

  always @* product34 <= delay_pipeline[33] * coeff34;

  always @* product33 <= delay_pipeline[32] * coeff33;

  always @* product32 <= delay_pipeline[31] * coeff32;

  always @* product31 <= delay_pipeline[30] * coeff31;

  always @* product30 <= delay_pipeline[29] * coeff30;

  always @* product29 <= delay_pipeline[28] * coeff29;

  always @* product28 <= delay_pipeline[27] * coeff28;

  always @* product27 <= delay_pipeline[26] * coeff27;

  always @* product26 <= delay_pipeline[25] * coeff26;

  always @* product25 <= delay_pipeline[24] * coeff25;

  always @* product24 <= delay_pipeline[23] * coeff24;

  always @* product23 <= delay_pipeline[22] * coeff23;

  always @* product22 <= delay_pipeline[21] * coeff22;

  always @* product21 <= delay_pipeline[20] * coeff21;

  always @* product20 <= delay_pipeline[19] * coeff20;

  always @* product19 <= delay_pipeline[18] * coeff19;

  always @* product18 <= delay_pipeline[17] * coeff18;

  always @* product17 <= delay_pipeline[16] * coeff17;

  always @* product16 <= delay_pipeline[15] * coeff16;

  always @* product15 <= delay_pipeline[14] * coeff15;

  always @* product14 <= delay_pipeline[13] * coeff14;

  always @* product13 <= delay_pipeline[12] * coeff13;

  always @* product12 <= delay_pipeline[11] * coeff12;

  always @* product11 <= delay_pipeline[10] * coeff11;

  always @* product10 <= delay_pipeline[9] * coeff10;

  always @* product9 <= delay_pipeline[8] * coeff9;

  always @* product8 <= delay_pipeline[7] * coeff8;

  always @* product7 <= delay_pipeline[6] * coeff7;

  always @* product6 <= delay_pipeline[5] * coeff6;

  always @* product5 <= delay_pipeline[4] * coeff5;

  always @* product4 <= delay_pipeline[3] * coeff4;

  always @* product3 <= delay_pipeline[2] * coeff3;

  always @* product2 <= delay_pipeline[1] * coeff2;

  always @* product1 <= delay_pipeline[0] * coeff1;

  always @* sum1_1 <= product49 + product48;

  always @* sum1_2 <= product47 + product46;

  always @* sum1_3 <= product45 + product44;

  always @* sum1_4 <= product43 + product42;

  always @* sum1_5 <= product41 + product40;

  always @* sum1_6 <= product39 + product38;

  always @* sum1_7 <= product37 + product36;

  always @* sum1_8 <= product35 + product34;

  always @* sum1_9 <= product33 + product32;

  always @* sum1_10 <= product31 + product30;

  always @* sum1_11 <= product29 + product28;

  always @* sum1_12 <= product27 + product26;

  always @* sum1_13 <= product25 + product24;

  always @* sum1_14 <= product23 + product22;

  always @* sum1_15 <= product21 + product20;

  always @* sum1_16 <= product19 + product18;

  always @* sum1_17 <= product17 + product16;

  always @* sum1_18 <= product15 + product14;

  always @* sum1_19 <= product13 + product12;

  always @* sum1_20 <= product11 + product10;

  always @* sum1_21 <= product9 + product8;

  always @* sum1_22 <= product7 + product6;

  always @* sum1_23 <= product5 + product4;

  always @* sum1_24 <= product3 + product2;

  always @* sum2_1 <= sum1_1 + sum1_2;

  always @* sum2_2 <= sum1_3 + sum1_4;

  always @* sum2_3 <= sum1_5 + sum1_6;

  always @* sum2_4 <= sum1_7 + sum1_8;

  always @* sum2_5 <= sum1_9 + sum1_10;

  always @* sum2_6 <= sum1_11 + sum1_12;

  always @* sum2_7 <= sum1_13 + sum1_14;

  always @* sum2_8 <= sum1_15 + sum1_16;

  always @* sum2_9 <= sum1_17 + sum1_18;

  always @* sum2_10 <= sum1_19 + sum1_20;

  always @* sum2_11 <= sum1_21 + sum1_22;

  always @* sum2_12 <= sum1_23 + sum1_24;

  always @* sum3_1 <= sum2_1 + sum2_2;

  always @* sum3_2 <= sum2_3 + sum2_4;

  always @* sum3_3 <= sum2_5 + sum2_6;

  always @* sum3_4 <= sum2_7 + sum2_8;

  always @* sum3_5 <= sum2_9 + sum2_10;

  always @* sum3_6 <= sum2_11 + sum2_12;

  always @* sum4_1 <= sum3_1 + sum3_2;

  always @* sum4_2 <= sum3_3 + sum3_4;

  always @* sum4_3 <= sum3_5 + sum3_6;

  always @* sum5_1 <= sum4_1 + sum4_2;

  always @* sum5_2 <= sum4_3 + product1;

  always @* sum6_1 <= sum5_1 + sum5_2;

  always @* output_typeconvert <= sum6_1;


  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = $realtobits(output_register);
endmodule  // filter
