-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_predict_maxpool2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address2 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce2 : OUT STD_LOGIC;
    input_r_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address3 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce3 : OUT STD_LOGIC;
    input_r_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_413_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_413_p_ce : OUT STD_LOGIC;
    grp_fu_417_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_417_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_417_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_417_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_417_p_ce : OUT STD_LOGIC;
    grp_fu_421_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_421_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_421_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_421_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_421_p_ce : OUT STD_LOGIC;
    grp_fu_425_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_425_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_425_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_425_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_425_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet_predict_maxpool2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv12_310 : STD_LOGIC_VECTOR (11 downto 0) := "001100010000";
    constant ap_const_lv10_C4 : STD_LOGIC_VECTOR (9 downto 0) := "0011000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln32_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_980 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_980_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_980_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_984_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_984_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_596_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln44_reg_1040 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln44_reg_1040_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln44_reg_1040_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln44_reg_1040_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln44_reg_1040_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal input_load_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_4_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_4_reg_1052_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_5_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_5_reg_1059_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_5_reg_1059_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_6_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_6_reg_1066_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_6_reg_1066_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_6_reg_1066_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_fu_648_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_4_fu_738_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_4_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_5_fu_827_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_5_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal zext_ln38_6_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln38_7_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_8_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_9_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_2_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_346_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln33_11_fu_465_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln33_12_fu_274_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal f_fu_106 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln33_5_fu_252_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_f_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten36_fu_110 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln32_fu_228_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten36_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln32_2_fu_246_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln33_2_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_8_fu_322_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_334_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_360_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_372_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_380_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast_fu_368_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln33_fu_390_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_fu_411_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1_fu_417_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_6_fu_397_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_mid1_fu_436_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_mid1_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast_mid1_fu_432_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid13_fu_448_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln33_7_fu_404_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln33_10_fu_454_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_472_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_484_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_0_cast_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_0_cast_fu_492_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_37_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_927_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln38_fu_506_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast8_fu_502_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln38_fu_509_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln38_fu_520_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln33_9_fu_425_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_39_fu_531_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_1_fu_537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_1_fu_549_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_1_cast_fu_545_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_1_cast_fu_557_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_40_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln38_fu_567_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln38_2_fu_571_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln38_2_fu_582_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_936_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln44_fu_593_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln33_13_cast_fu_461_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln39_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_610_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_fu_620_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_14_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln39_7_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_8_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_659_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_7_fu_669_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_16_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_15_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_676_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_8_fu_686_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_18_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_17_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_7_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_8_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_7_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_8_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln39_9_fu_745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_10_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_748_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_9_fu_758_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_20_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_19_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_765_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_10_fu_775_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_22_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_21_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_9_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_10_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_9_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_10_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln39_11_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_12_fu_851_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_837_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_11_fu_847_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_24_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_23_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_854_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_12_fu_864_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_26_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_25_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_11_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_12_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_11_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_12_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_927_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_927_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_927_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_936_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_936_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_936_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_927_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_927_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_936_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_936_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lenet_predict_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_predict_mac_muladd_3ns_10ns_5ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component lenet_predict_mac_muladd_3ns_8ns_4ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component lenet_predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_10ns_5ns_12_4_1_U19 : component lenet_predict_mac_muladd_3ns_10ns_5ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        din2_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_927_p0,
        din1 => grp_fu_927_p1,
        din2 => grp_fu_927_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_927_p3);

    mac_muladd_3ns_8ns_4ns_10_4_1_U20 : component lenet_predict_mac_muladd_3ns_8ns_4ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_936_p0,
        din1 => grp_fu_936_p1,
        din2 => grp_fu_936_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_936_p3);

    flow_control_loop_pipe_sequential_init_U : component lenet_predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    f_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    f_fu_106 <= select_ln33_5_fu_252_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    f_fu_106 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_98 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_980_pp0_iter2_reg = ap_const_lv1_0))) then 
                    i_fu_98 <= select_ln33_11_fu_465_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten36_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten36_fu_110 <= add_ln32_fu_228_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten36_fu_110 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_102 <= select_ln33_12_fu_274_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_94 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_980_pp0_iter1_reg = ap_const_lv1_0))) then 
                    j_fu_94 <= add_ln34_fu_346_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_980_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln44_reg_1040 <= add_ln44_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln44_reg_1040_pp0_iter4_reg <= add_ln44_reg_1040;
                add_ln44_reg_1040_pp0_iter5_reg <= add_ln44_reg_1040_pp0_iter4_reg;
                add_ln44_reg_1040_pp0_iter6_reg <= add_ln44_reg_1040_pp0_iter5_reg;
                add_ln44_reg_1040_pp0_iter7_reg <= add_ln44_reg_1040_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln32_reg_980_pp0_iter2_reg <= icmp_ln32_reg_980_pp0_iter1_reg;
                icmp_ln33_reg_984_pp0_iter2_reg <= icmp_ln33_reg_984_pp0_iter1_reg;
                input_load_4_reg_1052_pp0_iter5_reg <= input_load_4_reg_1052;
                input_load_5_reg_1059_pp0_iter5_reg <= input_load_5_reg_1059;
                input_load_5_reg_1059_pp0_iter6_reg <= input_load_5_reg_1059_pp0_iter5_reg;
                input_load_6_reg_1066_pp0_iter5_reg <= input_load_6_reg_1066;
                input_load_6_reg_1066_pp0_iter6_reg <= input_load_6_reg_1066_pp0_iter5_reg;
                input_load_6_reg_1066_pp0_iter7_reg <= input_load_6_reg_1066_pp0_iter6_reg;
                select_ln39_4_reg_1080 <= select_ln39_4_fu_738_p3;
                select_ln39_5_reg_1087 <= select_ln39_5_fu_827_p3;
                select_ln39_reg_1073 <= select_ln39_fu_648_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_980_pp0_iter1_reg = ap_const_lv1_0))) then
                and_ln33_reg_1003 <= and_ln33_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln32_reg_980 <= icmp_ln32_fu_222_p2;
                icmp_ln32_reg_980_pp0_iter1_reg <= icmp_ln32_reg_980;
                icmp_ln33_reg_984_pp0_iter1_reg <= icmp_ln33_reg_984;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_222_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln33_reg_984 <= icmp_ln33_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                input_load_4_reg_1052 <= input_r_q2;
                input_load_5_reg_1059 <= input_r_q1;
                input_load_6_reg_1066 <= input_r_q0;
                input_load_reg_1045 <= input_r_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln32_2_fu_246_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_f_load) + unsigned(ap_const_lv3_1));
    add_ln32_fu_228_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten36_load) + unsigned(ap_const_lv11_1));
    add_ln33_2_fu_268_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln33_fu_411_p2 <= std_logic_vector(unsigned(select_ln33_fu_390_p3) + unsigned(ap_const_lv4_1));
    add_ln34_fu_346_p2 <= std_logic_vector(unsigned(select_ln33_8_fu_322_p3) + unsigned(ap_const_lv4_1));
    add_ln38_2_fu_571_p2 <= std_logic_vector(unsigned(zext_ln38_fu_506_p1) + unsigned(sext_ln38_fu_567_p1));
    add_ln38_fu_509_p2 <= std_logic_vector(unsigned(zext_ln38_fu_506_p1) + unsigned(p_cast8_fu_502_p1));
    add_ln44_fu_596_p2 <= std_logic_vector(unsigned(zext_ln44_fu_593_p1) + unsigned(select_ln33_13_cast_fu_461_p1));
    and_ln33_fu_311_p2 <= (xor_ln33_fu_300_p2 and icmp_ln34_fu_305_p2);
    and_ln39_10_fu_821_p2 <= (grp_fu_421_p_dout0 and and_ln39_9_fu_815_p2);
    and_ln39_11_fu_904_p2 <= (or_ln39_12_fu_898_p2 and or_ln39_11_fu_880_p2);
    and_ln39_12_fu_910_p2 <= (grp_fu_425_p_dout0 and and_ln39_11_fu_904_p2);
    and_ln39_7_fu_726_p2 <= (or_ln39_8_fu_720_p2 and or_ln39_7_fu_702_p2);
    and_ln39_8_fu_732_p2 <= (grp_fu_417_p_dout0 and and_ln39_7_fu_726_p2);
    and_ln39_9_fu_815_p2 <= (or_ln39_9_fu_791_p2 and or_ln39_10_fu_809_p2);
    and_ln39_fu_642_p2 <= (or_ln39_fu_636_p2 and grp_fu_413_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln32_fu_222_p2)
    begin
        if (((icmp_ln32_fu_222_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln32_reg_980_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_980_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_f_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, f_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_f_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_f_load <= f_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten36_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten36_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten36_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten36_load <= indvar_flatten36_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;

    bitcast_ln39_10_fu_762_p1 <= select_ln39_4_reg_1080;
    bitcast_ln39_11_fu_834_p1 <= input_load_6_reg_1066_pp0_iter7_reg;
    bitcast_ln39_12_fu_851_p1 <= select_ln39_5_reg_1087;
    bitcast_ln39_7_fu_656_p1 <= input_load_4_reg_1052_pp0_iter5_reg;
    bitcast_ln39_8_fu_673_p1 <= select_ln39_reg_1073;
    bitcast_ln39_9_fu_745_p1 <= input_load_5_reg_1059_pp0_iter6_reg;
    bitcast_ln39_fu_607_p1 <= input_load_reg_1045;
    empty_37_fu_496_p2 <= std_logic_vector(unsigned(p_shl2_0_cast_fu_480_p1) - unsigned(p_shl3_0_cast_fu_492_p1));
    empty_39_fu_531_p2 <= (select_ln33_9_fu_425_p3 or ap_const_lv5_1);
    empty_40_fu_561_p2 <= std_logic_vector(unsigned(p_shl2_1_cast_fu_545_p1) - unsigned(p_shl3_1_cast_fu_557_p1));
    empty_fu_384_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_380_p1) - unsigned(p_cast_fu_368_p1));
    grp_fu_413_p_ce <= ap_const_logic_1;
    grp_fu_413_p_din0 <= input_r_q3;
    grp_fu_413_p_din1 <= ap_const_lv32_FF7FFFFF;
    grp_fu_413_p_opcode <= ap_const_lv5_2;
    grp_fu_417_p_ce <= ap_const_logic_1;
    grp_fu_417_p_din0 <= input_load_4_reg_1052;
    grp_fu_417_p_din1 <= select_ln39_fu_648_p3;
    grp_fu_417_p_opcode <= ap_const_lv5_2;
    grp_fu_421_p_ce <= ap_const_logic_1;
    grp_fu_421_p_din0 <= input_load_5_reg_1059_pp0_iter5_reg;
    grp_fu_421_p_din1 <= select_ln39_4_fu_738_p3;
    grp_fu_421_p_opcode <= ap_const_lv5_2;
    grp_fu_425_p_ce <= ap_const_logic_1;
    grp_fu_425_p_din0 <= input_load_6_reg_1066_pp0_iter6_reg;
    grp_fu_425_p_din1 <= select_ln39_5_fu_827_p3;
    grp_fu_425_p_opcode <= ap_const_lv5_2;
    grp_fu_927_p0 <= grp_fu_927_p00(3 - 1 downto 0);
    grp_fu_927_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_5_fu_252_p3),12));
    grp_fu_927_p1 <= ap_const_lv12_310(10 - 1 downto 0);
    grp_fu_927_p2 <= grp_fu_927_p20(5 - 1 downto 0);
    grp_fu_927_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_334_p3),12));
    grp_fu_936_p0 <= grp_fu_936_p00(3 - 1 downto 0);
    grp_fu_936_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_5_fu_252_p3),10));
    grp_fu_936_p1 <= ap_const_lv10_C4(8 - 1 downto 0);
    grp_fu_936_p2 <= grp_fu_936_p20(4 - 1 downto 0);
    grp_fu_936_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_8_fu_322_p3),10));
    icmp_ln32_fu_222_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten36_load = ap_const_lv11_498) else "0";
    icmp_ln33_fu_240_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_C4) else "0";
    icmp_ln34_fu_305_p2 <= "1" when (j_fu_94 = ap_const_lv4_E) else "0";
    icmp_ln39_14_fu_630_p2 <= "1" when (trunc_ln39_fu_620_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_15_fu_690_p2 <= "0" when (tmp_13_fu_659_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_16_fu_696_p2 <= "1" when (trunc_ln39_7_fu_669_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_17_fu_708_p2 <= "0" when (tmp_14_fu_676_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_18_fu_714_p2 <= "1" when (trunc_ln39_8_fu_686_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_19_fu_779_p2 <= "0" when (tmp_16_fu_748_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_20_fu_785_p2 <= "1" when (trunc_ln39_9_fu_758_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_21_fu_797_p2 <= "0" when (tmp_17_fu_765_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_22_fu_803_p2 <= "1" when (trunc_ln39_10_fu_775_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_23_fu_868_p2 <= "0" when (tmp_19_fu_837_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_24_fu_874_p2 <= "1" when (trunc_ln39_11_fu_847_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_25_fu_886_p2 <= "0" when (tmp_20_fu_854_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_26_fu_892_p2 <= "1" when (trunc_ln39_12_fu_864_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_fu_624_p2 <= "0" when (tmp_s_fu_610_p4 = ap_const_lv8_FF) else "1";
    input_r_address0 <= zext_ln38_9_fu_588_p1(13 - 1 downto 0);
    input_r_address1 <= zext_ln38_8_fu_577_p1(13 - 1 downto 0);
    input_r_address2 <= zext_ln38_7_fu_526_p1(13 - 1 downto 0);
    input_r_address3 <= zext_ln38_6_fu_515_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce2 <= ap_const_logic_1;
        else 
            input_r_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce3 <= ap_const_logic_1;
        else 
            input_r_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln33_fu_317_p2 <= (icmp_ln33_reg_984_pp0_iter1_reg or and_ln33_fu_311_p2);
    or_ln38_2_fu_582_p2 <= (ap_const_lv13_1 or add_ln38_2_fu_571_p2);
    or_ln38_fu_520_p2 <= (ap_const_lv13_1 or add_ln38_fu_509_p2);
    or_ln39_10_fu_809_p2 <= (icmp_ln39_22_fu_803_p2 or icmp_ln39_21_fu_797_p2);
    or_ln39_11_fu_880_p2 <= (icmp_ln39_24_fu_874_p2 or icmp_ln39_23_fu_868_p2);
    or_ln39_12_fu_898_p2 <= (icmp_ln39_26_fu_892_p2 or icmp_ln39_25_fu_886_p2);
    or_ln39_7_fu_702_p2 <= (icmp_ln39_16_fu_696_p2 or icmp_ln39_15_fu_690_p2);
    or_ln39_8_fu_720_p2 <= (icmp_ln39_18_fu_714_p2 or icmp_ln39_17_fu_708_p2);
    or_ln39_9_fu_791_p2 <= (icmp_ln39_20_fu_785_p2 or icmp_ln39_19_fu_779_p2);
    or_ln39_fu_636_p2 <= (icmp_ln39_fu_624_p2 or icmp_ln39_14_fu_630_p2);
    output_r_address0 <= zext_ln44_2_fu_923_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        input_load_6_reg_1066_pp0_iter7_reg when (and_ln39_12_fu_910_p2(0) = '1') else 
        select_ln39_5_reg_1087;

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast8_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_37_fu_496_p2),13));

    p_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_360_p3),9));
    p_cast_mid1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_fu_417_p3),9));
    p_mid13_fu_448_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_444_p1) - unsigned(p_cast_mid1_fu_432_p1));
    p_mid1_fu_417_p3 <= (add_ln33_fu_411_p2 & ap_const_lv1_0);
    p_shl2_0_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_472_p3),11));
    p_shl2_1_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_1_fu_537_p3),11));
    p_shl2_1_fu_537_p3 <= (empty_39_fu_531_p2 & ap_const_lv5_0);
    p_shl2_fu_472_p3 <= (select_ln33_11_fu_465_p3 & ap_const_lv6_0);
    p_shl3_0_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_484_p3),11));
    p_shl3_1_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_1_fu_549_p3),11));
    p_shl3_1_fu_549_p3 <= (empty_39_fu_531_p2 & ap_const_lv2_0);
    p_shl3_fu_484_p3 <= (select_ln33_11_fu_465_p3 & ap_const_lv3_0);
    p_shl_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_372_p3),9));
    p_shl_cast_mid1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_436_p3),9));
    p_shl_fu_372_p3 <= (i_fu_98 & ap_const_lv4_0);
    p_shl_mid1_fu_436_p3 <= (add_ln33_fu_411_p2 & ap_const_lv4_0);
    select_ln33_10_fu_454_p3 <= 
        p_mid13_fu_448_p2 when (and_ln33_reg_1003(0) = '1') else 
        select_ln33_7_fu_404_p3;
    select_ln33_11_fu_465_p3 <= 
        add_ln33_fu_411_p2 when (and_ln33_reg_1003(0) = '1') else 
        select_ln33_fu_390_p3;
    select_ln33_12_fu_274_p3 <= 
        ap_const_lv8_1 when (icmp_ln33_fu_240_p2(0) = '1') else 
        add_ln33_2_fu_268_p2;
        select_ln33_13_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln33_10_fu_454_p3),11));

    select_ln33_5_fu_252_p3 <= 
        add_ln32_2_fu_246_p2 when (icmp_ln33_fu_240_p2(0) = '1') else 
        ap_sig_allocacmp_f_load;
    select_ln33_6_fu_397_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_reg_984_pp0_iter2_reg(0) = '1') else 
        tmp_fu_360_p3;
    select_ln33_7_fu_404_p3 <= 
        ap_const_lv9_0 when (icmp_ln33_reg_984_pp0_iter2_reg(0) = '1') else 
        empty_fu_384_p2;
    select_ln33_8_fu_322_p3 <= 
        ap_const_lv4_0 when (or_ln33_fu_317_p2(0) = '1') else 
        j_fu_94;
    select_ln33_9_fu_425_p3 <= 
        p_mid1_fu_417_p3 when (and_ln33_reg_1003(0) = '1') else 
        select_ln33_6_fu_397_p3;
    select_ln33_fu_390_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_reg_984_pp0_iter2_reg(0) = '1') else 
        i_fu_98;
    select_ln39_4_fu_738_p3 <= 
        input_load_4_reg_1052_pp0_iter5_reg when (and_ln39_8_fu_732_p2(0) = '1') else 
        select_ln39_reg_1073;
    select_ln39_5_fu_827_p3 <= 
        input_load_5_reg_1059_pp0_iter6_reg when (and_ln39_10_fu_821_p2(0) = '1') else 
        select_ln39_4_reg_1080;
    select_ln39_fu_648_p3 <= 
        input_load_reg_1045 when (and_ln39_fu_642_p2(0) = '1') else 
        ap_const_lv32_FF7FFFFF;
        sext_ln38_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_40_fu_561_p2),13));

    tmp_13_fu_659_p4 <= bitcast_ln39_7_fu_656_p1(30 downto 23);
    tmp_14_fu_676_p4 <= bitcast_ln39_8_fu_673_p1(30 downto 23);
    tmp_16_fu_748_p4 <= bitcast_ln39_9_fu_745_p1(30 downto 23);
    tmp_17_fu_765_p4 <= bitcast_ln39_10_fu_762_p1(30 downto 23);
    tmp_19_fu_837_p4 <= bitcast_ln39_11_fu_834_p1(30 downto 23);
    tmp_20_fu_854_p4 <= bitcast_ln39_12_fu_851_p1(30 downto 23);
    tmp_3_fu_334_p3 <= (select_ln33_8_fu_322_p3 & ap_const_lv1_0);
    tmp_fu_360_p3 <= (i_fu_98 & ap_const_lv1_0);
    tmp_s_fu_610_p4 <= bitcast_ln39_fu_607_p1(30 downto 23);
    trunc_ln39_10_fu_775_p1 <= bitcast_ln39_10_fu_762_p1(23 - 1 downto 0);
    trunc_ln39_11_fu_847_p1 <= bitcast_ln39_11_fu_834_p1(23 - 1 downto 0);
    trunc_ln39_12_fu_864_p1 <= bitcast_ln39_12_fu_851_p1(23 - 1 downto 0);
    trunc_ln39_7_fu_669_p1 <= bitcast_ln39_7_fu_656_p1(23 - 1 downto 0);
    trunc_ln39_8_fu_686_p1 <= bitcast_ln39_8_fu_673_p1(23 - 1 downto 0);
    trunc_ln39_9_fu_758_p1 <= bitcast_ln39_9_fu_745_p1(23 - 1 downto 0);
    trunc_ln39_fu_620_p1 <= bitcast_ln39_fu_607_p1(23 - 1 downto 0);
    xor_ln33_fu_300_p2 <= (icmp_ln33_reg_984_pp0_iter1_reg xor ap_const_lv1_1);
    zext_ln38_6_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_509_p2),64));
    zext_ln38_7_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_fu_520_p2),64));
    zext_ln38_8_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_2_fu_571_p2),64));
    zext_ln38_9_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_2_fu_582_p2),64));
    zext_ln38_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_927_p3),13));
    zext_ln44_2_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_reg_1040_pp0_iter7_reg),64));
    zext_ln44_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_936_p3),11));
end behav;
