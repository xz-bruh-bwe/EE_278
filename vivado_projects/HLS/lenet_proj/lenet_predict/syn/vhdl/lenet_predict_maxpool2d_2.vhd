-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_predict_maxpool2d_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address2 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce2 : OUT STD_LOGIC;
    input_r_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address3 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce3 : OUT STD_LOGIC;
    input_r_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_413_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_413_p_ce : OUT STD_LOGIC;
    grp_fu_417_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_417_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_417_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_417_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_417_p_ce : OUT STD_LOGIC;
    grp_fu_421_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_421_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_421_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_421_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_421_p_ce : OUT STD_LOGIC;
    grp_fu_425_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_425_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_425_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_425_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_425_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet_predict_maxpool2d_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln32_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_934_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_934_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_938_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_938_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_551_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln44_fu_551_p2 : signal is "no";
    signal add_ln44_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_reg_994_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_reg_994_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_reg_994_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_reg_994_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_1_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_1_reg_1006_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_reg_1013_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_2_reg_1013_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_1020_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_1020_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_1020_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_1_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_1_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_2_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_2_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal zext_ln38_1_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln38_2_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_4_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_5_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_86 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln34_fu_338_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln33_1_fu_395_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln33_4_fu_266_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal f_fu_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_1_fu_244_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_f_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten28_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten28_load : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_1_fu_238_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln33_1_fu_260_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln34_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_314_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_326_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_367_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_352_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_fu_360_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln33_fu_389_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_406_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_2_fu_375_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_mid1_fu_421_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_3_fu_382_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_3_fu_429_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_fu_440_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_881_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln33_4_cast_fu_436_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_fu_452_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_2_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_0_cast_fu_448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln38_fu_472_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln33_2_fu_414_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_36_fu_483_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_1_fu_489_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_1_fu_501_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_3_fu_509_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_3_fu_513_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_1_cast_fu_497_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_1_fu_519_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln38_1_fu_530_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln33_1_cast_fu_402_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_1_fu_541_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln44_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln39_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_564_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_fu_574_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_1_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln39_1_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_2_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_1_fu_623_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_3_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_630_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_2_fu_640_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_5_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_4_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_1_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_2_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln39_3_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_4_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_702_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_3_fu_712_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_7_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_6_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_719_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_4_fu_729_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_9_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_8_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_3_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_4_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_3_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_4_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln39_5_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_6_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_791_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_5_fu_801_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_11_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_10_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_808_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_6_fu_818_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln39_13_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_12_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_5_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_6_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_5_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_6_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_881_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_881_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_881_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_890_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_890_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_881_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_881_p20 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_890_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_890_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lenet_predict_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_predict_mac_muladd_3ns_7ns_4ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component lenet_predict_mac_muladd_3ns_5ns_3ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component lenet_predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_7ns_4ns_9_4_1_U40 : component lenet_predict_mac_muladd_3ns_7ns_4ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_881_p0,
        din1 => grp_fu_881_p1,
        din2 => grp_fu_881_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_881_p3);

    mac_muladd_3ns_5ns_3ns_8_4_1_U41 : component lenet_predict_mac_muladd_3ns_5ns_3ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        din2_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_890_p0,
        din1 => grp_fu_890_p1,
        din2 => grp_fu_890_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_890_p3);

    flow_control_loop_pipe_sequential_init_U : component lenet_predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    f_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    f_fu_98 <= select_ln32_1_fu_244_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    f_fu_98 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_90 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_934_pp0_iter2_reg = ap_const_lv1_0))) then 
                    i_fu_90 <= select_ln33_1_fu_395_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten28_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten28_fu_102 <= add_ln32_fu_220_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten28_fu_102 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln32_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_94 <= select_ln33_4_fu_266_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_86 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_reg_934_pp0_iter1_reg = ap_const_lv1_0))) then 
                    j_fu_86 <= add_ln34_fu_338_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_934_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln44_reg_994 <= add_ln44_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln44_reg_994_pp0_iter4_reg <= add_ln44_reg_994;
                add_ln44_reg_994_pp0_iter5_reg <= add_ln44_reg_994_pp0_iter4_reg;
                add_ln44_reg_994_pp0_iter6_reg <= add_ln44_reg_994_pp0_iter5_reg;
                add_ln44_reg_994_pp0_iter7_reg <= add_ln44_reg_994_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln32_reg_934_pp0_iter2_reg <= icmp_ln32_reg_934_pp0_iter1_reg;
                icmp_ln33_reg_938_pp0_iter2_reg <= icmp_ln33_reg_938_pp0_iter1_reg;
                input_load_1_reg_1006_pp0_iter5_reg <= input_load_1_reg_1006;
                input_load_2_reg_1013_pp0_iter5_reg <= input_load_2_reg_1013;
                input_load_2_reg_1013_pp0_iter6_reg <= input_load_2_reg_1013_pp0_iter5_reg;
                input_load_3_reg_1020_pp0_iter5_reg <= input_load_3_reg_1020;
                input_load_3_reg_1020_pp0_iter6_reg <= input_load_3_reg_1020_pp0_iter5_reg;
                input_load_3_reg_1020_pp0_iter7_reg <= input_load_3_reg_1020_pp0_iter6_reg;
                select_ln39_1_reg_1034 <= select_ln39_1_fu_692_p3;
                select_ln39_2_reg_1041 <= select_ln39_2_fu_781_p3;
                select_ln39_reg_1027 <= select_ln39_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_934_pp0_iter1_reg = ap_const_lv1_0))) then
                and_ln32_reg_957 <= and_ln32_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln32_reg_934 <= icmp_ln32_fu_214_p2;
                icmp_ln32_reg_934_pp0_iter1_reg <= icmp_ln32_reg_934;
                icmp_ln33_reg_938_pp0_iter1_reg <= icmp_ln33_reg_938;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_214_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln33_reg_938 <= icmp_ln33_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                input_load_1_reg_1006 <= input_r_q2;
                input_load_2_reg_1013 <= input_r_q1;
                input_load_3_reg_1020 <= input_r_q0;
                input_load_reg_999 <= input_r_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln32_1_fu_238_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_f_load) + unsigned(ap_const_lv3_1));
    add_ln32_fu_220_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten28_load) + unsigned(ap_const_lv8_1));
    add_ln33_1_fu_260_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln33_fu_389_p2 <= std_logic_vector(unsigned(select_ln32_fu_360_p3) + unsigned(ap_const_lv3_1));
    add_ln34_fu_338_p2 <= std_logic_vector(unsigned(select_ln33_fu_314_p3) + unsigned(ap_const_lv3_1));
    add_ln38_1_fu_519_p2 <= std_logic_vector(unsigned(add_ln38_3_fu_513_p2) + unsigned(p_shl1_1_cast_fu_497_p1));
    add_ln38_2_fu_455_p2 <= std_logic_vector(unsigned(select_ln33_4_cast_fu_436_p1) + unsigned(zext_ln38_fu_452_p1));
    add_ln38_3_fu_513_p2 <= std_logic_vector(unsigned(zext_ln38_3_fu_509_p1) + unsigned(zext_ln38_fu_452_p1));
    add_ln38_fu_461_p2 <= std_logic_vector(unsigned(add_ln38_2_fu_455_p2) + unsigned(p_shl1_0_cast_fu_448_p1));
    add_ln44_1_fu_541_p2 <= std_logic_vector(unsigned(select_ln33_3_fu_429_p3) + unsigned(select_ln33_1_cast_fu_402_p1));
    add_ln44_fu_551_p2 <= std_logic_vector(unsigned(grp_fu_890_p3) + unsigned(zext_ln44_fu_547_p1));
    and_ln32_fu_303_p2 <= (xor_ln32_fu_292_p2 and icmp_ln34_fu_297_p2);
    and_ln39_1_fu_680_p2 <= (or_ln39_2_fu_674_p2 and or_ln39_1_fu_656_p2);
    and_ln39_2_fu_686_p2 <= (grp_fu_417_p_dout0 and and_ln39_1_fu_680_p2);
    and_ln39_3_fu_769_p2 <= (or_ln39_4_fu_763_p2 and or_ln39_3_fu_745_p2);
    and_ln39_4_fu_775_p2 <= (grp_fu_421_p_dout0 and and_ln39_3_fu_769_p2);
    and_ln39_5_fu_858_p2 <= (or_ln39_6_fu_852_p2 and or_ln39_5_fu_834_p2);
    and_ln39_6_fu_864_p2 <= (grp_fu_425_p_dout0 and and_ln39_5_fu_858_p2);
    and_ln39_fu_596_p2 <= (or_ln39_fu_590_p2 and grp_fu_413_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln32_fu_214_p2)
    begin
        if (((icmp_ln32_fu_214_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln32_reg_934_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_934_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_f_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, f_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_f_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_f_load <= f_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten28_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten28_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten28_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten28_load <= indvar_flatten28_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_94;
        end if; 
    end process;

    bitcast_ln39_1_fu_610_p1 <= input_load_1_reg_1006_pp0_iter5_reg;
    bitcast_ln39_2_fu_627_p1 <= select_ln39_reg_1027;
    bitcast_ln39_3_fu_699_p1 <= input_load_2_reg_1013_pp0_iter6_reg;
    bitcast_ln39_4_fu_716_p1 <= select_ln39_1_reg_1034;
    bitcast_ln39_5_fu_788_p1 <= input_load_3_reg_1020_pp0_iter7_reg;
    bitcast_ln39_6_fu_805_p1 <= select_ln39_2_reg_1041;
    bitcast_ln39_fu_561_p1 <= input_load_reg_999;
    empty_36_fu_483_p2 <= (select_ln33_2_fu_414_p3 or ap_const_lv4_1);
    grp_fu_413_p_ce <= ap_const_logic_1;
    grp_fu_413_p_din0 <= input_r_q3;
    grp_fu_413_p_din1 <= ap_const_lv32_FF7FFFFF;
    grp_fu_413_p_opcode <= ap_const_lv5_2;
    grp_fu_417_p_ce <= ap_const_logic_1;
    grp_fu_417_p_din0 <= input_load_1_reg_1006;
    grp_fu_417_p_din1 <= select_ln39_fu_602_p3;
    grp_fu_417_p_opcode <= ap_const_lv5_2;
    grp_fu_421_p_ce <= ap_const_logic_1;
    grp_fu_421_p_din0 <= input_load_2_reg_1013_pp0_iter5_reg;
    grp_fu_421_p_din1 <= select_ln39_1_fu_692_p3;
    grp_fu_421_p_opcode <= ap_const_lv5_2;
    grp_fu_425_p_ce <= ap_const_logic_1;
    grp_fu_425_p_din0 <= input_load_3_reg_1020_pp0_iter6_reg;
    grp_fu_425_p_din1 <= select_ln39_2_fu_781_p3;
    grp_fu_425_p_opcode <= ap_const_lv5_2;
    grp_fu_881_p0 <= grp_fu_881_p00(3 - 1 downto 0);
    grp_fu_881_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_244_p3),9));
    grp_fu_881_p1 <= ap_const_lv9_64(7 - 1 downto 0);
    grp_fu_881_p2 <= grp_fu_881_p20(4 - 1 downto 0);
    grp_fu_881_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_326_p3),9));
    grp_fu_890_p0 <= grp_fu_890_p00(3 - 1 downto 0);
    grp_fu_890_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_244_p3),8));
    grp_fu_890_p1 <= ap_const_lv8_19(5 - 1 downto 0);
    grp_fu_890_p2 <= grp_fu_890_p20(3 - 1 downto 0);
    grp_fu_890_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_fu_314_p3),8));
    icmp_ln32_fu_214_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten28_load = ap_const_lv8_96) else "0";
    icmp_ln33_fu_232_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_19) else "0";
    icmp_ln34_fu_297_p2 <= "1" when (j_fu_86 = ap_const_lv3_5) else "0";
    icmp_ln39_10_fu_822_p2 <= "0" when (tmp_7_fu_791_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_11_fu_828_p2 <= "1" when (trunc_ln39_5_fu_801_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_12_fu_840_p2 <= "0" when (tmp_10_fu_808_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_13_fu_846_p2 <= "1" when (trunc_ln39_6_fu_818_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_1_fu_584_p2 <= "1" when (trunc_ln39_fu_574_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_2_fu_644_p2 <= "0" when (tmp_9_fu_613_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_3_fu_650_p2 <= "1" when (trunc_ln39_1_fu_623_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_4_fu_662_p2 <= "0" when (tmp_s_fu_630_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_5_fu_668_p2 <= "1" when (trunc_ln39_2_fu_640_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_6_fu_733_p2 <= "0" when (tmp_4_fu_702_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_7_fu_739_p2 <= "1" when (trunc_ln39_3_fu_712_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_8_fu_751_p2 <= "0" when (tmp_5_fu_719_p4 = ap_const_lv8_FF) else "1";
    icmp_ln39_9_fu_757_p2 <= "1" when (trunc_ln39_4_fu_729_p1 = ap_const_lv23_0) else "0";
    icmp_ln39_fu_578_p2 <= "0" when (tmp_fu_564_p4 = ap_const_lv8_FF) else "1";
    input_r_address0 <= zext_ln38_5_fu_536_p1(11 - 1 downto 0);
    input_r_address1 <= zext_ln38_4_fu_525_p1(11 - 1 downto 0);
    input_r_address2 <= zext_ln38_2_fu_478_p1(11 - 1 downto 0);
    input_r_address3 <= zext_ln38_1_fu_467_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce2 <= ap_const_logic_1;
        else 
            input_r_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_ce3 <= ap_const_logic_1;
        else 
            input_r_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln33_fu_309_p2 <= (icmp_ln33_reg_938_pp0_iter1_reg or and_ln32_fu_303_p2);
    or_ln38_1_fu_530_p2 <= (ap_const_lv10_1 or add_ln38_1_fu_519_p2);
    or_ln38_fu_472_p2 <= (ap_const_lv10_1 or add_ln38_fu_461_p2);
    or_ln39_1_fu_656_p2 <= (icmp_ln39_3_fu_650_p2 or icmp_ln39_2_fu_644_p2);
    or_ln39_2_fu_674_p2 <= (icmp_ln39_5_fu_668_p2 or icmp_ln39_4_fu_662_p2);
    or_ln39_3_fu_745_p2 <= (icmp_ln39_7_fu_739_p2 or icmp_ln39_6_fu_733_p2);
    or_ln39_4_fu_763_p2 <= (icmp_ln39_9_fu_757_p2 or icmp_ln39_8_fu_751_p2);
    or_ln39_5_fu_834_p2 <= (icmp_ln39_11_fu_828_p2 or icmp_ln39_10_fu_822_p2);
    or_ln39_6_fu_852_p2 <= (icmp_ln39_13_fu_846_p2 or icmp_ln39_12_fu_840_p2);
    or_ln39_fu_590_p2 <= (icmp_ln39_fu_578_p2 or icmp_ln39_1_fu_584_p2);
    output_r_address0 <= zext_ln44_1_fu_877_p1(9 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        input_load_3_reg_1020_pp0_iter7_reg when (and_ln39_6_fu_864_p2(0) = '1') else 
        select_ln39_2_reg_1041;

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid1_fu_406_p3 <= (add_ln33_fu_389_p2 & ap_const_lv1_0);
    p_shl1_0_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_440_p3),10));
    p_shl1_1_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_1_fu_489_p3),10));
    p_shl1_1_fu_489_p3 <= (empty_36_fu_483_p2 & ap_const_lv3_0);
    p_shl1_fu_440_p3 <= (select_ln33_1_fu_395_p3 & ap_const_lv4_0);
    p_shl2_1_fu_501_p3 <= (empty_36_fu_483_p2 & ap_const_lv1_0);
    p_shl_fu_352_p3 <= (i_fu_90 & ap_const_lv2_0);
    p_shl_mid1_fu_421_p3 <= (add_ln33_fu_389_p2 & ap_const_lv2_0);
    select_ln32_1_fu_244_p3 <= 
        add_ln32_1_fu_238_p2 when (icmp_ln33_fu_232_p2(0) = '1') else 
        ap_sig_allocacmp_f_load;
    select_ln32_2_fu_375_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_reg_938_pp0_iter2_reg(0) = '1') else 
        tmp_1_fu_367_p3;
    select_ln32_3_fu_382_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_reg_938_pp0_iter2_reg(0) = '1') else 
        p_shl_fu_352_p3;
    select_ln32_fu_360_p3 <= 
        ap_const_lv3_0 when (icmp_ln33_reg_938_pp0_iter2_reg(0) = '1') else 
        i_fu_90;
    select_ln33_1_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_1_fu_395_p3),5));
    select_ln33_1_fu_395_p3 <= 
        add_ln33_fu_389_p2 when (and_ln32_reg_957(0) = '1') else 
        select_ln32_fu_360_p3;
    select_ln33_2_fu_414_p3 <= 
        p_mid1_fu_406_p3 when (and_ln32_reg_957(0) = '1') else 
        select_ln32_2_fu_375_p3;
    select_ln33_3_fu_429_p3 <= 
        p_shl_mid1_fu_421_p3 when (and_ln32_reg_957(0) = '1') else 
        select_ln32_3_fu_382_p3;
    select_ln33_4_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_3_fu_429_p3),10));
    select_ln33_4_fu_266_p3 <= 
        ap_const_lv6_1 when (icmp_ln33_fu_232_p2(0) = '1') else 
        add_ln33_1_fu_260_p2;
    select_ln33_fu_314_p3 <= 
        ap_const_lv3_0 when (or_ln33_fu_309_p2(0) = '1') else 
        j_fu_86;
    select_ln39_1_fu_692_p3 <= 
        input_load_1_reg_1006_pp0_iter5_reg when (and_ln39_2_fu_686_p2(0) = '1') else 
        select_ln39_reg_1027;
    select_ln39_2_fu_781_p3 <= 
        input_load_2_reg_1013_pp0_iter6_reg when (and_ln39_4_fu_775_p2(0) = '1') else 
        select_ln39_1_reg_1034;
    select_ln39_fu_602_p3 <= 
        input_load_reg_999 when (and_ln39_fu_596_p2(0) = '1') else 
        ap_const_lv32_FF7FFFFF;
    tmp_10_fu_808_p4 <= bitcast_ln39_6_fu_805_p1(30 downto 23);
    tmp_1_fu_367_p3 <= (i_fu_90 & ap_const_lv1_0);
    tmp_2_fu_326_p3 <= (select_ln33_fu_314_p3 & ap_const_lv1_0);
    tmp_4_fu_702_p4 <= bitcast_ln39_3_fu_699_p1(30 downto 23);
    tmp_5_fu_719_p4 <= bitcast_ln39_4_fu_716_p1(30 downto 23);
    tmp_7_fu_791_p4 <= bitcast_ln39_5_fu_788_p1(30 downto 23);
    tmp_9_fu_613_p4 <= bitcast_ln39_1_fu_610_p1(30 downto 23);
    tmp_fu_564_p4 <= bitcast_ln39_fu_561_p1(30 downto 23);
    tmp_s_fu_630_p4 <= bitcast_ln39_2_fu_627_p1(30 downto 23);
    trunc_ln39_1_fu_623_p1 <= bitcast_ln39_1_fu_610_p1(23 - 1 downto 0);
    trunc_ln39_2_fu_640_p1 <= bitcast_ln39_2_fu_627_p1(23 - 1 downto 0);
    trunc_ln39_3_fu_712_p1 <= bitcast_ln39_3_fu_699_p1(23 - 1 downto 0);
    trunc_ln39_4_fu_729_p1 <= bitcast_ln39_4_fu_716_p1(23 - 1 downto 0);
    trunc_ln39_5_fu_801_p1 <= bitcast_ln39_5_fu_788_p1(23 - 1 downto 0);
    trunc_ln39_6_fu_818_p1 <= bitcast_ln39_6_fu_805_p1(23 - 1 downto 0);
    trunc_ln39_fu_574_p1 <= bitcast_ln39_fu_561_p1(23 - 1 downto 0);
    xor_ln32_fu_292_p2 <= (icmp_ln33_reg_938_pp0_iter1_reg xor ap_const_lv1_1);
    zext_ln38_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_461_p2),64));
    zext_ln38_2_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_fu_472_p2),64));
    zext_ln38_3_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_1_fu_501_p3),10));
    zext_ln38_4_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_fu_519_p2),64));
    zext_ln38_5_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_1_fu_530_p2),64));
    zext_ln38_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_881_p3),10));
    zext_ln44_1_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_reg_994_pp0_iter7_reg),64));
    zext_ln44_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_1_fu_541_p2),8));
end behav;
