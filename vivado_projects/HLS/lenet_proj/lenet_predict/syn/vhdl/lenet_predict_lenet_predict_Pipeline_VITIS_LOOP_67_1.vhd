-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_67_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_prob : IN STD_LOGIC_VECTOR (31 downto 0);
    fc3_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fc3_output_ce0 : OUT STD_LOGIC;
    fc3_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_023_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_023_out_ap_vld : OUT STD_LOGIC;
    grp_fu_413_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_413_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_413_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_413_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_67_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln67_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_9_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_269_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln67_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_prob_1_load_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_prob_2_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln68_cast_fu_111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal max_prob_1_fu_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_prob_3_fu_227_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_max_prob_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_023_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_fu_219_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln67_fu_116_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln68_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln68_1_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_137_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_147_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln68_1_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_154_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_1_fu_164_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln68_3_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_1_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lenet_predict_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component lenet_predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_023_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_023_fu_48 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_023_fu_48 <= select_ln68_fu_219_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln67_fu_105_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_52 <= add_ln67_fu_116_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;

    max_prob_1_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    max_prob_1_fu_44 <= max_prob;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    max_prob_1_fu_44 <= max_prob_3_fu_227_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_9_reg_269 <= ap_sig_allocacmp_i_9;
                i_9_reg_269_pp0_iter1_reg <= i_9_reg_269;
                icmp_ln67_reg_274 <= icmp_ln67_fu_105_p2;
                max_prob_1_load_reg_283 <= ap_sig_allocacmp_max_prob_1_load;
                max_prob_2_reg_290 <= fc3_output_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_fu_116_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_9) + unsigned(ap_const_lv4_1));
    and_ln68_1_fu_210_p2 <= (or_ln68_1_fu_198_p2 and and_ln68_fu_204_p2);
    and_ln68_fu_204_p2 <= (or_ln68_fu_180_p2 and grp_fu_413_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln67_fu_105_p2)
    begin
        if (((icmp_ln67_fu_105_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_52)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_9 <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_i_9 <= i_fu_52;
        end if; 
    end process;


    ap_sig_allocacmp_max_prob_1_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, max_prob_1_fu_44, max_prob_3_fu_227_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_max_prob_1_load <= max_prob_3_fu_227_p3;
        else 
            ap_sig_allocacmp_max_prob_1_load <= max_prob_1_fu_44;
        end if; 
    end process;

    bitcast_ln68_1_fu_151_p1 <= max_prob_1_load_reg_283;
    bitcast_ln68_fu_134_p1 <= max_prob_2_reg_290;
    fc3_output_address0 <= trunc_ln68_cast_fu_111_p1(4 - 1 downto 0);

    fc3_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc3_output_ce0 <= ap_const_logic_1;
        else 
            fc3_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_413_p_ce <= ap_const_logic_1;
    grp_fu_413_p_din0 <= fc3_output_q0;
    grp_fu_413_p_din1 <= ap_sig_allocacmp_max_prob_1_load;
    grp_fu_413_p_opcode <= ap_const_lv5_2;
    i_023_out <= i_023_fu_48;

    i_023_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_274)
    begin
        if (((icmp_ln67_reg_274 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_023_out_ap_vld <= ap_const_logic_1;
        else 
            i_023_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln67_fu_105_p2 <= "1" when (ap_sig_allocacmp_i_9 = ap_const_lv4_A) else "0";
    icmp_ln68_1_fu_174_p2 <= "1" when (trunc_ln68_fu_147_p1 = ap_const_lv23_0) else "0";
    icmp_ln68_2_fu_186_p2 <= "0" when (tmp_s_fu_154_p4 = ap_const_lv8_FF) else "1";
    icmp_ln68_3_fu_192_p2 <= "1" when (trunc_ln68_1_fu_164_p1 = ap_const_lv23_0) else "0";
    icmp_ln68_fu_168_p2 <= "0" when (tmp_fu_137_p4 = ap_const_lv8_FF) else "1";
    max_prob_3_fu_227_p3 <= 
        max_prob_2_reg_290 when (and_ln68_1_fu_210_p2(0) = '1') else 
        max_prob_1_load_reg_283;
    or_ln68_1_fu_198_p2 <= (icmp_ln68_3_fu_192_p2 or icmp_ln68_2_fu_186_p2);
    or_ln68_fu_180_p2 <= (icmp_ln68_fu_168_p2 or icmp_ln68_1_fu_174_p2);
    select_ln68_fu_219_p3 <= 
        zext_ln68_fu_216_p1 when (and_ln68_1_fu_210_p2(0) = '1') else 
        i_023_fu_48;
    tmp_fu_137_p4 <= bitcast_ln68_fu_134_p1(30 downto 23);
    tmp_s_fu_154_p4 <= bitcast_ln68_1_fu_151_p1(30 downto 23);
    trunc_ln68_1_fu_164_p1 <= bitcast_ln68_1_fu_151_p1(23 - 1 downto 0);
    trunc_ln68_cast_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_9),64));
    trunc_ln68_fu_147_p1 <= bitcast_ln68_fu_134_p1(23 - 1 downto 0);
    zext_ln68_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_269_pp0_iter1_reg),32));
end behav;
