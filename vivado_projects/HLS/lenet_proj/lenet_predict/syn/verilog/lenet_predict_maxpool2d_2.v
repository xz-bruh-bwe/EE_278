// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet_predict_maxpool2d_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        input_r_address2,
        input_r_ce2,
        input_r_q2,
        input_r_address3,
        input_r_ce3,
        input_r_q3,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_413_p_din0,
        grp_fu_413_p_din1,
        grp_fu_413_p_opcode,
        grp_fu_413_p_dout0,
        grp_fu_413_p_ce,
        grp_fu_417_p_din0,
        grp_fu_417_p_din1,
        grp_fu_417_p_opcode,
        grp_fu_417_p_dout0,
        grp_fu_417_p_ce,
        grp_fu_421_p_din0,
        grp_fu_421_p_din1,
        grp_fu_421_p_opcode,
        grp_fu_421_p_dout0,
        grp_fu_421_p_ce,
        grp_fu_425_p_din0,
        grp_fu_425_p_din1,
        grp_fu_425_p_opcode,
        grp_fu_425_p_dout0,
        grp_fu_425_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [10:0] input_r_address2;
output   input_r_ce2;
input  [31:0] input_r_q2;
output  [10:0] input_r_address3;
output   input_r_ce3;
input  [31:0] input_r_q3;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_413_p_din0;
output  [31:0] grp_fu_413_p_din1;
output  [4:0] grp_fu_413_p_opcode;
input  [0:0] grp_fu_413_p_dout0;
output   grp_fu_413_p_ce;
output  [31:0] grp_fu_417_p_din0;
output  [31:0] grp_fu_417_p_din1;
output  [4:0] grp_fu_417_p_opcode;
input  [0:0] grp_fu_417_p_dout0;
output   grp_fu_417_p_ce;
output  [31:0] grp_fu_421_p_din0;
output  [31:0] grp_fu_421_p_din1;
output  [4:0] grp_fu_421_p_opcode;
input  [0:0] grp_fu_421_p_dout0;
output   grp_fu_421_p_ce;
output  [31:0] grp_fu_425_p_din0;
output  [31:0] grp_fu_425_p_din1;
output  [4:0] grp_fu_425_p_opcode;
input  [0:0] grp_fu_425_p_dout0;
output   grp_fu_425_p_ce;

reg ap_idle;
reg input_r_ce0;
reg input_r_ce1;
reg input_r_ce2;
reg input_r_ce3;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln32_fu_214_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_934;
reg   [0:0] icmp_ln32_reg_934_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_934_pp0_iter2_reg;
wire   [0:0] icmp_ln33_fu_232_p2;
reg   [0:0] icmp_ln33_reg_938;
reg   [0:0] icmp_ln33_reg_938_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_938_pp0_iter2_reg;
wire   [0:0] and_ln32_fu_303_p2;
reg   [0:0] and_ln32_reg_957;
(* use_dsp48 = "no" *) wire   [7:0] add_ln44_fu_551_p2;
reg   [7:0] add_ln44_reg_994;
reg   [7:0] add_ln44_reg_994_pp0_iter4_reg;
reg   [7:0] add_ln44_reg_994_pp0_iter5_reg;
reg   [7:0] add_ln44_reg_994_pp0_iter6_reg;
reg   [7:0] add_ln44_reg_994_pp0_iter7_reg;
reg   [31:0] input_load_reg_999;
reg   [31:0] input_load_1_reg_1006;
reg   [31:0] input_load_1_reg_1006_pp0_iter5_reg;
reg   [31:0] input_load_2_reg_1013;
reg   [31:0] input_load_2_reg_1013_pp0_iter5_reg;
reg   [31:0] input_load_2_reg_1013_pp0_iter6_reg;
reg   [31:0] input_load_3_reg_1020;
reg   [31:0] input_load_3_reg_1020_pp0_iter5_reg;
reg   [31:0] input_load_3_reg_1020_pp0_iter6_reg;
reg   [31:0] input_load_3_reg_1020_pp0_iter7_reg;
wire   [31:0] select_ln39_fu_602_p3;
reg   [31:0] select_ln39_reg_1027;
wire   [31:0] select_ln39_1_fu_692_p3;
reg   [31:0] select_ln39_1_reg_1034;
wire   [31:0] select_ln39_2_fu_781_p3;
reg   [31:0] select_ln39_2_reg_1041;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln38_1_fu_467_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln38_2_fu_478_p1;
wire   [63:0] zext_ln38_4_fu_525_p1;
wire   [63:0] zext_ln38_5_fu_536_p1;
wire   [63:0] zext_ln44_1_fu_877_p1;
reg   [2:0] j_fu_86;
wire   [2:0] add_ln34_fu_338_p2;
wire    ap_loop_init;
reg   [2:0] i_fu_90;
wire   [2:0] select_ln33_1_fu_395_p3;
reg   [5:0] indvar_flatten_fu_94;
wire   [5:0] select_ln33_4_fu_266_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] f_fu_98;
wire   [2:0] select_ln32_1_fu_244_p3;
reg   [2:0] ap_sig_allocacmp_f_load;
reg   [7:0] indvar_flatten28_fu_102;
wire   [7:0] add_ln32_fu_220_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten28_load;
wire   [2:0] add_ln32_1_fu_238_p2;
wire   [5:0] add_ln33_1_fu_260_p2;
wire   [0:0] icmp_ln34_fu_297_p2;
wire   [0:0] xor_ln32_fu_292_p2;
wire   [0:0] or_ln33_fu_309_p2;
wire   [2:0] select_ln33_fu_314_p3;
wire   [3:0] tmp_2_fu_326_p3;
wire   [3:0] tmp_1_fu_367_p3;
wire   [4:0] p_shl_fu_352_p3;
wire   [2:0] select_ln32_fu_360_p3;
wire   [2:0] add_ln33_fu_389_p2;
wire   [3:0] p_mid1_fu_406_p3;
wire   [3:0] select_ln32_2_fu_375_p3;
wire   [4:0] p_shl_mid1_fu_421_p3;
wire   [4:0] select_ln32_3_fu_382_p3;
wire   [4:0] select_ln33_3_fu_429_p3;
wire   [6:0] p_shl1_fu_440_p3;
wire   [8:0] grp_fu_881_p3;
wire   [9:0] select_ln33_4_cast_fu_436_p1;
wire   [9:0] zext_ln38_fu_452_p1;
wire   [9:0] add_ln38_2_fu_455_p2;
wire   [9:0] p_shl1_0_cast_fu_448_p1;
wire   [9:0] add_ln38_fu_461_p2;
wire   [9:0] or_ln38_fu_472_p2;
wire   [3:0] select_ln33_2_fu_414_p3;
wire   [3:0] empty_36_fu_483_p2;
wire   [6:0] p_shl1_1_fu_489_p3;
wire   [4:0] p_shl2_1_fu_501_p3;
wire   [9:0] zext_ln38_3_fu_509_p1;
wire   [9:0] add_ln38_3_fu_513_p2;
wire   [9:0] p_shl1_1_cast_fu_497_p1;
wire   [9:0] add_ln38_1_fu_519_p2;
wire   [9:0] or_ln38_1_fu_530_p2;
wire   [4:0] select_ln33_1_cast_fu_402_p1;
wire   [4:0] add_ln44_1_fu_541_p2;
wire   [7:0] grp_fu_890_p3;
wire   [7:0] zext_ln44_fu_547_p1;
wire   [31:0] bitcast_ln39_fu_561_p1;
wire   [7:0] tmp_fu_564_p4;
wire   [22:0] trunc_ln39_fu_574_p1;
wire   [0:0] icmp_ln39_1_fu_584_p2;
wire   [0:0] icmp_ln39_fu_578_p2;
wire   [0:0] or_ln39_fu_590_p2;
wire   [0:0] and_ln39_fu_596_p2;
wire   [31:0] bitcast_ln39_1_fu_610_p1;
wire   [31:0] bitcast_ln39_2_fu_627_p1;
wire   [7:0] tmp_9_fu_613_p4;
wire   [22:0] trunc_ln39_1_fu_623_p1;
wire   [0:0] icmp_ln39_3_fu_650_p2;
wire   [0:0] icmp_ln39_2_fu_644_p2;
wire   [7:0] tmp_s_fu_630_p4;
wire   [22:0] trunc_ln39_2_fu_640_p1;
wire   [0:0] icmp_ln39_5_fu_668_p2;
wire   [0:0] icmp_ln39_4_fu_662_p2;
wire   [0:0] or_ln39_1_fu_656_p2;
wire   [0:0] or_ln39_2_fu_674_p2;
wire   [0:0] and_ln39_1_fu_680_p2;
wire   [0:0] and_ln39_2_fu_686_p2;
wire   [31:0] bitcast_ln39_3_fu_699_p1;
wire   [31:0] bitcast_ln39_4_fu_716_p1;
wire   [7:0] tmp_4_fu_702_p4;
wire   [22:0] trunc_ln39_3_fu_712_p1;
wire   [0:0] icmp_ln39_7_fu_739_p2;
wire   [0:0] icmp_ln39_6_fu_733_p2;
wire   [7:0] tmp_5_fu_719_p4;
wire   [22:0] trunc_ln39_4_fu_729_p1;
wire   [0:0] icmp_ln39_9_fu_757_p2;
wire   [0:0] icmp_ln39_8_fu_751_p2;
wire   [0:0] or_ln39_3_fu_745_p2;
wire   [0:0] or_ln39_4_fu_763_p2;
wire   [0:0] and_ln39_3_fu_769_p2;
wire   [0:0] and_ln39_4_fu_775_p2;
wire   [31:0] bitcast_ln39_5_fu_788_p1;
wire   [31:0] bitcast_ln39_6_fu_805_p1;
wire   [7:0] tmp_7_fu_791_p4;
wire   [22:0] trunc_ln39_5_fu_801_p1;
wire   [0:0] icmp_ln39_11_fu_828_p2;
wire   [0:0] icmp_ln39_10_fu_822_p2;
wire   [7:0] tmp_10_fu_808_p4;
wire   [22:0] trunc_ln39_6_fu_818_p1;
wire   [0:0] icmp_ln39_13_fu_846_p2;
wire   [0:0] icmp_ln39_12_fu_840_p2;
wire   [0:0] or_ln39_5_fu_834_p2;
wire   [0:0] or_ln39_6_fu_852_p2;
wire   [0:0] and_ln39_5_fu_858_p2;
wire   [0:0] and_ln39_6_fu_864_p2;
wire   [2:0] grp_fu_881_p0;
wire   [6:0] grp_fu_881_p1;
wire   [3:0] grp_fu_881_p2;
wire   [2:0] grp_fu_890_p0;
wire   [4:0] grp_fu_890_p1;
wire   [2:0] grp_fu_890_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] grp_fu_881_p00;
wire   [8:0] grp_fu_881_p20;
wire   [7:0] grp_fu_890_p00;
wire   [7:0] grp_fu_890_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet_predict_mac_muladd_3ns_7ns_4ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
mac_muladd_3ns_7ns_4ns_9_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_881_p0),
    .din1(grp_fu_881_p1),
    .din2(grp_fu_881_p2),
    .ce(1'b1),
    .dout(grp_fu_881_p3)
);

lenet_predict_mac_muladd_3ns_5ns_3ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mac_muladd_3ns_5ns_3ns_8_4_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_890_p0),
    .din1(grp_fu_890_p1),
    .din2(grp_fu_890_p2),
    .ce(1'b1),
    .dout(grp_fu_890_p3)
);

lenet_predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            f_fu_98 <= select_ln32_1_fu_244_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            f_fu_98 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_90 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_934_pp0_iter2_reg == 1'd0))) begin
            i_fu_90 <= select_ln33_1_fu_395_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten28_fu_102 <= add_ln32_fu_220_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten28_fu_102 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_94 <= select_ln33_4_fu_266_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_86 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_934_pp0_iter1_reg == 1'd0))) begin
            j_fu_86 <= add_ln34_fu_338_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_934_pp0_iter2_reg == 1'd0))) begin
        add_ln44_reg_994 <= add_ln44_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln44_reg_994_pp0_iter4_reg <= add_ln44_reg_994;
        add_ln44_reg_994_pp0_iter5_reg <= add_ln44_reg_994_pp0_iter4_reg;
        add_ln44_reg_994_pp0_iter6_reg <= add_ln44_reg_994_pp0_iter5_reg;
        add_ln44_reg_994_pp0_iter7_reg <= add_ln44_reg_994_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln32_reg_934_pp0_iter2_reg <= icmp_ln32_reg_934_pp0_iter1_reg;
        icmp_ln33_reg_938_pp0_iter2_reg <= icmp_ln33_reg_938_pp0_iter1_reg;
        input_load_1_reg_1006_pp0_iter5_reg <= input_load_1_reg_1006;
        input_load_2_reg_1013_pp0_iter5_reg <= input_load_2_reg_1013;
        input_load_2_reg_1013_pp0_iter6_reg <= input_load_2_reg_1013_pp0_iter5_reg;
        input_load_3_reg_1020_pp0_iter5_reg <= input_load_3_reg_1020;
        input_load_3_reg_1020_pp0_iter6_reg <= input_load_3_reg_1020_pp0_iter5_reg;
        input_load_3_reg_1020_pp0_iter7_reg <= input_load_3_reg_1020_pp0_iter6_reg;
        select_ln39_1_reg_1034 <= select_ln39_1_fu_692_p3;
        select_ln39_2_reg_1041 <= select_ln39_2_fu_781_p3;
        select_ln39_reg_1027 <= select_ln39_fu_602_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_934_pp0_iter1_reg == 1'd0))) begin
        and_ln32_reg_957 <= and_ln32_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln32_reg_934 <= icmp_ln32_fu_214_p2;
        icmp_ln32_reg_934_pp0_iter1_reg <= icmp_ln32_reg_934;
        icmp_ln33_reg_938_pp0_iter1_reg <= icmp_ln33_reg_938;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln33_reg_938 <= icmp_ln33_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_load_1_reg_1006 <= input_r_q2;
        input_load_2_reg_1013 <= input_r_q1;
        input_load_3_reg_1020 <= input_r_q0;
        input_load_reg_999 <= input_r_q3;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_934_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_f_load = 3'd0;
    end else begin
        ap_sig_allocacmp_f_load = f_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten28_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten28_load = indvar_flatten28_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce2 = 1'b1;
    end else begin
        input_r_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce3 = 1'b1;
    end else begin
        input_r_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_238_p2 = (ap_sig_allocacmp_f_load + 3'd1);

assign add_ln32_fu_220_p2 = (ap_sig_allocacmp_indvar_flatten28_load + 8'd1);

assign add_ln33_1_fu_260_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln33_fu_389_p2 = (select_ln32_fu_360_p3 + 3'd1);

assign add_ln34_fu_338_p2 = (select_ln33_fu_314_p3 + 3'd1);

assign add_ln38_1_fu_519_p2 = (add_ln38_3_fu_513_p2 + p_shl1_1_cast_fu_497_p1);

assign add_ln38_2_fu_455_p2 = (select_ln33_4_cast_fu_436_p1 + zext_ln38_fu_452_p1);

assign add_ln38_3_fu_513_p2 = (zext_ln38_3_fu_509_p1 + zext_ln38_fu_452_p1);

assign add_ln38_fu_461_p2 = (add_ln38_2_fu_455_p2 + p_shl1_0_cast_fu_448_p1);

assign add_ln44_1_fu_541_p2 = (select_ln33_3_fu_429_p3 + select_ln33_1_cast_fu_402_p1);

assign add_ln44_fu_551_p2 = (grp_fu_890_p3 + zext_ln44_fu_547_p1);

assign and_ln32_fu_303_p2 = (xor_ln32_fu_292_p2 & icmp_ln34_fu_297_p2);

assign and_ln39_1_fu_680_p2 = (or_ln39_2_fu_674_p2 & or_ln39_1_fu_656_p2);

assign and_ln39_2_fu_686_p2 = (grp_fu_417_p_dout0 & and_ln39_1_fu_680_p2);

assign and_ln39_3_fu_769_p2 = (or_ln39_4_fu_763_p2 & or_ln39_3_fu_745_p2);

assign and_ln39_4_fu_775_p2 = (grp_fu_421_p_dout0 & and_ln39_3_fu_769_p2);

assign and_ln39_5_fu_858_p2 = (or_ln39_6_fu_852_p2 & or_ln39_5_fu_834_p2);

assign and_ln39_6_fu_864_p2 = (grp_fu_425_p_dout0 & and_ln39_5_fu_858_p2);

assign and_ln39_fu_596_p2 = (or_ln39_fu_590_p2 & grp_fu_413_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln39_1_fu_610_p1 = input_load_1_reg_1006_pp0_iter5_reg;

assign bitcast_ln39_2_fu_627_p1 = select_ln39_reg_1027;

assign bitcast_ln39_3_fu_699_p1 = input_load_2_reg_1013_pp0_iter6_reg;

assign bitcast_ln39_4_fu_716_p1 = select_ln39_1_reg_1034;

assign bitcast_ln39_5_fu_788_p1 = input_load_3_reg_1020_pp0_iter7_reg;

assign bitcast_ln39_6_fu_805_p1 = select_ln39_2_reg_1041;

assign bitcast_ln39_fu_561_p1 = input_load_reg_999;

assign empty_36_fu_483_p2 = (select_ln33_2_fu_414_p3 | 4'd1);

assign grp_fu_413_p_ce = 1'b1;

assign grp_fu_413_p_din0 = input_r_q3;

assign grp_fu_413_p_din1 = 32'd4286578687;

assign grp_fu_413_p_opcode = 5'd2;

assign grp_fu_417_p_ce = 1'b1;

assign grp_fu_417_p_din0 = input_load_1_reg_1006;

assign grp_fu_417_p_din1 = select_ln39_fu_602_p3;

assign grp_fu_417_p_opcode = 5'd2;

assign grp_fu_421_p_ce = 1'b1;

assign grp_fu_421_p_din0 = input_load_2_reg_1013_pp0_iter5_reg;

assign grp_fu_421_p_din1 = select_ln39_1_fu_692_p3;

assign grp_fu_421_p_opcode = 5'd2;

assign grp_fu_425_p_ce = 1'b1;

assign grp_fu_425_p_din0 = input_load_3_reg_1020_pp0_iter6_reg;

assign grp_fu_425_p_din1 = select_ln39_2_fu_781_p3;

assign grp_fu_425_p_opcode = 5'd2;

assign grp_fu_881_p0 = grp_fu_881_p00;

assign grp_fu_881_p00 = select_ln32_1_fu_244_p3;

assign grp_fu_881_p1 = 9'd100;

assign grp_fu_881_p2 = grp_fu_881_p20;

assign grp_fu_881_p20 = tmp_2_fu_326_p3;

assign grp_fu_890_p0 = grp_fu_890_p00;

assign grp_fu_890_p00 = select_ln32_1_fu_244_p3;

assign grp_fu_890_p1 = 8'd25;

assign grp_fu_890_p2 = grp_fu_890_p20;

assign grp_fu_890_p20 = select_ln33_fu_314_p3;

assign icmp_ln32_fu_214_p2 = ((ap_sig_allocacmp_indvar_flatten28_load == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_232_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_297_p2 = ((j_fu_86 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln39_10_fu_822_p2 = ((tmp_7_fu_791_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_11_fu_828_p2 = ((trunc_ln39_5_fu_801_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_12_fu_840_p2 = ((tmp_10_fu_808_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_13_fu_846_p2 = ((trunc_ln39_6_fu_818_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_584_p2 = ((trunc_ln39_fu_574_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_2_fu_644_p2 = ((tmp_9_fu_613_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_3_fu_650_p2 = ((trunc_ln39_1_fu_623_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_4_fu_662_p2 = ((tmp_s_fu_630_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_5_fu_668_p2 = ((trunc_ln39_2_fu_640_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_6_fu_733_p2 = ((tmp_4_fu_702_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_7_fu_739_p2 = ((trunc_ln39_3_fu_712_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_8_fu_751_p2 = ((tmp_5_fu_719_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_9_fu_757_p2 = ((trunc_ln39_4_fu_729_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_578_p2 = ((tmp_fu_564_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln38_5_fu_536_p1;

assign input_r_address1 = zext_ln38_4_fu_525_p1;

assign input_r_address2 = zext_ln38_2_fu_478_p1;

assign input_r_address3 = zext_ln38_1_fu_467_p1;

assign or_ln33_fu_309_p2 = (icmp_ln33_reg_938_pp0_iter1_reg | and_ln32_fu_303_p2);

assign or_ln38_1_fu_530_p2 = (10'd1 | add_ln38_1_fu_519_p2);

assign or_ln38_fu_472_p2 = (10'd1 | add_ln38_fu_461_p2);

assign or_ln39_1_fu_656_p2 = (icmp_ln39_3_fu_650_p2 | icmp_ln39_2_fu_644_p2);

assign or_ln39_2_fu_674_p2 = (icmp_ln39_5_fu_668_p2 | icmp_ln39_4_fu_662_p2);

assign or_ln39_3_fu_745_p2 = (icmp_ln39_7_fu_739_p2 | icmp_ln39_6_fu_733_p2);

assign or_ln39_4_fu_763_p2 = (icmp_ln39_9_fu_757_p2 | icmp_ln39_8_fu_751_p2);

assign or_ln39_5_fu_834_p2 = (icmp_ln39_11_fu_828_p2 | icmp_ln39_10_fu_822_p2);

assign or_ln39_6_fu_852_p2 = (icmp_ln39_13_fu_846_p2 | icmp_ln39_12_fu_840_p2);

assign or_ln39_fu_590_p2 = (icmp_ln39_fu_578_p2 | icmp_ln39_1_fu_584_p2);

assign output_r_address0 = zext_ln44_1_fu_877_p1;

assign output_r_d0 = ((and_ln39_6_fu_864_p2[0:0] == 1'b1) ? input_load_3_reg_1020_pp0_iter7_reg : select_ln39_2_reg_1041);

assign p_mid1_fu_406_p3 = {{add_ln33_fu_389_p2}, {1'd0}};

assign p_shl1_0_cast_fu_448_p1 = p_shl1_fu_440_p3;

assign p_shl1_1_cast_fu_497_p1 = p_shl1_1_fu_489_p3;

assign p_shl1_1_fu_489_p3 = {{empty_36_fu_483_p2}, {3'd0}};

assign p_shl1_fu_440_p3 = {{select_ln33_1_fu_395_p3}, {4'd0}};

assign p_shl2_1_fu_501_p3 = {{empty_36_fu_483_p2}, {1'd0}};

assign p_shl_fu_352_p3 = {{i_fu_90}, {2'd0}};

assign p_shl_mid1_fu_421_p3 = {{add_ln33_fu_389_p2}, {2'd0}};

assign select_ln32_1_fu_244_p3 = ((icmp_ln33_fu_232_p2[0:0] == 1'b1) ? add_ln32_1_fu_238_p2 : ap_sig_allocacmp_f_load);

assign select_ln32_2_fu_375_p3 = ((icmp_ln33_reg_938_pp0_iter2_reg[0:0] == 1'b1) ? 4'd0 : tmp_1_fu_367_p3);

assign select_ln32_3_fu_382_p3 = ((icmp_ln33_reg_938_pp0_iter2_reg[0:0] == 1'b1) ? 5'd0 : p_shl_fu_352_p3);

assign select_ln32_fu_360_p3 = ((icmp_ln33_reg_938_pp0_iter2_reg[0:0] == 1'b1) ? 3'd0 : i_fu_90);

assign select_ln33_1_cast_fu_402_p1 = select_ln33_1_fu_395_p3;

assign select_ln33_1_fu_395_p3 = ((and_ln32_reg_957[0:0] == 1'b1) ? add_ln33_fu_389_p2 : select_ln32_fu_360_p3);

assign select_ln33_2_fu_414_p3 = ((and_ln32_reg_957[0:0] == 1'b1) ? p_mid1_fu_406_p3 : select_ln32_2_fu_375_p3);

assign select_ln33_3_fu_429_p3 = ((and_ln32_reg_957[0:0] == 1'b1) ? p_shl_mid1_fu_421_p3 : select_ln32_3_fu_382_p3);

assign select_ln33_4_cast_fu_436_p1 = select_ln33_3_fu_429_p3;

assign select_ln33_4_fu_266_p3 = ((icmp_ln33_fu_232_p2[0:0] == 1'b1) ? 6'd1 : add_ln33_1_fu_260_p2);

assign select_ln33_fu_314_p3 = ((or_ln33_fu_309_p2[0:0] == 1'b1) ? 3'd0 : j_fu_86);

assign select_ln39_1_fu_692_p3 = ((and_ln39_2_fu_686_p2[0:0] == 1'b1) ? input_load_1_reg_1006_pp0_iter5_reg : select_ln39_reg_1027);

assign select_ln39_2_fu_781_p3 = ((and_ln39_4_fu_775_p2[0:0] == 1'b1) ? input_load_2_reg_1013_pp0_iter6_reg : select_ln39_1_reg_1034);

assign select_ln39_fu_602_p3 = ((and_ln39_fu_596_p2[0:0] == 1'b1) ? input_load_reg_999 : 32'd4286578687);

assign tmp_10_fu_808_p4 = {{bitcast_ln39_6_fu_805_p1[30:23]}};

assign tmp_1_fu_367_p3 = {{i_fu_90}, {1'd0}};

assign tmp_2_fu_326_p3 = {{select_ln33_fu_314_p3}, {1'd0}};

assign tmp_4_fu_702_p4 = {{bitcast_ln39_3_fu_699_p1[30:23]}};

assign tmp_5_fu_719_p4 = {{bitcast_ln39_4_fu_716_p1[30:23]}};

assign tmp_7_fu_791_p4 = {{bitcast_ln39_5_fu_788_p1[30:23]}};

assign tmp_9_fu_613_p4 = {{bitcast_ln39_1_fu_610_p1[30:23]}};

assign tmp_fu_564_p4 = {{bitcast_ln39_fu_561_p1[30:23]}};

assign tmp_s_fu_630_p4 = {{bitcast_ln39_2_fu_627_p1[30:23]}};

assign trunc_ln39_1_fu_623_p1 = bitcast_ln39_1_fu_610_p1[22:0];

assign trunc_ln39_2_fu_640_p1 = bitcast_ln39_2_fu_627_p1[22:0];

assign trunc_ln39_3_fu_712_p1 = bitcast_ln39_3_fu_699_p1[22:0];

assign trunc_ln39_4_fu_729_p1 = bitcast_ln39_4_fu_716_p1[22:0];

assign trunc_ln39_5_fu_801_p1 = bitcast_ln39_5_fu_788_p1[22:0];

assign trunc_ln39_6_fu_818_p1 = bitcast_ln39_6_fu_805_p1[22:0];

assign trunc_ln39_fu_574_p1 = bitcast_ln39_fu_561_p1[22:0];

assign xor_ln32_fu_292_p2 = (icmp_ln33_reg_938_pp0_iter1_reg ^ 1'd1);

assign zext_ln38_1_fu_467_p1 = add_ln38_fu_461_p2;

assign zext_ln38_2_fu_478_p1 = or_ln38_fu_472_p2;

assign zext_ln38_3_fu_509_p1 = p_shl2_1_fu_501_p3;

assign zext_ln38_4_fu_525_p1 = add_ln38_1_fu_519_p2;

assign zext_ln38_5_fu_536_p1 = or_ln38_1_fu_530_p2;

assign zext_ln38_fu_452_p1 = grp_fu_881_p3;

assign zext_ln44_1_fu_877_p1 = add_ln44_reg_994_pp0_iter7_reg;

assign zext_ln44_fu_547_p1 = add_ln44_1_fu_541_p2;

endmodule //lenet_predict_maxpool2d_2
