// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet_predict_maxpool2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        input_r_address2,
        input_r_ce2,
        input_r_q2,
        input_r_address3,
        input_r_ce3,
        input_r_q3,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_413_p_din0,
        grp_fu_413_p_din1,
        grp_fu_413_p_opcode,
        grp_fu_413_p_dout0,
        grp_fu_413_p_ce,
        grp_fu_417_p_din0,
        grp_fu_417_p_din1,
        grp_fu_417_p_opcode,
        grp_fu_417_p_dout0,
        grp_fu_417_p_ce,
        grp_fu_421_p_din0,
        grp_fu_421_p_din1,
        grp_fu_421_p_opcode,
        grp_fu_421_p_dout0,
        grp_fu_421_p_ce,
        grp_fu_425_p_din0,
        grp_fu_425_p_din1,
        grp_fu_425_p_opcode,
        grp_fu_425_p_dout0,
        grp_fu_425_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [12:0] input_r_address2;
output   input_r_ce2;
input  [31:0] input_r_q2;
output  [12:0] input_r_address3;
output   input_r_ce3;
input  [31:0] input_r_q3;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_413_p_din0;
output  [31:0] grp_fu_413_p_din1;
output  [4:0] grp_fu_413_p_opcode;
input  [0:0] grp_fu_413_p_dout0;
output   grp_fu_413_p_ce;
output  [31:0] grp_fu_417_p_din0;
output  [31:0] grp_fu_417_p_din1;
output  [4:0] grp_fu_417_p_opcode;
input  [0:0] grp_fu_417_p_dout0;
output   grp_fu_417_p_ce;
output  [31:0] grp_fu_421_p_din0;
output  [31:0] grp_fu_421_p_din1;
output  [4:0] grp_fu_421_p_opcode;
input  [0:0] grp_fu_421_p_dout0;
output   grp_fu_421_p_ce;
output  [31:0] grp_fu_425_p_din0;
output  [31:0] grp_fu_425_p_din1;
output  [4:0] grp_fu_425_p_opcode;
input  [0:0] grp_fu_425_p_dout0;
output   grp_fu_425_p_ce;

reg ap_idle;
reg input_r_ce0;
reg input_r_ce1;
reg input_r_ce2;
reg input_r_ce3;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln32_fu_222_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_980;
reg   [0:0] icmp_ln32_reg_980_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_980_pp0_iter2_reg;
wire   [0:0] icmp_ln33_fu_240_p2;
reg   [0:0] icmp_ln33_reg_984;
reg   [0:0] icmp_ln33_reg_984_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_984_pp0_iter2_reg;
wire   [0:0] and_ln33_fu_311_p2;
reg   [0:0] and_ln33_reg_1003;
wire   [10:0] add_ln44_fu_596_p2;
reg   [10:0] add_ln44_reg_1040;
reg   [10:0] add_ln44_reg_1040_pp0_iter4_reg;
reg   [10:0] add_ln44_reg_1040_pp0_iter5_reg;
reg   [10:0] add_ln44_reg_1040_pp0_iter6_reg;
reg   [10:0] add_ln44_reg_1040_pp0_iter7_reg;
reg   [31:0] input_load_reg_1045;
reg   [31:0] input_load_4_reg_1052;
reg   [31:0] input_load_4_reg_1052_pp0_iter5_reg;
reg   [31:0] input_load_5_reg_1059;
reg   [31:0] input_load_5_reg_1059_pp0_iter5_reg;
reg   [31:0] input_load_5_reg_1059_pp0_iter6_reg;
reg   [31:0] input_load_6_reg_1066;
reg   [31:0] input_load_6_reg_1066_pp0_iter5_reg;
reg   [31:0] input_load_6_reg_1066_pp0_iter6_reg;
reg   [31:0] input_load_6_reg_1066_pp0_iter7_reg;
wire   [31:0] select_ln39_fu_648_p3;
reg   [31:0] select_ln39_reg_1073;
wire   [31:0] select_ln39_4_fu_738_p3;
reg   [31:0] select_ln39_4_reg_1080;
wire   [31:0] select_ln39_5_fu_827_p3;
reg   [31:0] select_ln39_5_reg_1087;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln38_6_fu_515_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln38_7_fu_526_p1;
wire   [63:0] zext_ln38_8_fu_577_p1;
wire   [63:0] zext_ln38_9_fu_588_p1;
wire   [63:0] zext_ln44_2_fu_923_p1;
reg   [3:0] j_fu_94;
wire   [3:0] add_ln34_fu_346_p2;
wire    ap_loop_init;
reg   [3:0] i_fu_98;
wire   [3:0] select_ln33_11_fu_465_p3;
reg   [7:0] indvar_flatten_fu_102;
wire   [7:0] select_ln33_12_fu_274_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] f_fu_106;
wire   [2:0] select_ln33_5_fu_252_p3;
reg   [2:0] ap_sig_allocacmp_f_load;
reg   [10:0] indvar_flatten36_fu_110;
wire   [10:0] add_ln32_fu_228_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten36_load;
wire   [2:0] add_ln32_2_fu_246_p2;
wire   [7:0] add_ln33_2_fu_268_p2;
wire   [0:0] icmp_ln34_fu_305_p2;
wire   [0:0] xor_ln33_fu_300_p2;
wire   [0:0] or_ln33_fu_317_p2;
wire   [3:0] select_ln33_8_fu_322_p3;
wire   [4:0] tmp_3_fu_334_p3;
wire   [4:0] tmp_fu_360_p3;
wire   [7:0] p_shl_fu_372_p3;
wire   [8:0] p_shl_cast_fu_380_p1;
wire   [8:0] p_cast_fu_368_p1;
wire   [8:0] empty_fu_384_p2;
wire   [3:0] select_ln33_fu_390_p3;
wire   [3:0] add_ln33_fu_411_p2;
wire   [4:0] p_mid1_fu_417_p3;
wire   [4:0] select_ln33_6_fu_397_p3;
wire   [7:0] p_shl_mid1_fu_436_p3;
wire   [8:0] p_shl_cast_mid1_fu_444_p1;
wire   [8:0] p_cast_mid1_fu_432_p1;
wire   [8:0] p_mid13_fu_448_p2;
wire   [8:0] select_ln33_7_fu_404_p3;
wire   [8:0] select_ln33_10_fu_454_p3;
wire   [9:0] p_shl2_fu_472_p3;
wire   [6:0] p_shl3_fu_484_p3;
wire   [10:0] p_shl2_0_cast_fu_480_p1;
wire   [10:0] p_shl3_0_cast_fu_492_p1;
wire   [10:0] empty_37_fu_496_p2;
wire   [11:0] grp_fu_927_p3;
wire   [12:0] zext_ln38_fu_506_p1;
wire  signed [12:0] p_cast8_fu_502_p1;
wire   [12:0] add_ln38_fu_509_p2;
wire   [12:0] or_ln38_fu_520_p2;
wire   [4:0] select_ln33_9_fu_425_p3;
wire   [4:0] empty_39_fu_531_p2;
wire   [9:0] p_shl2_1_fu_537_p3;
wire   [6:0] p_shl3_1_fu_549_p3;
wire   [10:0] p_shl2_1_cast_fu_545_p1;
wire   [10:0] p_shl3_1_cast_fu_557_p1;
wire   [10:0] empty_40_fu_561_p2;
wire  signed [12:0] sext_ln38_fu_567_p1;
wire   [12:0] add_ln38_2_fu_571_p2;
wire   [12:0] or_ln38_2_fu_582_p2;
wire   [9:0] grp_fu_936_p3;
wire   [10:0] zext_ln44_fu_593_p1;
wire  signed [10:0] select_ln33_13_cast_fu_461_p1;
wire   [31:0] bitcast_ln39_fu_607_p1;
wire   [7:0] tmp_s_fu_610_p4;
wire   [22:0] trunc_ln39_fu_620_p1;
wire   [0:0] icmp_ln39_14_fu_630_p2;
wire   [0:0] icmp_ln39_fu_624_p2;
wire   [0:0] or_ln39_fu_636_p2;
wire   [0:0] and_ln39_fu_642_p2;
wire   [31:0] bitcast_ln39_7_fu_656_p1;
wire   [31:0] bitcast_ln39_8_fu_673_p1;
wire   [7:0] tmp_13_fu_659_p4;
wire   [22:0] trunc_ln39_7_fu_669_p1;
wire   [0:0] icmp_ln39_16_fu_696_p2;
wire   [0:0] icmp_ln39_15_fu_690_p2;
wire   [7:0] tmp_14_fu_676_p4;
wire   [22:0] trunc_ln39_8_fu_686_p1;
wire   [0:0] icmp_ln39_18_fu_714_p2;
wire   [0:0] icmp_ln39_17_fu_708_p2;
wire   [0:0] or_ln39_7_fu_702_p2;
wire   [0:0] or_ln39_8_fu_720_p2;
wire   [0:0] and_ln39_7_fu_726_p2;
wire   [0:0] and_ln39_8_fu_732_p2;
wire   [31:0] bitcast_ln39_9_fu_745_p1;
wire   [31:0] bitcast_ln39_10_fu_762_p1;
wire   [7:0] tmp_16_fu_748_p4;
wire   [22:0] trunc_ln39_9_fu_758_p1;
wire   [0:0] icmp_ln39_20_fu_785_p2;
wire   [0:0] icmp_ln39_19_fu_779_p2;
wire   [7:0] tmp_17_fu_765_p4;
wire   [22:0] trunc_ln39_10_fu_775_p1;
wire   [0:0] icmp_ln39_22_fu_803_p2;
wire   [0:0] icmp_ln39_21_fu_797_p2;
wire   [0:0] or_ln39_9_fu_791_p2;
wire   [0:0] or_ln39_10_fu_809_p2;
wire   [0:0] and_ln39_9_fu_815_p2;
wire   [0:0] and_ln39_10_fu_821_p2;
wire   [31:0] bitcast_ln39_11_fu_834_p1;
wire   [31:0] bitcast_ln39_12_fu_851_p1;
wire   [7:0] tmp_19_fu_837_p4;
wire   [22:0] trunc_ln39_11_fu_847_p1;
wire   [0:0] icmp_ln39_24_fu_874_p2;
wire   [0:0] icmp_ln39_23_fu_868_p2;
wire   [7:0] tmp_20_fu_854_p4;
wire   [22:0] trunc_ln39_12_fu_864_p1;
wire   [0:0] icmp_ln39_26_fu_892_p2;
wire   [0:0] icmp_ln39_25_fu_886_p2;
wire   [0:0] or_ln39_11_fu_880_p2;
wire   [0:0] or_ln39_12_fu_898_p2;
wire   [0:0] and_ln39_11_fu_904_p2;
wire   [0:0] and_ln39_12_fu_910_p2;
wire   [2:0] grp_fu_927_p0;
wire   [9:0] grp_fu_927_p1;
wire   [4:0] grp_fu_927_p2;
wire   [2:0] grp_fu_936_p0;
wire   [7:0] grp_fu_936_p1;
wire   [3:0] grp_fu_936_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [11:0] grp_fu_927_p00;
wire   [11:0] grp_fu_927_p20;
wire   [9:0] grp_fu_936_p00;
wire   [9:0] grp_fu_936_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet_predict_mac_muladd_3ns_10ns_5ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 12 ))
mac_muladd_3ns_10ns_5ns_12_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_927_p0),
    .din1(grp_fu_927_p1),
    .din2(grp_fu_927_p2),
    .ce(1'b1),
    .dout(grp_fu_927_p3)
);

lenet_predict_mac_muladd_3ns_8ns_4ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 10 ))
mac_muladd_3ns_8ns_4ns_10_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_936_p0),
    .din1(grp_fu_936_p1),
    .din2(grp_fu_936_p2),
    .ce(1'b1),
    .dout(grp_fu_936_p3)
);

lenet_predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            f_fu_106 <= select_ln33_5_fu_252_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            f_fu_106 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_98 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_980_pp0_iter2_reg == 1'd0))) begin
            i_fu_98 <= select_ln33_11_fu_465_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten36_fu_110 <= add_ln32_fu_228_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten36_fu_110 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln32_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_102 <= select_ln33_12_fu_274_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_94 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_reg_980_pp0_iter1_reg == 1'd0))) begin
            j_fu_94 <= add_ln34_fu_346_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_980_pp0_iter2_reg == 1'd0))) begin
        add_ln44_reg_1040 <= add_ln44_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln44_reg_1040_pp0_iter4_reg <= add_ln44_reg_1040;
        add_ln44_reg_1040_pp0_iter5_reg <= add_ln44_reg_1040_pp0_iter4_reg;
        add_ln44_reg_1040_pp0_iter6_reg <= add_ln44_reg_1040_pp0_iter5_reg;
        add_ln44_reg_1040_pp0_iter7_reg <= add_ln44_reg_1040_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln32_reg_980_pp0_iter2_reg <= icmp_ln32_reg_980_pp0_iter1_reg;
        icmp_ln33_reg_984_pp0_iter2_reg <= icmp_ln33_reg_984_pp0_iter1_reg;
        input_load_4_reg_1052_pp0_iter5_reg <= input_load_4_reg_1052;
        input_load_5_reg_1059_pp0_iter5_reg <= input_load_5_reg_1059;
        input_load_5_reg_1059_pp0_iter6_reg <= input_load_5_reg_1059_pp0_iter5_reg;
        input_load_6_reg_1066_pp0_iter5_reg <= input_load_6_reg_1066;
        input_load_6_reg_1066_pp0_iter6_reg <= input_load_6_reg_1066_pp0_iter5_reg;
        input_load_6_reg_1066_pp0_iter7_reg <= input_load_6_reg_1066_pp0_iter6_reg;
        select_ln39_4_reg_1080 <= select_ln39_4_fu_738_p3;
        select_ln39_5_reg_1087 <= select_ln39_5_fu_827_p3;
        select_ln39_reg_1073 <= select_ln39_fu_648_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_980_pp0_iter1_reg == 1'd0))) begin
        and_ln33_reg_1003 <= and_ln33_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln32_reg_980 <= icmp_ln32_fu_222_p2;
        icmp_ln32_reg_980_pp0_iter1_reg <= icmp_ln32_reg_980;
        icmp_ln33_reg_984_pp0_iter1_reg <= icmp_ln33_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_222_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln33_reg_984 <= icmp_ln33_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_load_4_reg_1052 <= input_r_q2;
        input_load_5_reg_1059 <= input_r_q1;
        input_load_6_reg_1066 <= input_r_q0;
        input_load_reg_1045 <= input_r_q3;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_222_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_980_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_f_load = 3'd0;
    end else begin
        ap_sig_allocacmp_f_load = f_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten36_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten36_load = indvar_flatten36_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce2 = 1'b1;
    end else begin
        input_r_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_ce3 = 1'b1;
    end else begin
        input_r_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_2_fu_246_p2 = (ap_sig_allocacmp_f_load + 3'd1);

assign add_ln32_fu_228_p2 = (ap_sig_allocacmp_indvar_flatten36_load + 11'd1);

assign add_ln33_2_fu_268_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln33_fu_411_p2 = (select_ln33_fu_390_p3 + 4'd1);

assign add_ln34_fu_346_p2 = (select_ln33_8_fu_322_p3 + 4'd1);

assign add_ln38_2_fu_571_p2 = ($signed(zext_ln38_fu_506_p1) + $signed(sext_ln38_fu_567_p1));

assign add_ln38_fu_509_p2 = ($signed(zext_ln38_fu_506_p1) + $signed(p_cast8_fu_502_p1));

assign add_ln44_fu_596_p2 = ($signed(zext_ln44_fu_593_p1) + $signed(select_ln33_13_cast_fu_461_p1));

assign and_ln33_fu_311_p2 = (xor_ln33_fu_300_p2 & icmp_ln34_fu_305_p2);

assign and_ln39_10_fu_821_p2 = (grp_fu_421_p_dout0 & and_ln39_9_fu_815_p2);

assign and_ln39_11_fu_904_p2 = (or_ln39_12_fu_898_p2 & or_ln39_11_fu_880_p2);

assign and_ln39_12_fu_910_p2 = (grp_fu_425_p_dout0 & and_ln39_11_fu_904_p2);

assign and_ln39_7_fu_726_p2 = (or_ln39_8_fu_720_p2 & or_ln39_7_fu_702_p2);

assign and_ln39_8_fu_732_p2 = (grp_fu_417_p_dout0 & and_ln39_7_fu_726_p2);

assign and_ln39_9_fu_815_p2 = (or_ln39_9_fu_791_p2 & or_ln39_10_fu_809_p2);

assign and_ln39_fu_642_p2 = (or_ln39_fu_636_p2 & grp_fu_413_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln39_10_fu_762_p1 = select_ln39_4_reg_1080;

assign bitcast_ln39_11_fu_834_p1 = input_load_6_reg_1066_pp0_iter7_reg;

assign bitcast_ln39_12_fu_851_p1 = select_ln39_5_reg_1087;

assign bitcast_ln39_7_fu_656_p1 = input_load_4_reg_1052_pp0_iter5_reg;

assign bitcast_ln39_8_fu_673_p1 = select_ln39_reg_1073;

assign bitcast_ln39_9_fu_745_p1 = input_load_5_reg_1059_pp0_iter6_reg;

assign bitcast_ln39_fu_607_p1 = input_load_reg_1045;

assign empty_37_fu_496_p2 = (p_shl2_0_cast_fu_480_p1 - p_shl3_0_cast_fu_492_p1);

assign empty_39_fu_531_p2 = (select_ln33_9_fu_425_p3 | 5'd1);

assign empty_40_fu_561_p2 = (p_shl2_1_cast_fu_545_p1 - p_shl3_1_cast_fu_557_p1);

assign empty_fu_384_p2 = (p_shl_cast_fu_380_p1 - p_cast_fu_368_p1);

assign grp_fu_413_p_ce = 1'b1;

assign grp_fu_413_p_din0 = input_r_q3;

assign grp_fu_413_p_din1 = 32'd4286578687;

assign grp_fu_413_p_opcode = 5'd2;

assign grp_fu_417_p_ce = 1'b1;

assign grp_fu_417_p_din0 = input_load_4_reg_1052;

assign grp_fu_417_p_din1 = select_ln39_fu_648_p3;

assign grp_fu_417_p_opcode = 5'd2;

assign grp_fu_421_p_ce = 1'b1;

assign grp_fu_421_p_din0 = input_load_5_reg_1059_pp0_iter5_reg;

assign grp_fu_421_p_din1 = select_ln39_4_fu_738_p3;

assign grp_fu_421_p_opcode = 5'd2;

assign grp_fu_425_p_ce = 1'b1;

assign grp_fu_425_p_din0 = input_load_6_reg_1066_pp0_iter6_reg;

assign grp_fu_425_p_din1 = select_ln39_5_fu_827_p3;

assign grp_fu_425_p_opcode = 5'd2;

assign grp_fu_927_p0 = grp_fu_927_p00;

assign grp_fu_927_p00 = select_ln33_5_fu_252_p3;

assign grp_fu_927_p1 = 12'd784;

assign grp_fu_927_p2 = grp_fu_927_p20;

assign grp_fu_927_p20 = tmp_3_fu_334_p3;

assign grp_fu_936_p0 = grp_fu_936_p00;

assign grp_fu_936_p00 = select_ln33_5_fu_252_p3;

assign grp_fu_936_p1 = 10'd196;

assign grp_fu_936_p2 = grp_fu_936_p20;

assign grp_fu_936_p20 = select_ln33_8_fu_322_p3;

assign icmp_ln32_fu_222_p2 = ((ap_sig_allocacmp_indvar_flatten36_load == 11'd1176) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_240_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_305_p2 = ((j_fu_94 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln39_14_fu_630_p2 = ((trunc_ln39_fu_620_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_15_fu_690_p2 = ((tmp_13_fu_659_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_16_fu_696_p2 = ((trunc_ln39_7_fu_669_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_17_fu_708_p2 = ((tmp_14_fu_676_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_18_fu_714_p2 = ((trunc_ln39_8_fu_686_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_19_fu_779_p2 = ((tmp_16_fu_748_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_20_fu_785_p2 = ((trunc_ln39_9_fu_758_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_21_fu_797_p2 = ((tmp_17_fu_765_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_22_fu_803_p2 = ((trunc_ln39_10_fu_775_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_23_fu_868_p2 = ((tmp_19_fu_837_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_24_fu_874_p2 = ((trunc_ln39_11_fu_847_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_25_fu_886_p2 = ((tmp_20_fu_854_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_26_fu_892_p2 = ((trunc_ln39_12_fu_864_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_624_p2 = ((tmp_s_fu_610_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln38_9_fu_588_p1;

assign input_r_address1 = zext_ln38_8_fu_577_p1;

assign input_r_address2 = zext_ln38_7_fu_526_p1;

assign input_r_address3 = zext_ln38_6_fu_515_p1;

assign or_ln33_fu_317_p2 = (icmp_ln33_reg_984_pp0_iter1_reg | and_ln33_fu_311_p2);

assign or_ln38_2_fu_582_p2 = (13'd1 | add_ln38_2_fu_571_p2);

assign or_ln38_fu_520_p2 = (13'd1 | add_ln38_fu_509_p2);

assign or_ln39_10_fu_809_p2 = (icmp_ln39_22_fu_803_p2 | icmp_ln39_21_fu_797_p2);

assign or_ln39_11_fu_880_p2 = (icmp_ln39_24_fu_874_p2 | icmp_ln39_23_fu_868_p2);

assign or_ln39_12_fu_898_p2 = (icmp_ln39_26_fu_892_p2 | icmp_ln39_25_fu_886_p2);

assign or_ln39_7_fu_702_p2 = (icmp_ln39_16_fu_696_p2 | icmp_ln39_15_fu_690_p2);

assign or_ln39_8_fu_720_p2 = (icmp_ln39_18_fu_714_p2 | icmp_ln39_17_fu_708_p2);

assign or_ln39_9_fu_791_p2 = (icmp_ln39_20_fu_785_p2 | icmp_ln39_19_fu_779_p2);

assign or_ln39_fu_636_p2 = (icmp_ln39_fu_624_p2 | icmp_ln39_14_fu_630_p2);

assign output_r_address0 = zext_ln44_2_fu_923_p1;

assign output_r_d0 = ((and_ln39_12_fu_910_p2[0:0] == 1'b1) ? input_load_6_reg_1066_pp0_iter7_reg : select_ln39_5_reg_1087);

assign p_cast8_fu_502_p1 = $signed(empty_37_fu_496_p2);

assign p_cast_fu_368_p1 = tmp_fu_360_p3;

assign p_cast_mid1_fu_432_p1 = p_mid1_fu_417_p3;

assign p_mid13_fu_448_p2 = (p_shl_cast_mid1_fu_444_p1 - p_cast_mid1_fu_432_p1);

assign p_mid1_fu_417_p3 = {{add_ln33_fu_411_p2}, {1'd0}};

assign p_shl2_0_cast_fu_480_p1 = p_shl2_fu_472_p3;

assign p_shl2_1_cast_fu_545_p1 = p_shl2_1_fu_537_p3;

assign p_shl2_1_fu_537_p3 = {{empty_39_fu_531_p2}, {5'd0}};

assign p_shl2_fu_472_p3 = {{select_ln33_11_fu_465_p3}, {6'd0}};

assign p_shl3_0_cast_fu_492_p1 = p_shl3_fu_484_p3;

assign p_shl3_1_cast_fu_557_p1 = p_shl3_1_fu_549_p3;

assign p_shl3_1_fu_549_p3 = {{empty_39_fu_531_p2}, {2'd0}};

assign p_shl3_fu_484_p3 = {{select_ln33_11_fu_465_p3}, {3'd0}};

assign p_shl_cast_fu_380_p1 = p_shl_fu_372_p3;

assign p_shl_cast_mid1_fu_444_p1 = p_shl_mid1_fu_436_p3;

assign p_shl_fu_372_p3 = {{i_fu_98}, {4'd0}};

assign p_shl_mid1_fu_436_p3 = {{add_ln33_fu_411_p2}, {4'd0}};

assign select_ln33_10_fu_454_p3 = ((and_ln33_reg_1003[0:0] == 1'b1) ? p_mid13_fu_448_p2 : select_ln33_7_fu_404_p3);

assign select_ln33_11_fu_465_p3 = ((and_ln33_reg_1003[0:0] == 1'b1) ? add_ln33_fu_411_p2 : select_ln33_fu_390_p3);

assign select_ln33_12_fu_274_p3 = ((icmp_ln33_fu_240_p2[0:0] == 1'b1) ? 8'd1 : add_ln33_2_fu_268_p2);

assign select_ln33_13_cast_fu_461_p1 = $signed(select_ln33_10_fu_454_p3);

assign select_ln33_5_fu_252_p3 = ((icmp_ln33_fu_240_p2[0:0] == 1'b1) ? add_ln32_2_fu_246_p2 : ap_sig_allocacmp_f_load);

assign select_ln33_6_fu_397_p3 = ((icmp_ln33_reg_984_pp0_iter2_reg[0:0] == 1'b1) ? 5'd0 : tmp_fu_360_p3);

assign select_ln33_7_fu_404_p3 = ((icmp_ln33_reg_984_pp0_iter2_reg[0:0] == 1'b1) ? 9'd0 : empty_fu_384_p2);

assign select_ln33_8_fu_322_p3 = ((or_ln33_fu_317_p2[0:0] == 1'b1) ? 4'd0 : j_fu_94);

assign select_ln33_9_fu_425_p3 = ((and_ln33_reg_1003[0:0] == 1'b1) ? p_mid1_fu_417_p3 : select_ln33_6_fu_397_p3);

assign select_ln33_fu_390_p3 = ((icmp_ln33_reg_984_pp0_iter2_reg[0:0] == 1'b1) ? 4'd0 : i_fu_98);

assign select_ln39_4_fu_738_p3 = ((and_ln39_8_fu_732_p2[0:0] == 1'b1) ? input_load_4_reg_1052_pp0_iter5_reg : select_ln39_reg_1073);

assign select_ln39_5_fu_827_p3 = ((and_ln39_10_fu_821_p2[0:0] == 1'b1) ? input_load_5_reg_1059_pp0_iter6_reg : select_ln39_4_reg_1080);

assign select_ln39_fu_648_p3 = ((and_ln39_fu_642_p2[0:0] == 1'b1) ? input_load_reg_1045 : 32'd4286578687);

assign sext_ln38_fu_567_p1 = $signed(empty_40_fu_561_p2);

assign tmp_13_fu_659_p4 = {{bitcast_ln39_7_fu_656_p1[30:23]}};

assign tmp_14_fu_676_p4 = {{bitcast_ln39_8_fu_673_p1[30:23]}};

assign tmp_16_fu_748_p4 = {{bitcast_ln39_9_fu_745_p1[30:23]}};

assign tmp_17_fu_765_p4 = {{bitcast_ln39_10_fu_762_p1[30:23]}};

assign tmp_19_fu_837_p4 = {{bitcast_ln39_11_fu_834_p1[30:23]}};

assign tmp_20_fu_854_p4 = {{bitcast_ln39_12_fu_851_p1[30:23]}};

assign tmp_3_fu_334_p3 = {{select_ln33_8_fu_322_p3}, {1'd0}};

assign tmp_fu_360_p3 = {{i_fu_98}, {1'd0}};

assign tmp_s_fu_610_p4 = {{bitcast_ln39_fu_607_p1[30:23]}};

assign trunc_ln39_10_fu_775_p1 = bitcast_ln39_10_fu_762_p1[22:0];

assign trunc_ln39_11_fu_847_p1 = bitcast_ln39_11_fu_834_p1[22:0];

assign trunc_ln39_12_fu_864_p1 = bitcast_ln39_12_fu_851_p1[22:0];

assign trunc_ln39_7_fu_669_p1 = bitcast_ln39_7_fu_656_p1[22:0];

assign trunc_ln39_8_fu_686_p1 = bitcast_ln39_8_fu_673_p1[22:0];

assign trunc_ln39_9_fu_758_p1 = bitcast_ln39_9_fu_745_p1[22:0];

assign trunc_ln39_fu_620_p1 = bitcast_ln39_fu_607_p1[22:0];

assign xor_ln33_fu_300_p2 = (icmp_ln33_reg_984_pp0_iter1_reg ^ 1'd1);

assign zext_ln38_6_fu_515_p1 = add_ln38_fu_509_p2;

assign zext_ln38_7_fu_526_p1 = or_ln38_fu_520_p2;

assign zext_ln38_8_fu_577_p1 = add_ln38_2_fu_571_p2;

assign zext_ln38_9_fu_588_p1 = or_ln38_2_fu_582_p2;

assign zext_ln38_fu_506_p1 = grp_fu_927_p3;

assign zext_ln44_2_fu_923_p1 = add_ln44_reg_1040_pp0_iter7_reg;

assign zext_ln44_fu_593_p1 = grp_fu_936_p3;

endmodule //lenet_predict_maxpool2d
