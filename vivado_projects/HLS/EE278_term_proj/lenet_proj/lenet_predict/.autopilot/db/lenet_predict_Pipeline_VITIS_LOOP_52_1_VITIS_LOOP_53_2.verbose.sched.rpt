

================================================================
== Vitis HLS Report for 'lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2'
================================================================
* Date:           Fri Nov 22 20:00:41 2024

* Version:        2023.1 (Build 3854077 on May  4 2023)
* Project:        lenet_proj
* Solution:       lenet_predict (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu7ev-ffvf1517-3-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  5.816 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      202|      202|  2.020 us|  2.020 us|  202|  202|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |             Loop Name             |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_52_1_VITIS_LOOP_53_2  |      200|      200|         6|          1|          1|   196|       yes|
        +-----------------------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 6


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 1
  Pipeline-0 : II = 1, D = 6, States = { 1 2 3 4 5 6 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.66>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%j = alloca i32 1"   --->   Operation 9 'alloca' 'j' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 10 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%indvar_flatten = alloca i32 1"   --->   Operation 11 'alloca' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.40ns)   --->   "%store_ln0 = store i8 0, i8 %indvar_flatten"   --->   Operation 12 'store' 'store_ln0' <Predicate = true> <Delay = 0.40>
ST_1 : Operation 13 [1/1] (0.40ns)   --->   "%store_ln0 = store i4 0, i4 %i"   --->   Operation 13 'store' 'store_ln0' <Predicate = true> <Delay = 0.40>
ST_1 : Operation 14 [1/1] (0.40ns)   --->   "%store_ln0 = store i4 0, i4 %j"   --->   Operation 14 'store' 'store_ln0' <Predicate = true> <Delay = 0.40>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%br_ln0 = br void %VITIS_LOOP_57_4.i"   --->   Operation 15 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%i_2 = load i4 %i" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 16 'load' 'i_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%indvar_flatten_load = load i8 %indvar_flatten" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 17 'load' 'indvar_flatten_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%p_shl2 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i4.i4, i4 %i_2, i4 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 18 'bitconcatenate' 'p_shl2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%p_shl2_cast = zext i8 %p_shl2" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 19 'zext' 'p_shl2_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%p_shl3 = bitconcatenate i5 @_ssdm_op_BitConcatenate.i5.i4.i1, i4 %i_2, i1 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 20 'bitconcatenate' 'p_shl3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%p_shl3_cast = zext i5 %p_shl3" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 21 'zext' 'p_shl3_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.70ns)   --->   "%empty = sub i9 %p_shl2_cast, i9 %p_shl3_cast" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 22 'sub' 'empty' <Predicate = true> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%p_shl = bitconcatenate i10 @_ssdm_op_BitConcatenate.i10.i4.i6, i4 %i_2, i6 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 23 'bitconcatenate' 'p_shl' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%p_shl_cast = zext i10 %p_shl" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 24 'zext' 'p_shl_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%p_shl1 = bitconcatenate i7 @_ssdm_op_BitConcatenate.i7.i4.i3, i4 %i_2, i3 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 25 'bitconcatenate' 'p_shl1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%p_shl1_cast = zext i7 %p_shl1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 26 'zext' 'p_shl1_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.73ns)   --->   "%empty_28 = sub i11 %p_shl_cast, i11 %p_shl1_cast" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 27 'sub' 'empty_28' <Predicate = true> <Delay = 0.73> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 28 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.70ns)   --->   "%icmp_ln52 = icmp_eq  i8 %indvar_flatten_load, i8 196" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 29 'icmp' 'icmp_ln52' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.70ns)   --->   "%add_ln52_1 = add i8 %indvar_flatten_load, i8 1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 30 'add' 'add_ln52_1' <Predicate = true> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%br_ln52 = br i1 %icmp_ln52, void %for.inc28.i, void %_Z9maxpool2dPfS_ii.exit.exitStub" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 31 'br' 'br_ln52' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%j_load = load i4 %j" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 32 'load' 'j_load' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.72ns)   --->   "%icmp_ln53 = icmp_eq  i4 %j_load, i4 14" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 33 'icmp' 'icmp_ln53' <Predicate = (!icmp_ln52)> <Delay = 0.72> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.18ns)   --->   "%select_ln52_1 = select i1 %icmp_ln53, i4 0, i4 %j_load" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 34 'select' 'select_ln52_1' <Predicate = (!icmp_ln52)> <Delay = 0.18> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.18> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.72ns)   --->   "%add_ln52 = add i4 %i_2, i4 1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 35 'add' 'add_ln52' <Predicate = (!icmp_ln52)> <Delay = 0.72> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%p_shl2_mid1 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i4.i4, i4 %add_ln52, i4 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 36 'bitconcatenate' 'p_shl2_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%p_shl2_cast_mid1 = zext i8 %p_shl2_mid1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 37 'zext' 'p_shl2_cast_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%p_shl3_mid1 = bitconcatenate i5 @_ssdm_op_BitConcatenate.i5.i4.i1, i4 %add_ln52, i1 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 38 'bitconcatenate' 'p_shl3_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%p_shl3_cast_mid1 = zext i5 %p_shl3_mid1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 39 'zext' 'p_shl3_cast_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.70ns)   --->   "%p_mid1 = sub i9 %p_shl2_cast_mid1, i9 %p_shl3_cast_mid1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 40 'sub' 'p_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.00ns) (grouped into LUT with out node add_ln62)   --->   "%select_ln52_2 = select i1 %icmp_ln53, i9 %p_mid1, i9 %empty" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 41 'select' 'select_ln52_2' <Predicate = (!icmp_ln52)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.36> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%p_shl_mid1 = bitconcatenate i10 @_ssdm_op_BitConcatenate.i10.i4.i6, i4 %add_ln52, i6 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 42 'bitconcatenate' 'p_shl_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%p_shl_cast_mid1 = zext i10 %p_shl_mid1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 43 'zext' 'p_shl_cast_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%p_shl1_mid1 = bitconcatenate i7 @_ssdm_op_BitConcatenate.i7.i4.i3, i4 %add_ln52, i3 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 44 'bitconcatenate' 'p_shl1_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%p_shl1_cast_mid1 = zext i7 %p_shl1_mid1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 45 'zext' 'p_shl1_cast_mid1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.73ns)   --->   "%p_mid13 = sub i11 %p_shl_cast_mid1, i11 %p_shl1_cast_mid1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 46 'sub' 'p_mid13' <Predicate = (!icmp_ln52)> <Delay = 0.73> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.35ns)   --->   "%select_ln52_3 = select i1 %icmp_ln53, i11 %p_mid13, i11 %empty_28" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 47 'select' 'select_ln52_3' <Predicate = (!icmp_ln52)> <Delay = 0.35> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.35> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 48 [1/1] (0.18ns)   --->   "%select_ln52 = select i1 %icmp_ln53, i4 %add_ln52, i4 %i_2" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 48 'select' 'select_ln52' <Predicate = (!icmp_ln52)> <Delay = 0.18> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.18> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node add_ln62)   --->   "%j_cast9 = zext i4 %select_ln52_1" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 49 'zext' 'j_cast9' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%tmp_12 = bitconcatenate i5 @_ssdm_op_BitConcatenate.i5.i4.i1, i4 %select_ln52_1, i1 0" [lenet_support.cpp:52->lenet_main.cpp:40]   --->   Operation 50 'bitconcatenate' 'tmp_12' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%zext_ln58 = zext i5 %tmp_12" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 51 'zext' 'zext_ln58' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%zext_ln58_1 = zext i5 %tmp_12" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 52 'zext' 'zext_ln58_1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.75ns)   --->   "%add_ln58 = add i11 %zext_ln58_1, i11 %select_ln52_3" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 53 'add' 'add_ln58' <Predicate = (!icmp_ln52)> <Delay = 0.75> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%sext_ln58 = sext i11 %add_ln58" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 54 'sext' 'sext_ln58' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%conv1_output_addr = getelementptr i32 %conv1_output, i64 0, i64 %sext_ln58" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 55 'getelementptr' 'conv1_output_addr' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 56 [2/2] (1.09ns)   --->   "%conv1_output_load = load i13 %conv1_output_addr" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 56 'load' 'conv1_output_load' <Predicate = (!icmp_ln52)> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%or_ln58 = or i11 %add_ln58, i11 1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 57 'or' 'or_ln58' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%sext_ln58_1 = sext i11 %or_ln58" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 58 'sext' 'sext_ln58_1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%conv1_output_addr_1 = getelementptr i32 %conv1_output, i64 0, i64 %sext_ln58_1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 59 'getelementptr' 'conv1_output_addr_1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 60 [2/2] (1.09ns)   --->   "%conv1_output_load_1 = load i13 %conv1_output_addr_1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 60 'load' 'conv1_output_load_1' <Predicate = (!icmp_ln52)> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_1 : Operation 61 [1/1] (0.71ns)   --->   "%add_ln58_3 = add i6 %zext_ln58, i6 28" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 61 'add' 'add_ln58_3' <Predicate = (!icmp_ln52)> <Delay = 0.71> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%zext_ln58_2 = zext i6 %add_ln58_3" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 62 'zext' 'zext_ln58_2' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.75ns)   --->   "%add_ln58_1 = add i11 %zext_ln58_2, i11 %select_ln52_3" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 63 'add' 'add_ln58_1' <Predicate = (!icmp_ln52)> <Delay = 0.75> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%sext_ln58_2 = sext i11 %add_ln58_1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 64 'sext' 'sext_ln58_2' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.00ns)   --->   "%conv1_output_addr_2 = getelementptr i32 %conv1_output, i64 0, i64 %sext_ln58_2" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 65 'getelementptr' 'conv1_output_addr_2' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 66 [2/2] (1.09ns)   --->   "%conv1_output_load_2 = load i13 %conv1_output_addr_2" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 66 'load' 'conv1_output_load_2' <Predicate = (!icmp_ln52)> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%or_ln58_1 = or i11 %add_ln58_1, i11 1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 67 'or' 'or_ln58_1' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 68 [1/1] (0.00ns)   --->   "%sext_ln58_3 = sext i11 %or_ln58_1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 68 'sext' 'sext_ln58_3' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 69 [1/1] (0.00ns)   --->   "%conv1_output_addr_3 = getelementptr i32 %conv1_output, i64 0, i64 %sext_ln58_3" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 69 'getelementptr' 'conv1_output_addr_3' <Predicate = (!icmp_ln52)> <Delay = 0.00>
ST_1 : Operation 70 [2/2] (1.09ns)   --->   "%conv1_output_load_3 = load i13 %conv1_output_addr_3" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 70 'load' 'conv1_output_load_3' <Predicate = (!icmp_ln52)> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_1 : Operation 71 [1/1] (0.71ns) (out node of the LUT)   --->   "%add_ln62 = add i9 %j_cast9, i9 %select_ln52_2" [lenet_support.cpp:62->lenet_main.cpp:40]   --->   Operation 71 'add' 'add_ln62' <Predicate = (!icmp_ln52)> <Delay = 0.71> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.71> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 72 [1/1] (0.72ns)   --->   "%add_ln53 = add i4 %select_ln52_1, i4 1" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 72 'add' 'add_ln53' <Predicate = (!icmp_ln52)> <Delay = 0.72> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 73 [1/1] (0.40ns)   --->   "%store_ln53 = store i8 %add_ln52_1, i8 %indvar_flatten" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 73 'store' 'store_ln53' <Predicate = (!icmp_ln52)> <Delay = 0.40>
ST_1 : Operation 74 [1/1] (0.40ns)   --->   "%store_ln53 = store i4 %select_ln52, i4 %i" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 74 'store' 'store_ln53' <Predicate = (!icmp_ln52)> <Delay = 0.40>
ST_1 : Operation 75 [1/1] (0.40ns)   --->   "%store_ln53 = store i4 %add_ln53, i4 %j" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 75 'store' 'store_ln53' <Predicate = (!icmp_ln52)> <Delay = 0.40>

State 2 <SV = 1> <Delay = 3.67>
ST_2 : Operation 76 [1/2] (1.09ns)   --->   "%conv1_output_load = load i13 %conv1_output_addr" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 76 'load' 'conv1_output_load' <Predicate = true> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 77 '%tmp_2 = fcmp_ogt  i32 %conv1_output_load, i32 -inf'
ST_2 : Operation 77 [2/2] (1.85ns)   --->   "%tmp_2 = fcmp_ogt  i32 %conv1_output_load, i32 -inf" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 77 'fcmp' 'tmp_2' <Predicate = true> <Delay = 1.85> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 78 [1/2] (1.09ns)   --->   "%conv1_output_load_1 = load i13 %conv1_output_addr_1" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 78 'load' 'conv1_output_load_1' <Predicate = true> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_2 : Operation 79 [1/2] (1.09ns)   --->   "%conv1_output_load_2 = load i13 %conv1_output_addr_2" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 79 'load' 'conv1_output_load_2' <Predicate = true> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>
ST_2 : Operation 80 [1/2] (1.09ns)   --->   "%conv1_output_load_3 = load i13 %conv1_output_addr_3" [lenet_support.cpp:58->lenet_main.cpp:40]   --->   Operation 80 'load' 'conv1_output_load_3' <Predicate = true> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 4704> <RAM>

State 3 <SV = 2> <Delay = 5.56>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "%bitcast_ln59 = bitcast i32 %conv1_output_load" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 81 'bitcast' 'bitcast_ln59' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "%tmp_1 = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 82 'partselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "%trunc_ln59 = trunc i32 %bitcast_ln59" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 83 'trunc' 'trunc_ln59' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.70ns)   --->   "%icmp_ln59 = icmp_ne  i8 %tmp_1, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 84 'icmp' 'icmp_ln59' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 85 [1/1] (0.88ns)   --->   "%icmp_ln59_1 = icmp_eq  i23 %trunc_ln59, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 85 'icmp' 'icmp_ln59_1' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node select_ln59)   --->   "%or_ln59 = or i1 %icmp_ln59_1, i1 %icmp_ln59" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 86 'or' 'or_ln59' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 87 [1/2] (2.57ns)   --->   "%tmp_2 = fcmp_ogt  i32 %conv1_output_load, i32 -inf" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 87 'fcmp' 'tmp_2' <Predicate = true> <Delay = 2.57> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node select_ln59)   --->   "%and_ln59 = and i1 %or_ln59, i1 %tmp_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 88 'and' 'and_ln59' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 89 [1/1] (0.41ns) (out node of the LUT)   --->   "%select_ln59 = select i1 %and_ln59, i32 %conv1_output_load, i32 -inf" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 89 'select' 'select_ln59' <Predicate = true> <Delay = 0.41> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.41> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : [1/1] (0.71ns)   --->   Input mux for Operation 90 '%tmp_5 = fcmp_ogt  i32 %conv1_output_load_1, i32 %select_ln59'
ST_3 : Operation 90 [2/2] (1.85ns)   --->   "%tmp_5 = fcmp_ogt  i32 %conv1_output_load_1, i32 %select_ln59" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 90 'fcmp' 'tmp_5' <Predicate = true> <Delay = 1.85> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 5.81>
ST_4 : Operation 91 [1/1] (0.00ns)   --->   "%bitcast_ln59_1 = bitcast i32 %conv1_output_load_1" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 91 'bitcast' 'bitcast_ln59_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 92 [1/1] (0.00ns)   --->   "%tmp_3 = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59_1, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 92 'partselect' 'tmp_3' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 93 [1/1] (0.00ns)   --->   "%trunc_ln59_7 = trunc i32 %bitcast_ln59_1" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 93 'trunc' 'trunc_ln59_7' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 94 [1/1] (0.00ns)   --->   "%bitcast_ln59_2 = bitcast i32 %select_ln59" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 94 'bitcast' 'bitcast_ln59_2' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 95 [1/1] (0.00ns)   --->   "%tmp_4 = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59_2, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 95 'partselect' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 96 [1/1] (0.00ns)   --->   "%trunc_ln59_8 = trunc i32 %bitcast_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 96 'trunc' 'trunc_ln59_8' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 97 [1/1] (0.70ns)   --->   "%icmp_ln59_2 = icmp_ne  i8 %tmp_3, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 97 'icmp' 'icmp_ln59_2' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 98 [1/1] (0.88ns)   --->   "%icmp_ln59_3 = icmp_eq  i23 %trunc_ln59_7, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 98 'icmp' 'icmp_ln59_3' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 99 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_2)   --->   "%or_ln59_1 = or i1 %icmp_ln59_3, i1 %icmp_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 99 'or' 'or_ln59_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 100 [1/1] (0.70ns)   --->   "%icmp_ln59_4 = icmp_ne  i8 %tmp_4, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 100 'icmp' 'icmp_ln59_4' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 101 [1/1] (0.88ns)   --->   "%icmp_ln59_5 = icmp_eq  i23 %trunc_ln59_8, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 101 'icmp' 'icmp_ln59_5' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 102 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_2)   --->   "%or_ln59_2 = or i1 %icmp_ln59_5, i1 %icmp_ln59_4" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 102 'or' 'or_ln59_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 103 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_2)   --->   "%and_ln59_1 = and i1 %or_ln59_1, i1 %or_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 103 'and' 'and_ln59_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 104 [1/2] (2.57ns)   --->   "%tmp_5 = fcmp_ogt  i32 %conv1_output_load_1, i32 %select_ln59" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 104 'fcmp' 'tmp_5' <Predicate = true> <Delay = 2.57> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 105 [1/1] (0.25ns) (out node of the LUT)   --->   "%and_ln59_2 = and i1 %and_ln59_1, i1 %tmp_5" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 105 'and' 'and_ln59_2' <Predicate = true> <Delay = 0.25> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 106 [1/1] (0.41ns) (out node of the LUT)   --->   "%select_ln59_1 = select i1 %and_ln59_2, i32 %conv1_output_load_1, i32 %select_ln59" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 106 'select' 'select_ln59_1' <Predicate = true> <Delay = 0.41> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.41> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : [1/1] (0.71ns)   --->   Input mux for Operation 107 '%tmp_8 = fcmp_ogt  i32 %conv1_output_load_2, i32 %select_ln59_1'
ST_4 : Operation 107 [2/2] (1.85ns)   --->   "%tmp_8 = fcmp_ogt  i32 %conv1_output_load_2, i32 %select_ln59_1" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 107 'fcmp' 'tmp_8' <Predicate = true> <Delay = 1.85> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 5.81>
ST_5 : Operation 108 [1/1] (0.00ns)   --->   "%bitcast_ln59_3 = bitcast i32 %conv1_output_load_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 108 'bitcast' 'bitcast_ln59_3' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 109 [1/1] (0.00ns)   --->   "%tmp_6 = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59_3, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 109 'partselect' 'tmp_6' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 110 [1/1] (0.00ns)   --->   "%trunc_ln59_9 = trunc i32 %bitcast_ln59_3" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 110 'trunc' 'trunc_ln59_9' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 111 [1/1] (0.00ns)   --->   "%bitcast_ln59_4 = bitcast i32 %select_ln59_1" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 111 'bitcast' 'bitcast_ln59_4' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 112 [1/1] (0.00ns)   --->   "%tmp_7 = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59_4, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 112 'partselect' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 113 [1/1] (0.00ns)   --->   "%trunc_ln59_10 = trunc i32 %bitcast_ln59_4" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 113 'trunc' 'trunc_ln59_10' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 114 [1/1] (0.70ns)   --->   "%icmp_ln59_6 = icmp_ne  i8 %tmp_6, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 114 'icmp' 'icmp_ln59_6' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 115 [1/1] (0.88ns)   --->   "%icmp_ln59_7 = icmp_eq  i23 %trunc_ln59_9, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 115 'icmp' 'icmp_ln59_7' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 116 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_4)   --->   "%or_ln59_3 = or i1 %icmp_ln59_7, i1 %icmp_ln59_6" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 116 'or' 'or_ln59_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 117 [1/1] (0.70ns)   --->   "%icmp_ln59_8 = icmp_ne  i8 %tmp_7, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 117 'icmp' 'icmp_ln59_8' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 118 [1/1] (0.88ns)   --->   "%icmp_ln59_9 = icmp_eq  i23 %trunc_ln59_10, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 118 'icmp' 'icmp_ln59_9' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 119 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_4)   --->   "%or_ln59_4 = or i1 %icmp_ln59_9, i1 %icmp_ln59_8" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 119 'or' 'or_ln59_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_4)   --->   "%and_ln59_3 = and i1 %or_ln59_3, i1 %or_ln59_4" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 120 'and' 'and_ln59_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 121 [1/2] (2.57ns)   --->   "%tmp_8 = fcmp_ogt  i32 %conv1_output_load_2, i32 %select_ln59_1" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 121 'fcmp' 'tmp_8' <Predicate = true> <Delay = 2.57> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 122 [1/1] (0.25ns) (out node of the LUT)   --->   "%and_ln59_4 = and i1 %and_ln59_3, i1 %tmp_8" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 122 'and' 'and_ln59_4' <Predicate = true> <Delay = 0.25> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 123 [1/1] (0.41ns) (out node of the LUT)   --->   "%select_ln59_2 = select i1 %and_ln59_4, i32 %conv1_output_load_2, i32 %select_ln59_1" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 123 'select' 'select_ln59_2' <Predicate = true> <Delay = 0.41> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.41> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : [1/1] (0.71ns)   --->   Input mux for Operation 124 '%tmp_10 = fcmp_ogt  i32 %conv1_output_load_3, i32 %select_ln59_2'
ST_5 : Operation 124 [2/2] (1.85ns)   --->   "%tmp_10 = fcmp_ogt  i32 %conv1_output_load_3, i32 %select_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 124 'fcmp' 'tmp_10' <Predicate = true> <Delay = 1.85> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 149 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 149 'ret' 'ret_ln0' <Predicate = (icmp_ln52)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 4.34>
ST_6 : Operation 125 [1/1] (0.00ns)   --->   "%specloopname_ln0 = specloopname void @_ssdm_op_SpecLoopName, void @VITIS_LOOP_52_1_VITIS_LOOP_53_2_str"   --->   Operation 125 'specloopname' 'specloopname_ln0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 126 [1/1] (0.00ns)   --->   "%speclooptripcount_ln0 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 196, i64 196, i64 196"   --->   Operation 126 'speclooptripcount' 'speclooptripcount_ln0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 127 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 127 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 128 [1/1] (0.00ns)   --->   "%specloopname_ln53 = specloopname void @_ssdm_op_SpecLoopName, void @empty_14" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 128 'specloopname' 'specloopname_ln53' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 129 [1/1] (0.00ns)   --->   "%bitcast_ln59_5 = bitcast i32 %conv1_output_load_3" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 129 'bitcast' 'bitcast_ln59_5' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 130 [1/1] (0.00ns)   --->   "%tmp_9 = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59_5, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 130 'partselect' 'tmp_9' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 131 [1/1] (0.00ns)   --->   "%trunc_ln59_11 = trunc i32 %bitcast_ln59_5" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 131 'trunc' 'trunc_ln59_11' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 132 [1/1] (0.00ns)   --->   "%bitcast_ln59_6 = bitcast i32 %select_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 132 'bitcast' 'bitcast_ln59_6' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 133 [1/1] (0.00ns)   --->   "%tmp_s = partselect i8 @_ssdm_op_PartSelect.i8.i32.i32.i32, i32 %bitcast_ln59_6, i32 23, i32 30" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 133 'partselect' 'tmp_s' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 134 [1/1] (0.00ns)   --->   "%trunc_ln59_12 = trunc i32 %bitcast_ln59_6" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 134 'trunc' 'trunc_ln59_12' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 135 [1/1] (0.70ns)   --->   "%icmp_ln59_10 = icmp_ne  i8 %tmp_9, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 135 'icmp' 'icmp_ln59_10' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 136 [1/1] (0.88ns)   --->   "%icmp_ln59_11 = icmp_eq  i23 %trunc_ln59_11, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 136 'icmp' 'icmp_ln59_11' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 137 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_6)   --->   "%or_ln59_5 = or i1 %icmp_ln59_11, i1 %icmp_ln59_10" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 137 'or' 'or_ln59_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 138 [1/1] (0.70ns)   --->   "%icmp_ln59_12 = icmp_ne  i8 %tmp_s, i8 255" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 138 'icmp' 'icmp_ln59_12' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 139 [1/1] (0.88ns)   --->   "%icmp_ln59_13 = icmp_eq  i23 %trunc_ln59_12, i23 0" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 139 'icmp' 'icmp_ln59_13' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 140 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_6)   --->   "%or_ln59_6 = or i1 %icmp_ln59_13, i1 %icmp_ln59_12" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 140 'or' 'or_ln59_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 141 [1/1] (0.00ns) (grouped into LUT with out node and_ln59_6)   --->   "%and_ln59_5 = and i1 %or_ln59_5, i1 %or_ln59_6" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 141 'and' 'and_ln59_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 142 [1/2] (2.57ns)   --->   "%tmp_10 = fcmp_ogt  i32 %conv1_output_load_3, i32 %select_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 142 'fcmp' 'tmp_10' <Predicate = true> <Delay = 2.57> <CoreInst = "FCompare">   --->   Core 19 'FCompare' <Latency = 1> <II = 1> <Delay = 2.57> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 143 [1/1] (0.25ns) (out node of the LUT)   --->   "%and_ln59_6 = and i1 %and_ln59_5, i1 %tmp_10" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 143 'and' 'and_ln59_6' <Predicate = true> <Delay = 0.25> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.25> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 144 [1/1] (0.41ns) (out node of the LUT)   --->   "%select_ln59_3 = select i1 %and_ln59_6, i32 %conv1_output_load_3, i32 %select_ln59_2" [lenet_support.cpp:59->lenet_main.cpp:40]   --->   Operation 144 'select' 'select_ln59_3' <Predicate = true> <Delay = 0.41> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.41> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 145 [1/1] (0.00ns)   --->   "%sext_ln62 = sext i9 %add_ln62" [lenet_support.cpp:62->lenet_main.cpp:40]   --->   Operation 145 'sext' 'sext_ln62' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 146 [1/1] (0.00ns)   --->   "%pool1_output_addr = getelementptr i32 %pool1_output, i64 0, i64 %sext_ln62" [lenet_support.cpp:62->lenet_main.cpp:40]   --->   Operation 146 'getelementptr' 'pool1_output_addr' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 147 [1/1] (1.09ns)   --->   "%store_ln62 = store i32 %select_ln59_3, i11 %pool1_output_addr" [lenet_support.cpp:62->lenet_main.cpp:40]   --->   Operation 147 'store' 'store_ln62' <Predicate = true> <Delay = 1.09> <CoreInst = "RAM_1WnR">   --->   Core 84 'RAM_1WnR' <Latency = 1> <II = 1> <Delay = 1.09> <Storage> <Opcode : 'load' 'store'> <Ports = 17> <Width = 32> <Depth = 1176> <RAM>
ST_6 : Operation 148 [1/1] (0.00ns)   --->   "%br_ln53 = br void %VITIS_LOOP_57_4.i" [lenet_support.cpp:53->lenet_main.cpp:40]   --->   Operation 148 'br' 'br_ln53' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 3.663ns
The critical path consists of the following:
	'alloca' operation ('i') [4]  (0.000 ns)
	'load' operation ('i', lenet_support.cpp:52->lenet_main.cpp:40) on local variable 'i' [11]  (0.000 ns)
	'add' operation ('add_ln52', lenet_support.cpp:52->lenet_main.cpp:40) [33]  (0.723 ns)
	'sub' operation ('p_mid13', lenet_support.cpp:52->lenet_main.cpp:40) [44]  (0.736 ns)
	'select' operation ('select_ln52_3', lenet_support.cpp:52->lenet_main.cpp:40) [45]  (0.352 ns)
	'add' operation ('add_ln58', lenet_support.cpp:58->lenet_main.cpp:40) [53]  (0.753 ns)
	'getelementptr' operation ('conv1_output_addr', lenet_support.cpp:58->lenet_main.cpp:40) [55]  (0.000 ns)
	'load' operation ('conv1_output_load', lenet_support.cpp:58->lenet_main.cpp:40) on array 'conv1_output' [56]  (1.099 ns)

 <State 2>: 3.673ns
The critical path consists of the following:
	'load' operation ('conv1_output_load', lenet_support.cpp:58->lenet_main.cpp:40) on array 'conv1_output' [56]  (1.099 ns)
	multiplexor before operation 'fcmp' with delay (0.715 ns)
'fcmp' operation ('tmp_2', lenet_support.cpp:59->lenet_main.cpp:40) [63]  (1.859 ns)

 <State 3>: 5.560ns
The critical path consists of the following:
	'fcmp' operation ('tmp_2', lenet_support.cpp:59->lenet_main.cpp:40) [63]  (2.574 ns)
	'and' operation ('and_ln59', lenet_support.cpp:59->lenet_main.cpp:40) [64]  (0.000 ns)
	'select' operation ('select_ln59', lenet_support.cpp:59->lenet_main.cpp:40) [65]  (0.412 ns)
	multiplexor before operation 'fcmp' with delay (0.715 ns)
'fcmp' operation ('tmp_5', lenet_support.cpp:59->lenet_main.cpp:40) [83]  (1.859 ns)

 <State 4>: 5.816ns
The critical path consists of the following:
	'fcmp' operation ('tmp_5', lenet_support.cpp:59->lenet_main.cpp:40) [83]  (2.574 ns)
	'and' operation ('and_ln59_2', lenet_support.cpp:59->lenet_main.cpp:40) [84]  (0.256 ns)
	'select' operation ('select_ln59_1', lenet_support.cpp:59->lenet_main.cpp:40) [85]  (0.412 ns)
	multiplexor before operation 'fcmp' with delay (0.715 ns)
'fcmp' operation ('tmp_8', lenet_support.cpp:59->lenet_main.cpp:40) [105]  (1.859 ns)

 <State 5>: 5.816ns
The critical path consists of the following:
	'fcmp' operation ('tmp_8', lenet_support.cpp:59->lenet_main.cpp:40) [105]  (2.574 ns)
	'and' operation ('and_ln59_4', lenet_support.cpp:59->lenet_main.cpp:40) [106]  (0.256 ns)
	'select' operation ('select_ln59_2', lenet_support.cpp:59->lenet_main.cpp:40) [107]  (0.412 ns)
	multiplexor before operation 'fcmp' with delay (0.715 ns)
'fcmp' operation ('tmp_10', lenet_support.cpp:59->lenet_main.cpp:40) [125]  (1.859 ns)

 <State 6>: 4.341ns
The critical path consists of the following:
	'fcmp' operation ('tmp_10', lenet_support.cpp:59->lenet_main.cpp:40) [125]  (2.574 ns)
	'and' operation ('and_ln59_6', lenet_support.cpp:59->lenet_main.cpp:40) [126]  (0.256 ns)
	'select' operation ('select_ln59_3', lenet_support.cpp:59->lenet_main.cpp:40) [127]  (0.412 ns)
	'store' operation ('store_ln62', lenet_support.cpp:62->lenet_main.cpp:40) of variable 'select_ln59_3', lenet_support.cpp:59->lenet_main.cpp:40 on array 'pool1_output' [131]  (1.099 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
