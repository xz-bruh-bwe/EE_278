// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_58_1_VITIS_LOOP_59_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_output_address0,
        conv2_output_ce0,
        conv2_output_q0,
        pool2_output_address0,
        pool2_output_ce0,
        pool2_output_we0,
        pool2_output_d0,
        grp_fu_423_p_din0,
        grp_fu_423_p_din1,
        grp_fu_423_p_opcode,
        grp_fu_423_p_dout0,
        grp_fu_423_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv2_output_address0;
output   conv2_output_ce0;
input  [31:0] conv2_output_q0;
output  [8:0] pool2_output_address0;
output   pool2_output_ce0;
output   pool2_output_we0;
output  [31:0] pool2_output_d0;
output  [31:0] grp_fu_423_p_din0;
output  [31:0] grp_fu_423_p_din1;
output  [4:0] grp_fu_423_p_opcode;
input  [0:0] grp_fu_423_p_dout0;
output   grp_fu_423_p_ce;

reg ap_idle;
reg conv2_output_ce0;
reg pool2_output_ce0;
reg pool2_output_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln64_1_fu_202_p1;
reg   [63:0] zext_ln64_1_reg_302;
reg   [63:0] zext_ln64_1_reg_302_pp0_iter1_reg;
reg   [31:0] value_reg_312;
wire    ap_block_pp0_stage0;
reg   [3:0] j_1_fu_58;
wire   [3:0] add_ln59_fu_207_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_1_load;
reg   [3:0] i_fu_62;
wire   [3:0] select_ln58_1_fu_158_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten6_fu_66;
wire   [6:0] add_ln58_fu_126_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [0:0] icmp_ln59_fu_138_p2;
wire   [3:0] add_ln58_1_fu_152_p2;
wire   [3:0] select_ln58_fu_144_p3;
wire   [4:0] p_shl3_mid2_fu_174_p3;
wire   [4:0] j_1_cast_fu_182_p1;
wire   [4:0] add_ln64_fu_186_p2;
wire   [6:0] zext_ln64_fu_192_p1;
wire   [6:0] p_shl2_mid2_fu_166_p3;
wire   [6:0] add_ln64_1_fu_196_p2;
wire   [31:0] bitcast_ln65_fu_228_p1;
wire   [7:0] tmp_3_fu_231_p4;
wire   [22:0] trunc_ln65_fu_241_p1;
wire   [0:0] icmp_ln65_1_fu_251_p2;
wire   [0:0] icmp_ln65_fu_245_p2;
wire   [0:0] or_ln65_fu_257_p2;
wire   [0:0] and_ln65_fu_263_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet_predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_62 <= select_ln58_1_fu_158_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_66 <= add_ln58_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_66 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_1_fu_58 <= add_ln59_fu_207_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_58 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        value_reg_312 <= conv2_output_q0;
        zext_ln64_1_reg_302_pp0_iter1_reg[6 : 0] <= zext_ln64_1_reg_302[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_120_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln64_1_reg_302[6 : 0] <= zext_ln64_1_fu_202_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_output_ce0 = 1'b1;
    end else begin
        conv2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool2_output_ce0 = 1'b1;
    end else begin
        pool2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool2_output_we0 = 1'b1;
    end else begin
        pool2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_152_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln58_fu_126_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 7'd1);

assign add_ln59_fu_207_p2 = (select_ln58_fu_144_p3 + 4'd1);

assign add_ln64_1_fu_196_p2 = (zext_ln64_fu_192_p1 + p_shl2_mid2_fu_166_p3);

assign add_ln64_fu_186_p2 = (p_shl3_mid2_fu_174_p3 + j_1_cast_fu_182_p1);

assign and_ln65_fu_263_p2 = (or_ln65_fu_257_p2 & grp_fu_423_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln65_fu_228_p1 = value_reg_312;

assign conv2_output_address0 = zext_ln64_1_fu_202_p1;

assign grp_fu_423_p_ce = 1'b1;

assign grp_fu_423_p_din0 = conv2_output_q0;

assign grp_fu_423_p_din1 = 32'd4286578688;

assign grp_fu_423_p_opcode = 5'd2;

assign icmp_ln58_fu_120_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_138_p2 = ((ap_sig_allocacmp_j_1_load == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_251_p2 = ((trunc_ln65_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_245_p2 = ((tmp_3_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_1_cast_fu_182_p1 = select_ln58_fu_144_p3;

assign or_ln65_fu_257_p2 = (icmp_ln65_fu_245_p2 | icmp_ln65_1_fu_251_p2);

assign p_shl2_mid2_fu_166_p3 = {{select_ln58_1_fu_158_p3}, {3'd0}};

assign p_shl3_mid2_fu_174_p3 = {{select_ln58_1_fu_158_p3}, {1'd0}};

assign pool2_output_address0 = zext_ln64_1_reg_302_pp0_iter1_reg;

assign pool2_output_d0 = ((and_ln65_fu_263_p2[0:0] == 1'b1) ? value_reg_312 : 32'd4286578688);

assign select_ln58_1_fu_158_p3 = ((icmp_ln59_fu_138_p2[0:0] == 1'b1) ? add_ln58_1_fu_152_p2 : ap_sig_allocacmp_i_load);

assign select_ln58_fu_144_p3 = ((icmp_ln59_fu_138_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_1_load);

assign tmp_3_fu_231_p4 = {{bitcast_ln65_fu_228_p1[30:23]}};

assign trunc_ln65_fu_241_p1 = bitcast_ln65_fu_228_p1[22:0];

assign zext_ln64_1_fu_202_p1 = add_ln64_1_fu_196_p2;

assign zext_ln64_fu_192_p1 = add_ln64_fu_186_p2;

always @ (posedge ap_clk) begin
    zext_ln64_1_reg_302[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln64_1_reg_302_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_58_1_VITIS_LOOP_59_21
