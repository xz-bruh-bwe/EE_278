-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1_output_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_output_ce0 : OUT STD_LOGIC;
    conv1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_output_ce1 : OUT STD_LOGIC;
    conv1_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_address2 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_output_ce2 : OUT STD_LOGIC;
    conv1_output_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_address3 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv1_output_ce3 : OUT STD_LOGIC;
    conv1_output_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    pool1_output_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pool1_output_ce0 : OUT STD_LOGIC;
    pool1_output_we0 : OUT STD_LOGIC;
    pool1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_308_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_308_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_308_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_308_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_308_p_ce : OUT STD_LOGIC;
    grp_fu_702_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_702_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_702_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_702_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_702_p_ce : OUT STD_LOGIC;
    grp_fu_706_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_706_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_706_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_706_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_706_p_ce : OUT STD_LOGIC;
    grp_fu_710_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_710_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_710_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_710_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_710_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_FF800000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111100000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln62_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_reg_826 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_reg_826_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_reg_826_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_reg_826_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln62_reg_826_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_output_load_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_1_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_1_reg_838_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_2_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_2_reg_845_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_2_reg_845_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_3_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_3_reg_852_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_3_reg_852_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_load_3_reg_852_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_1_fu_592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_1_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_2_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_2_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln58_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln58_1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln58_2_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln58_3_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln53_fu_440_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln52_fu_352_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln52_1_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_fu_181_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_fu_193_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_189_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_201_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_211_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_223_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_219_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_231_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln53_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_270_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_mid1_fu_276_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_mid1_fu_288_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_mid1_fu_284_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_mid1_fu_296_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_300_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_205_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_mid1_fu_314_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_mid1_fu_326_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_mid1_fu_322_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_mid1_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid13_fu_338_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_28_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln52_1_fu_262_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_364_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln58_1_fu_376_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln52_3_fu_344_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln58_fu_380_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln58_fu_391_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln58_fu_372_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln58_3_fu_402_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln58_2_fu_408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln58_1_fu_412_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln58_1_fu_423_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_cast9_fu_360_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln52_2_fu_306_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln59_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_fu_474_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln59_1_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_2_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_7_fu_523_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_3_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_530_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_8_fu_540_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_5_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_4_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_2_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_1_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_2_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln59_3_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_4_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_9_fu_612_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_7_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_6_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_619_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_10_fu_629_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_9_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_8_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_3_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_4_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_3_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_4_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln59_5_fu_688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_6_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_691_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_11_fu_701_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_11_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_10_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_708_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_12_fu_718_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_13_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_12_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_5_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_6_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_5_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_6_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lenet_predict_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component lenet_predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_72 <= select_ln52_fu_352_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_76 <= add_ln52_1_fu_247_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_76 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_68 <= add_ln53_fu_440_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_241_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln62_reg_826 <= add_ln62_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln62_reg_826_pp0_iter1_reg <= add_ln62_reg_826;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln62_reg_826_pp0_iter2_reg <= add_ln62_reg_826_pp0_iter1_reg;
                add_ln62_reg_826_pp0_iter3_reg <= add_ln62_reg_826_pp0_iter2_reg;
                add_ln62_reg_826_pp0_iter4_reg <= add_ln62_reg_826_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                conv1_output_load_1_reg_838_pp0_iter2_reg <= conv1_output_load_1_reg_838;
                conv1_output_load_2_reg_845_pp0_iter2_reg <= conv1_output_load_2_reg_845;
                conv1_output_load_2_reg_845_pp0_iter3_reg <= conv1_output_load_2_reg_845_pp0_iter2_reg;
                conv1_output_load_3_reg_852_pp0_iter2_reg <= conv1_output_load_3_reg_852;
                conv1_output_load_3_reg_852_pp0_iter3_reg <= conv1_output_load_3_reg_852_pp0_iter2_reg;
                conv1_output_load_3_reg_852_pp0_iter4_reg <= conv1_output_load_3_reg_852_pp0_iter3_reg;
                select_ln59_1_reg_866 <= select_ln59_1_fu_592_p3;
                select_ln59_2_reg_873 <= select_ln59_2_fu_681_p3;
                select_ln59_reg_859 <= select_ln59_fu_502_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv1_output_load_1_reg_838 <= conv1_output_q2;
                conv1_output_load_2_reg_845 <= conv1_output_q1;
                conv1_output_load_3_reg_852 <= conv1_output_q0;
                conv1_output_load_reg_831 <= conv1_output_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_1_fu_247_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln52_fu_270_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_1));
    add_ln53_fu_440_p2 <= std_logic_vector(unsigned(select_ln52_1_fu_262_p3) + unsigned(ap_const_lv4_1));
    add_ln58_1_fu_412_p2 <= std_logic_vector(unsigned(zext_ln58_2_fu_408_p1) + unsigned(select_ln52_3_fu_344_p3));
    add_ln58_3_fu_402_p2 <= std_logic_vector(unsigned(zext_ln58_fu_372_p1) + unsigned(ap_const_lv6_1C));
    add_ln58_fu_380_p2 <= std_logic_vector(unsigned(zext_ln58_1_fu_376_p1) + unsigned(select_ln52_3_fu_344_p3));
    add_ln62_fu_434_p2 <= std_logic_vector(unsigned(j_cast9_fu_360_p1) + unsigned(select_ln52_2_fu_306_p3));
    and_ln59_1_fu_580_p2 <= (or_ln59_2_fu_574_p2 and or_ln59_1_fu_556_p2);
    and_ln59_2_fu_586_p2 <= (grp_fu_702_p_dout0 and and_ln59_1_fu_580_p2);
    and_ln59_3_fu_669_p2 <= (or_ln59_4_fu_663_p2 and or_ln59_3_fu_645_p2);
    and_ln59_4_fu_675_p2 <= (grp_fu_706_p_dout0 and and_ln59_3_fu_669_p2);
    and_ln59_5_fu_758_p2 <= (or_ln59_6_fu_752_p2 and or_ln59_5_fu_734_p2);
    and_ln59_6_fu_764_p2 <= (grp_fu_710_p_dout0 and and_ln59_5_fu_758_p2);
    and_ln59_fu_496_p2 <= (or_ln59_fu_490_p2 and grp_fu_308_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_241_p2)
    begin
        if (((icmp_ln52_fu_241_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_68;
        end if; 
    end process;

    bitcast_ln59_1_fu_510_p1 <= conv1_output_load_1_reg_838_pp0_iter2_reg;
    bitcast_ln59_2_fu_527_p1 <= select_ln59_reg_859;
    bitcast_ln59_3_fu_599_p1 <= conv1_output_load_2_reg_845_pp0_iter3_reg;
    bitcast_ln59_4_fu_616_p1 <= select_ln59_1_reg_866;
    bitcast_ln59_5_fu_688_p1 <= conv1_output_load_3_reg_852_pp0_iter4_reg;
    bitcast_ln59_6_fu_705_p1 <= select_ln59_2_reg_873;
    bitcast_ln59_fu_461_p1 <= conv1_output_load_reg_831;
    conv1_output_address0 <= sext_ln58_3_fu_429_p1(13 - 1 downto 0);
    conv1_output_address1 <= sext_ln58_2_fu_418_p1(13 - 1 downto 0);
    conv1_output_address2 <= sext_ln58_1_fu_397_p1(13 - 1 downto 0);
    conv1_output_address3 <= sext_ln58_fu_386_p1(13 - 1 downto 0);

    conv1_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_output_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_output_ce1 <= ap_const_logic_1;
        else 
            conv1_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_output_ce2 <= ap_const_logic_1;
        else 
            conv1_output_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_output_ce3 <= ap_const_logic_1;
        else 
            conv1_output_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    empty_28_fu_235_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_219_p1) - unsigned(p_shl1_cast_fu_231_p1));
    empty_fu_205_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_189_p1) - unsigned(p_shl3_cast_fu_201_p1));
    grp_fu_308_p_ce <= ap_const_logic_1;
    grp_fu_308_p_din0 <= conv1_output_q3;
    grp_fu_308_p_din1 <= ap_const_lv32_FF800000;
    grp_fu_308_p_opcode <= ap_const_lv5_2;
    grp_fu_702_p_ce <= ap_const_logic_1;
    grp_fu_702_p_din0 <= conv1_output_load_1_reg_838;
    grp_fu_702_p_din1 <= select_ln59_fu_502_p3;
    grp_fu_702_p_opcode <= ap_const_lv5_2;
    grp_fu_706_p_ce <= ap_const_logic_1;
    grp_fu_706_p_din0 <= conv1_output_load_2_reg_845_pp0_iter2_reg;
    grp_fu_706_p_din1 <= select_ln59_1_fu_592_p3;
    grp_fu_706_p_opcode <= ap_const_lv5_2;
    grp_fu_710_p_ce <= ap_const_logic_1;
    grp_fu_710_p_din0 <= conv1_output_load_3_reg_852_pp0_iter3_reg;
    grp_fu_710_p_din1 <= select_ln59_2_fu_681_p3;
    grp_fu_710_p_opcode <= ap_const_lv5_2;
    icmp_ln52_fu_241_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_C4) else "0";
    icmp_ln53_fu_256_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_E) else "0";
    icmp_ln59_10_fu_722_p2 <= "0" when (tmp_9_fu_691_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_11_fu_728_p2 <= "1" when (trunc_ln59_11_fu_701_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_12_fu_740_p2 <= "0" when (tmp_s_fu_708_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_13_fu_746_p2 <= "1" when (trunc_ln59_12_fu_718_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_1_fu_484_p2 <= "1" when (trunc_ln59_fu_474_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_2_fu_544_p2 <= "0" when (tmp_3_fu_513_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_3_fu_550_p2 <= "1" when (trunc_ln59_7_fu_523_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_4_fu_562_p2 <= "0" when (tmp_4_fu_530_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_5_fu_568_p2 <= "1" when (trunc_ln59_8_fu_540_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_6_fu_633_p2 <= "0" when (tmp_6_fu_602_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_7_fu_639_p2 <= "1" when (trunc_ln59_9_fu_612_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_8_fu_651_p2 <= "0" when (tmp_7_fu_619_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_9_fu_657_p2 <= "1" when (trunc_ln59_10_fu_629_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_fu_478_p2 <= "0" when (tmp_1_fu_464_p4 = ap_const_lv8_FF) else "1";
    j_cast9_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_fu_262_p3),9));
    or_ln58_1_fu_423_p2 <= (ap_const_lv11_1 or add_ln58_1_fu_412_p2);
    or_ln58_fu_391_p2 <= (ap_const_lv11_1 or add_ln58_fu_380_p2);
    or_ln59_1_fu_556_p2 <= (icmp_ln59_3_fu_550_p2 or icmp_ln59_2_fu_544_p2);
    or_ln59_2_fu_574_p2 <= (icmp_ln59_5_fu_568_p2 or icmp_ln59_4_fu_562_p2);
    or_ln59_3_fu_645_p2 <= (icmp_ln59_7_fu_639_p2 or icmp_ln59_6_fu_633_p2);
    or_ln59_4_fu_663_p2 <= (icmp_ln59_9_fu_657_p2 or icmp_ln59_8_fu_651_p2);
    or_ln59_5_fu_734_p2 <= (icmp_ln59_11_fu_728_p2 or icmp_ln59_10_fu_722_p2);
    or_ln59_6_fu_752_p2 <= (icmp_ln59_13_fu_746_p2 or icmp_ln59_12_fu_740_p2);
    or_ln59_fu_490_p2 <= (icmp_ln59_fu_478_p2 or icmp_ln59_1_fu_484_p2);
    p_mid13_fu_338_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_322_p1) - unsigned(p_shl1_cast_mid1_fu_334_p1));
    p_mid1_fu_300_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_284_p1) - unsigned(p_shl3_cast_mid1_fu_296_p1));
    p_shl1_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_223_p3),11));
    p_shl1_cast_mid1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_326_p3),11));
    p_shl1_fu_223_p3 <= (ap_sig_allocacmp_i_2 & ap_const_lv3_0);
    p_shl1_mid1_fu_326_p3 <= (add_ln52_fu_270_p2 & ap_const_lv3_0);
    p_shl2_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_181_p3),9));
    p_shl2_cast_mid1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_276_p3),9));
    p_shl2_fu_181_p3 <= (ap_sig_allocacmp_i_2 & ap_const_lv4_0);
    p_shl2_mid1_fu_276_p3 <= (add_ln52_fu_270_p2 & ap_const_lv4_0);
    p_shl3_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_193_p3),9));
    p_shl3_cast_mid1_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_mid1_fu_288_p3),9));
    p_shl3_fu_193_p3 <= (ap_sig_allocacmp_i_2 & ap_const_lv1_0);
    p_shl3_mid1_fu_288_p3 <= (add_ln52_fu_270_p2 & ap_const_lv1_0);
    p_shl_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_211_p3),11));
    p_shl_cast_mid1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_314_p3),11));
    p_shl_fu_211_p3 <= (ap_sig_allocacmp_i_2 & ap_const_lv6_0);
    p_shl_mid1_fu_314_p3 <= (add_ln52_fu_270_p2 & ap_const_lv6_0);
    pool1_output_address0 <= sext_ln62_fu_777_p1(11 - 1 downto 0);

    pool1_output_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            pool1_output_ce0 <= ap_const_logic_1;
        else 
            pool1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool1_output_d0 <= 
        conv1_output_load_3_reg_852_pp0_iter4_reg when (and_ln59_6_fu_764_p2(0) = '1') else 
        select_ln59_2_reg_873;

    pool1_output_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            pool1_output_we0 <= ap_const_logic_1;
        else 
            pool1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln52_1_fu_262_p3 <= 
        ap_const_lv4_0 when (icmp_ln53_fu_256_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln52_2_fu_306_p3 <= 
        p_mid1_fu_300_p2 when (icmp_ln53_fu_256_p2(0) = '1') else 
        empty_fu_205_p2;
    select_ln52_3_fu_344_p3 <= 
        p_mid13_fu_338_p2 when (icmp_ln53_fu_256_p2(0) = '1') else 
        empty_28_fu_235_p2;
    select_ln52_fu_352_p3 <= 
        add_ln52_fu_270_p2 when (icmp_ln53_fu_256_p2(0) = '1') else 
        ap_sig_allocacmp_i_2;
    select_ln59_1_fu_592_p3 <= 
        conv1_output_load_1_reg_838_pp0_iter2_reg when (and_ln59_2_fu_586_p2(0) = '1') else 
        select_ln59_reg_859;
    select_ln59_2_fu_681_p3 <= 
        conv1_output_load_2_reg_845_pp0_iter3_reg when (and_ln59_4_fu_675_p2(0) = '1') else 
        select_ln59_1_reg_866;
    select_ln59_fu_502_p3 <= 
        conv1_output_load_reg_831 when (and_ln59_fu_496_p2(0) = '1') else 
        ap_const_lv32_FF800000;
        sext_ln58_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln58_fu_391_p2),64));

        sext_ln58_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_1_fu_412_p2),64));

        sext_ln58_3_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln58_1_fu_423_p2),64));

        sext_ln58_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln58_fu_380_p2),64));

        sext_ln62_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_reg_826_pp0_iter4_reg),64));

    tmp_12_fu_364_p3 <= (select_ln52_1_fu_262_p3 & ap_const_lv1_0);
    tmp_1_fu_464_p4 <= bitcast_ln59_fu_461_p1(30 downto 23);
    tmp_3_fu_513_p4 <= bitcast_ln59_1_fu_510_p1(30 downto 23);
    tmp_4_fu_530_p4 <= bitcast_ln59_2_fu_527_p1(30 downto 23);
    tmp_6_fu_602_p4 <= bitcast_ln59_3_fu_599_p1(30 downto 23);
    tmp_7_fu_619_p4 <= bitcast_ln59_4_fu_616_p1(30 downto 23);
    tmp_9_fu_691_p4 <= bitcast_ln59_5_fu_688_p1(30 downto 23);
    tmp_s_fu_708_p4 <= bitcast_ln59_6_fu_705_p1(30 downto 23);
    trunc_ln59_10_fu_629_p1 <= bitcast_ln59_4_fu_616_p1(23 - 1 downto 0);
    trunc_ln59_11_fu_701_p1 <= bitcast_ln59_5_fu_688_p1(23 - 1 downto 0);
    trunc_ln59_12_fu_718_p1 <= bitcast_ln59_6_fu_705_p1(23 - 1 downto 0);
    trunc_ln59_7_fu_523_p1 <= bitcast_ln59_1_fu_510_p1(23 - 1 downto 0);
    trunc_ln59_8_fu_540_p1 <= bitcast_ln59_2_fu_527_p1(23 - 1 downto 0);
    trunc_ln59_9_fu_612_p1 <= bitcast_ln59_3_fu_599_p1(23 - 1 downto 0);
    trunc_ln59_fu_474_p1 <= bitcast_ln59_fu_461_p1(23 - 1 downto 0);
    zext_ln58_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_364_p3),11));
    zext_ln58_2_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_3_fu_402_p2),11));
    zext_ln58_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_364_p3),6));
end behav;
