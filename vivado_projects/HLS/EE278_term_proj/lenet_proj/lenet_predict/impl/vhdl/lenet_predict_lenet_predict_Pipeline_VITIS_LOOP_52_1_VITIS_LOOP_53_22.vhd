-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_output_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_output_ce0 : OUT STD_LOGIC;
    conv2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_output_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_output_ce1 : OUT STD_LOGIC;
    conv2_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_output_address2 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_output_ce2 : OUT STD_LOGIC;
    conv2_output_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_output_address3 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv2_output_ce3 : OUT STD_LOGIC;
    conv2_output_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    pool2_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    pool2_output_ce0 : OUT STD_LOGIC;
    pool2_output_we0 : OUT STD_LOGIC;
    pool2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_308_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_308_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_308_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_308_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_308_p_ce : OUT STD_LOGIC;
    grp_fu_702_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_702_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_702_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_702_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_702_p_ce : OUT STD_LOGIC;
    grp_fu_706_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_706_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_706_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_706_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_706_p_ce : OUT STD_LOGIC;
    grp_fu_710_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_710_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_710_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_710_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_710_p_ce : OUT STD_LOGIC );
end;


architecture behav of lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FF800000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln62_1_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln62_1_reg_770 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln62_1_reg_770_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln62_1_reg_770_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln62_1_reg_770_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln62_1_reg_770_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal conv2_output_load_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_1_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_1_reg_782_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_2_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_2_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_2_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_3_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_3_reg_796_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_3_reg_796_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_load_3_reg_796_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_fu_446_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_1_fu_536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_1_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_2_fu_625_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_2_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln58_2_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln58_3_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_5_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_6_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_1_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_66 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_1_fu_240_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten12_fu_74 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln52_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten12_load : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_fu_179_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_191_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_187_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln53_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_1_fu_234_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl6_mid1_fu_252_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_mid1_fu_272_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_mid1_fu_268_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid110_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_fu_199_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln52_fu_226_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln58_1_fu_310_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln52_3_fu_286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln58_fu_314_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln58_fu_325_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln58_fu_306_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_1_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln58_4_fu_342_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln58_2_fu_346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln58_1_fu_357_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln52_fu_248_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast_fu_294_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln62_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln62_fu_374_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln52_2_fu_260_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln59_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_408_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_fu_418_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln59_1_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_2_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_457_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_1_fu_467_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_3_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_474_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_2_fu_484_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_5_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_4_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_2_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_1_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_2_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln59_3_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_4_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_546_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_3_fu_556_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_7_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_6_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_563_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_4_fu_573_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_9_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_8_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_3_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_4_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_3_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_4_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln59_5_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_6_fu_649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_635_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_5_fu_645_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_11_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_10_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_652_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_6_fu_662_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln59_13_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_12_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_5_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln59_6_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_5_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln59_6_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lenet_predict_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_predict_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component lenet_predict_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_70 <= select_ln52_1_fu_240_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten12_fu_74 <= add_ln52_fu_211_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_74 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_1_fu_66 <= add_ln53_fu_384_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_1_fu_66 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_205_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln62_1_reg_770 <= add_ln62_1_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln62_1_reg_770_pp0_iter1_reg <= add_ln62_1_reg_770;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln62_1_reg_770_pp0_iter2_reg <= add_ln62_1_reg_770_pp0_iter1_reg;
                add_ln62_1_reg_770_pp0_iter3_reg <= add_ln62_1_reg_770_pp0_iter2_reg;
                add_ln62_1_reg_770_pp0_iter4_reg <= add_ln62_1_reg_770_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                conv2_output_load_1_reg_782_pp0_iter2_reg <= conv2_output_load_1_reg_782;
                conv2_output_load_2_reg_789_pp0_iter2_reg <= conv2_output_load_2_reg_789;
                conv2_output_load_2_reg_789_pp0_iter3_reg <= conv2_output_load_2_reg_789_pp0_iter2_reg;
                conv2_output_load_3_reg_796_pp0_iter2_reg <= conv2_output_load_3_reg_796;
                conv2_output_load_3_reg_796_pp0_iter3_reg <= conv2_output_load_3_reg_796_pp0_iter2_reg;
                conv2_output_load_3_reg_796_pp0_iter4_reg <= conv2_output_load_3_reg_796_pp0_iter3_reg;
                select_ln59_1_reg_810 <= select_ln59_1_fu_536_p3;
                select_ln59_2_reg_817 <= select_ln59_2_fu_625_p3;
                select_ln59_reg_803 <= select_ln59_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv2_output_load_1_reg_782 <= conv2_output_q2;
                conv2_output_load_2_reg_789 <= conv2_output_q1;
                conv2_output_load_3_reg_796 <= conv2_output_q0;
                conv2_output_load_reg_775 <= conv2_output_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_1_fu_234_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    add_ln52_fu_211_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten12_load) + unsigned(ap_const_lv5_1));
    add_ln53_fu_384_p2 <= std_logic_vector(unsigned(select_ln52_fu_226_p3) + unsigned(ap_const_lv3_1));
    add_ln58_1_fu_336_p2 <= std_logic_vector(unsigned(zext_ln58_fu_306_p1) + unsigned(ap_const_lv5_A));
    add_ln58_2_fu_346_p2 <= std_logic_vector(unsigned(zext_ln58_4_fu_342_p1) + unsigned(select_ln52_3_fu_286_p3));
    add_ln58_fu_314_p2 <= std_logic_vector(unsigned(zext_ln58_1_fu_310_p1) + unsigned(select_ln52_3_fu_286_p3));
    add_ln62_1_fu_378_p2 <= std_logic_vector(unsigned(zext_ln62_fu_374_p1) + unsigned(select_ln52_2_fu_260_p3));
    add_ln62_fu_368_p2 <= std_logic_vector(unsigned(zext_ln52_fu_248_p1) + unsigned(j_1_cast_fu_294_p1));
    and_ln59_1_fu_524_p2 <= (or_ln59_2_fu_518_p2 and or_ln59_1_fu_500_p2);
    and_ln59_2_fu_530_p2 <= (grp_fu_702_p_dout0 and and_ln59_1_fu_524_p2);
    and_ln59_3_fu_613_p2 <= (or_ln59_4_fu_607_p2 and or_ln59_3_fu_589_p2);
    and_ln59_4_fu_619_p2 <= (grp_fu_706_p_dout0 and and_ln59_3_fu_613_p2);
    and_ln59_5_fu_702_p2 <= (or_ln59_6_fu_696_p2 and or_ln59_5_fu_678_p2);
    and_ln59_6_fu_708_p2 <= (grp_fu_710_p_dout0 and and_ln59_5_fu_702_p2);
    and_ln59_fu_440_p2 <= (or_ln59_fu_434_p2 and grp_fu_308_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_205_p2)
    begin
        if (((icmp_ln52_fu_205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten12_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten12_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten12_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten12_load <= indvar_flatten12_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_1_fu_66, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_1_load <= j_1_fu_66;
        end if; 
    end process;

    bitcast_ln59_1_fu_454_p1 <= conv2_output_load_1_reg_782_pp0_iter2_reg;
    bitcast_ln59_2_fu_471_p1 <= select_ln59_reg_803;
    bitcast_ln59_3_fu_543_p1 <= conv2_output_load_2_reg_789_pp0_iter3_reg;
    bitcast_ln59_4_fu_560_p1 <= select_ln59_1_reg_810;
    bitcast_ln59_5_fu_632_p1 <= conv2_output_load_3_reg_796_pp0_iter4_reg;
    bitcast_ln59_6_fu_649_p1 <= select_ln59_2_reg_817;
    bitcast_ln59_fu_405_p1 <= conv2_output_load_reg_775;
    conv2_output_address0 <= zext_ln58_6_fu_363_p1(11 - 1 downto 0);
    conv2_output_address1 <= zext_ln58_5_fu_352_p1(11 - 1 downto 0);
    conv2_output_address2 <= zext_ln58_3_fu_331_p1(11 - 1 downto 0);
    conv2_output_address3 <= zext_ln58_2_fu_320_p1(11 - 1 downto 0);

    conv2_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2_output_ce0 <= ap_const_logic_1;
        else 
            conv2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2_output_ce1 <= ap_const_logic_1;
        else 
            conv2_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2_output_ce2 <= ap_const_logic_1;
        else 
            conv2_output_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2_output_ce3 <= ap_const_logic_1;
        else 
            conv2_output_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_199_p2 <= std_logic_vector(unsigned(p_shl4_fu_191_p3) + unsigned(p_shl6_cast_fu_187_p1));
    grp_fu_308_p_ce <= ap_const_logic_1;
    grp_fu_308_p_din0 <= conv2_output_q3;
    grp_fu_308_p_din1 <= ap_const_lv32_FF800000;
    grp_fu_308_p_opcode <= ap_const_lv5_2;
    grp_fu_702_p_ce <= ap_const_logic_1;
    grp_fu_702_p_din0 <= conv2_output_load_1_reg_782;
    grp_fu_702_p_din1 <= select_ln59_fu_446_p3;
    grp_fu_702_p_opcode <= ap_const_lv5_2;
    grp_fu_706_p_ce <= ap_const_logic_1;
    grp_fu_706_p_din0 <= conv2_output_load_2_reg_789_pp0_iter2_reg;
    grp_fu_706_p_din1 <= select_ln59_1_fu_536_p3;
    grp_fu_706_p_opcode <= ap_const_lv5_2;
    grp_fu_710_p_ce <= ap_const_logic_1;
    grp_fu_710_p_din0 <= conv2_output_load_3_reg_796_pp0_iter3_reg;
    grp_fu_710_p_din1 <= select_ln59_2_fu_625_p3;
    grp_fu_710_p_opcode <= ap_const_lv5_2;
    icmp_ln52_fu_205_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten12_load = ap_const_lv5_19) else "0";
    icmp_ln53_fu_220_p2 <= "1" when (ap_sig_allocacmp_j_1_load = ap_const_lv3_5) else "0";
    icmp_ln59_10_fu_666_p2 <= "0" when (tmp_9_fu_635_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_11_fu_672_p2 <= "1" when (trunc_ln59_5_fu_645_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_12_fu_684_p2 <= "0" when (tmp_10_fu_652_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_13_fu_690_p2 <= "1" when (trunc_ln59_6_fu_662_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_1_fu_428_p2 <= "1" when (trunc_ln59_fu_418_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_2_fu_488_p2 <= "0" when (tmp_3_fu_457_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_3_fu_494_p2 <= "1" when (trunc_ln59_1_fu_467_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_4_fu_506_p2 <= "0" when (tmp_4_fu_474_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_5_fu_512_p2 <= "1" when (trunc_ln59_2_fu_484_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_6_fu_577_p2 <= "0" when (tmp_6_fu_546_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_7_fu_583_p2 <= "1" when (trunc_ln59_3_fu_556_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_8_fu_595_p2 <= "0" when (tmp_7_fu_563_p4 = ap_const_lv8_FF) else "1";
    icmp_ln59_9_fu_601_p2 <= "1" when (trunc_ln59_4_fu_573_p1 = ap_const_lv23_0) else "0";
    icmp_ln59_fu_422_p2 <= "0" when (tmp_1_fu_408_p4 = ap_const_lv8_FF) else "1";
    j_1_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_fu_226_p3),4));
    or_ln58_1_fu_357_p2 <= (ap_const_lv7_1 or add_ln58_2_fu_346_p2);
    or_ln58_fu_325_p2 <= (ap_const_lv7_1 or add_ln58_fu_314_p2);
    or_ln59_1_fu_500_p2 <= (icmp_ln59_3_fu_494_p2 or icmp_ln59_2_fu_488_p2);
    or_ln59_2_fu_518_p2 <= (icmp_ln59_5_fu_512_p2 or icmp_ln59_4_fu_506_p2);
    or_ln59_3_fu_589_p2 <= (icmp_ln59_7_fu_583_p2 or icmp_ln59_6_fu_577_p2);
    or_ln59_4_fu_607_p2 <= (icmp_ln59_9_fu_601_p2 or icmp_ln59_8_fu_595_p2);
    or_ln59_5_fu_678_p2 <= (icmp_ln59_11_fu_672_p2 or icmp_ln59_10_fu_666_p2);
    or_ln59_6_fu_696_p2 <= (icmp_ln59_13_fu_690_p2 or icmp_ln59_12_fu_684_p2);
    or_ln59_fu_434_p2 <= (icmp_ln59_fu_422_p2 or icmp_ln59_1_fu_428_p2);
    p_mid110_fu_280_p2 <= std_logic_vector(unsigned(p_shl4_mid1_fu_272_p3) + unsigned(p_shl6_cast_mid1_fu_268_p1));
    p_shl4_fu_191_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv4_0);
    p_shl4_mid1_fu_272_p3 <= (add_ln52_1_fu_234_p2 & ap_const_lv4_0);
    p_shl6_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_179_p3),7));
    p_shl6_cast_mid1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_mid1_fu_252_p3),7));
    p_shl6_fu_179_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv2_0);
    p_shl6_mid1_fu_252_p3 <= (add_ln52_1_fu_234_p2 & ap_const_lv2_0);
    pool2_output_address0 <= zext_ln62_1_fu_721_p1(9 - 1 downto 0);

    pool2_output_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            pool2_output_ce0 <= ap_const_logic_1;
        else 
            pool2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool2_output_d0 <= 
        conv2_output_load_3_reg_796_pp0_iter4_reg when (and_ln59_6_fu_708_p2(0) = '1') else 
        select_ln59_2_reg_817;

    pool2_output_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            pool2_output_we0 <= ap_const_logic_1;
        else 
            pool2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln52_1_fu_240_p3 <= 
        add_ln52_1_fu_234_p2 when (icmp_ln53_fu_220_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln52_2_fu_260_p3 <= 
        p_shl6_mid1_fu_252_p3 when (icmp_ln53_fu_220_p2(0) = '1') else 
        p_shl6_fu_179_p3;
    select_ln52_3_fu_286_p3 <= 
        p_mid110_fu_280_p2 when (icmp_ln53_fu_220_p2(0) = '1') else 
        empty_fu_199_p2;
    select_ln52_fu_226_p3 <= 
        ap_const_lv3_0 when (icmp_ln53_fu_220_p2(0) = '1') else 
        ap_sig_allocacmp_j_1_load;
    select_ln59_1_fu_536_p3 <= 
        conv2_output_load_1_reg_782_pp0_iter2_reg when (and_ln59_2_fu_530_p2(0) = '1') else 
        select_ln59_reg_803;
    select_ln59_2_fu_625_p3 <= 
        conv2_output_load_2_reg_789_pp0_iter3_reg when (and_ln59_4_fu_619_p2(0) = '1') else 
        select_ln59_1_reg_810;
    select_ln59_fu_446_p3 <= 
        conv2_output_load_reg_775 when (and_ln59_fu_440_p2(0) = '1') else 
        ap_const_lv32_FF800000;
    tmp_10_fu_652_p4 <= bitcast_ln59_6_fu_649_p1(30 downto 23);
    tmp_1_fu_408_p4 <= bitcast_ln59_fu_405_p1(30 downto 23);
    tmp_3_fu_457_p4 <= bitcast_ln59_1_fu_454_p1(30 downto 23);
    tmp_4_fu_474_p4 <= bitcast_ln59_2_fu_471_p1(30 downto 23);
    tmp_6_fu_546_p4 <= bitcast_ln59_3_fu_543_p1(30 downto 23);
    tmp_7_fu_563_p4 <= bitcast_ln59_4_fu_560_p1(30 downto 23);
    tmp_9_fu_635_p4 <= bitcast_ln59_5_fu_632_p1(30 downto 23);
    tmp_s_fu_298_p3 <= (select_ln52_fu_226_p3 & ap_const_lv1_0);
    trunc_ln59_1_fu_467_p1 <= bitcast_ln59_1_fu_454_p1(23 - 1 downto 0);
    trunc_ln59_2_fu_484_p1 <= bitcast_ln59_2_fu_471_p1(23 - 1 downto 0);
    trunc_ln59_3_fu_556_p1 <= bitcast_ln59_3_fu_543_p1(23 - 1 downto 0);
    trunc_ln59_4_fu_573_p1 <= bitcast_ln59_4_fu_560_p1(23 - 1 downto 0);
    trunc_ln59_5_fu_645_p1 <= bitcast_ln59_5_fu_632_p1(23 - 1 downto 0);
    trunc_ln59_6_fu_662_p1 <= bitcast_ln59_6_fu_649_p1(23 - 1 downto 0);
    trunc_ln59_fu_418_p1 <= bitcast_ln59_fu_405_p1(23 - 1 downto 0);
    zext_ln52_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_fu_240_p3),4));
    zext_ln58_1_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_298_p3),7));
    zext_ln58_2_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_314_p2),64));
    zext_ln58_3_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_fu_325_p2),64));
    zext_ln58_4_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_1_fu_336_p2),7));
    zext_ln58_5_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_2_fu_346_p2),64));
    zext_ln58_6_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_1_fu_357_p2),64));
    zext_ln58_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_298_p3),5));
    zext_ln62_1_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_1_reg_770_pp0_iter4_reg),64));
    zext_ln62_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln62_fu_368_p2),5));
end behav;
