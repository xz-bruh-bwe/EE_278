// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_output_address0,
        conv2_output_ce0,
        conv2_output_q0,
        conv2_output_address1,
        conv2_output_ce1,
        conv2_output_q1,
        conv2_output_address2,
        conv2_output_ce2,
        conv2_output_q2,
        conv2_output_address3,
        conv2_output_ce3,
        conv2_output_q3,
        pool2_output_address0,
        pool2_output_ce0,
        pool2_output_we0,
        pool2_output_d0,
        grp_fu_308_p_din0,
        grp_fu_308_p_din1,
        grp_fu_308_p_opcode,
        grp_fu_308_p_dout0,
        grp_fu_308_p_ce,
        grp_fu_702_p_din0,
        grp_fu_702_p_din1,
        grp_fu_702_p_opcode,
        grp_fu_702_p_dout0,
        grp_fu_702_p_ce,
        grp_fu_706_p_din0,
        grp_fu_706_p_din1,
        grp_fu_706_p_opcode,
        grp_fu_706_p_dout0,
        grp_fu_706_p_ce,
        grp_fu_710_p_din0,
        grp_fu_710_p_din1,
        grp_fu_710_p_opcode,
        grp_fu_710_p_dout0,
        grp_fu_710_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv2_output_address0;
output   conv2_output_ce0;
input  [31:0] conv2_output_q0;
output  [10:0] conv2_output_address1;
output   conv2_output_ce1;
input  [31:0] conv2_output_q1;
output  [10:0] conv2_output_address2;
output   conv2_output_ce2;
input  [31:0] conv2_output_q2;
output  [10:0] conv2_output_address3;
output   conv2_output_ce3;
input  [31:0] conv2_output_q3;
output  [8:0] pool2_output_address0;
output   pool2_output_ce0;
output   pool2_output_we0;
output  [31:0] pool2_output_d0;
output  [31:0] grp_fu_308_p_din0;
output  [31:0] grp_fu_308_p_din1;
output  [4:0] grp_fu_308_p_opcode;
input  [0:0] grp_fu_308_p_dout0;
output   grp_fu_308_p_ce;
output  [31:0] grp_fu_702_p_din0;
output  [31:0] grp_fu_702_p_din1;
output  [4:0] grp_fu_702_p_opcode;
input  [0:0] grp_fu_702_p_dout0;
output   grp_fu_702_p_ce;
output  [31:0] grp_fu_706_p_din0;
output  [31:0] grp_fu_706_p_din1;
output  [4:0] grp_fu_706_p_opcode;
input  [0:0] grp_fu_706_p_dout0;
output   grp_fu_706_p_ce;
output  [31:0] grp_fu_710_p_din0;
output  [31:0] grp_fu_710_p_din1;
output  [4:0] grp_fu_710_p_opcode;
input  [0:0] grp_fu_710_p_dout0;
output   grp_fu_710_p_ce;

reg ap_idle;
reg conv2_output_ce0;
reg conv2_output_ce1;
reg conv2_output_ce2;
reg conv2_output_ce3;
reg pool2_output_ce0;
reg pool2_output_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_205_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln62_1_fu_378_p2;
reg   [4:0] add_ln62_1_reg_770;
reg   [4:0] add_ln62_1_reg_770_pp0_iter1_reg;
reg   [4:0] add_ln62_1_reg_770_pp0_iter2_reg;
reg   [4:0] add_ln62_1_reg_770_pp0_iter3_reg;
reg   [4:0] add_ln62_1_reg_770_pp0_iter4_reg;
reg   [31:0] conv2_output_load_reg_775;
reg   [31:0] conv2_output_load_1_reg_782;
reg   [31:0] conv2_output_load_1_reg_782_pp0_iter2_reg;
reg   [31:0] conv2_output_load_2_reg_789;
reg   [31:0] conv2_output_load_2_reg_789_pp0_iter2_reg;
reg   [31:0] conv2_output_load_2_reg_789_pp0_iter3_reg;
reg   [31:0] conv2_output_load_3_reg_796;
reg   [31:0] conv2_output_load_3_reg_796_pp0_iter2_reg;
reg   [31:0] conv2_output_load_3_reg_796_pp0_iter3_reg;
reg   [31:0] conv2_output_load_3_reg_796_pp0_iter4_reg;
wire   [31:0] select_ln59_fu_446_p3;
reg   [31:0] select_ln59_reg_803;
wire   [31:0] select_ln59_1_fu_536_p3;
reg   [31:0] select_ln59_1_reg_810;
wire   [31:0] select_ln59_2_fu_625_p3;
reg   [31:0] select_ln59_2_reg_817;
wire   [63:0] zext_ln58_2_fu_320_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln58_3_fu_331_p1;
wire   [63:0] zext_ln58_5_fu_352_p1;
wire   [63:0] zext_ln58_6_fu_363_p1;
wire   [63:0] zext_ln62_1_fu_721_p1;
reg   [2:0] j_1_fu_66;
wire   [2:0] add_ln53_fu_384_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1_load;
reg   [2:0] i_fu_70;
wire   [2:0] select_ln52_1_fu_240_p3;
reg   [2:0] ap_sig_allocacmp_i_1;
reg   [4:0] indvar_flatten12_fu_74;
wire   [4:0] add_ln52_fu_211_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [4:0] p_shl6_fu_179_p3;
wire   [6:0] p_shl4_fu_191_p3;
wire   [6:0] p_shl6_cast_fu_187_p1;
wire   [0:0] icmp_ln53_fu_220_p2;
wire   [2:0] add_ln52_1_fu_234_p2;
wire   [4:0] p_shl6_mid1_fu_252_p3;
wire   [6:0] p_shl4_mid1_fu_272_p3;
wire   [6:0] p_shl6_cast_mid1_fu_268_p1;
wire   [6:0] p_mid110_fu_280_p2;
wire   [6:0] empty_fu_199_p2;
wire   [2:0] select_ln52_fu_226_p3;
wire   [3:0] tmp_s_fu_298_p3;
wire   [6:0] zext_ln58_1_fu_310_p1;
wire   [6:0] select_ln52_3_fu_286_p3;
wire   [6:0] add_ln58_fu_314_p2;
wire   [6:0] or_ln58_fu_325_p2;
wire   [4:0] zext_ln58_fu_306_p1;
wire   [4:0] add_ln58_1_fu_336_p2;
wire   [6:0] zext_ln58_4_fu_342_p1;
wire   [6:0] add_ln58_2_fu_346_p2;
wire   [6:0] or_ln58_1_fu_357_p2;
wire   [3:0] zext_ln52_fu_248_p1;
wire   [3:0] j_1_cast_fu_294_p1;
wire   [3:0] add_ln62_fu_368_p2;
wire   [4:0] zext_ln62_fu_374_p1;
wire   [4:0] select_ln52_2_fu_260_p3;
wire   [31:0] bitcast_ln59_fu_405_p1;
wire   [7:0] tmp_1_fu_408_p4;
wire   [22:0] trunc_ln59_fu_418_p1;
wire   [0:0] icmp_ln59_1_fu_428_p2;
wire   [0:0] icmp_ln59_fu_422_p2;
wire   [0:0] or_ln59_fu_434_p2;
wire   [0:0] and_ln59_fu_440_p2;
wire   [31:0] bitcast_ln59_1_fu_454_p1;
wire   [31:0] bitcast_ln59_2_fu_471_p1;
wire   [7:0] tmp_3_fu_457_p4;
wire   [22:0] trunc_ln59_1_fu_467_p1;
wire   [0:0] icmp_ln59_3_fu_494_p2;
wire   [0:0] icmp_ln59_2_fu_488_p2;
wire   [7:0] tmp_4_fu_474_p4;
wire   [22:0] trunc_ln59_2_fu_484_p1;
wire   [0:0] icmp_ln59_5_fu_512_p2;
wire   [0:0] icmp_ln59_4_fu_506_p2;
wire   [0:0] or_ln59_1_fu_500_p2;
wire   [0:0] or_ln59_2_fu_518_p2;
wire   [0:0] and_ln59_1_fu_524_p2;
wire   [0:0] and_ln59_2_fu_530_p2;
wire   [31:0] bitcast_ln59_3_fu_543_p1;
wire   [31:0] bitcast_ln59_4_fu_560_p1;
wire   [7:0] tmp_6_fu_546_p4;
wire   [22:0] trunc_ln59_3_fu_556_p1;
wire   [0:0] icmp_ln59_7_fu_583_p2;
wire   [0:0] icmp_ln59_6_fu_577_p2;
wire   [7:0] tmp_7_fu_563_p4;
wire   [22:0] trunc_ln59_4_fu_573_p1;
wire   [0:0] icmp_ln59_9_fu_601_p2;
wire   [0:0] icmp_ln59_8_fu_595_p2;
wire   [0:0] or_ln59_3_fu_589_p2;
wire   [0:0] or_ln59_4_fu_607_p2;
wire   [0:0] and_ln59_3_fu_613_p2;
wire   [0:0] and_ln59_4_fu_619_p2;
wire   [31:0] bitcast_ln59_5_fu_632_p1;
wire   [31:0] bitcast_ln59_6_fu_649_p1;
wire   [7:0] tmp_9_fu_635_p4;
wire   [22:0] trunc_ln59_5_fu_645_p1;
wire   [0:0] icmp_ln59_11_fu_672_p2;
wire   [0:0] icmp_ln59_10_fu_666_p2;
wire   [7:0] tmp_10_fu_652_p4;
wire   [22:0] trunc_ln59_6_fu_662_p1;
wire   [0:0] icmp_ln59_13_fu_690_p2;
wire   [0:0] icmp_ln59_12_fu_684_p2;
wire   [0:0] or_ln59_5_fu_678_p2;
wire   [0:0] or_ln59_6_fu_696_p2;
wire   [0:0] and_ln59_5_fu_702_p2;
wire   [0:0] and_ln59_6_fu_708_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet_predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= select_ln52_1_fu_240_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_74 <= add_ln52_fu_211_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_74 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_1_fu_66 <= add_ln53_fu_384_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_66 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_205_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln62_1_reg_770 <= add_ln62_1_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln62_1_reg_770_pp0_iter1_reg <= add_ln62_1_reg_770;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln62_1_reg_770_pp0_iter2_reg <= add_ln62_1_reg_770_pp0_iter1_reg;
        add_ln62_1_reg_770_pp0_iter3_reg <= add_ln62_1_reg_770_pp0_iter2_reg;
        add_ln62_1_reg_770_pp0_iter4_reg <= add_ln62_1_reg_770_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        conv2_output_load_1_reg_782_pp0_iter2_reg <= conv2_output_load_1_reg_782;
        conv2_output_load_2_reg_789_pp0_iter2_reg <= conv2_output_load_2_reg_789;
        conv2_output_load_2_reg_789_pp0_iter3_reg <= conv2_output_load_2_reg_789_pp0_iter2_reg;
        conv2_output_load_3_reg_796_pp0_iter2_reg <= conv2_output_load_3_reg_796;
        conv2_output_load_3_reg_796_pp0_iter3_reg <= conv2_output_load_3_reg_796_pp0_iter2_reg;
        conv2_output_load_3_reg_796_pp0_iter4_reg <= conv2_output_load_3_reg_796_pp0_iter3_reg;
        select_ln59_1_reg_810 <= select_ln59_1_fu_536_p3;
        select_ln59_2_reg_817 <= select_ln59_2_fu_625_p3;
        select_ln59_reg_803 <= select_ln59_fu_446_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_output_load_1_reg_782 <= conv2_output_q2;
        conv2_output_load_2_reg_789 <= conv2_output_q1;
        conv2_output_load_3_reg_796 <= conv2_output_q0;
        conv2_output_load_reg_775 <= conv2_output_q3;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_205_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_output_ce0 = 1'b1;
    end else begin
        conv2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_output_ce1 = 1'b1;
    end else begin
        conv2_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_output_ce2 = 1'b1;
    end else begin
        conv2_output_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_output_ce3 = 1'b1;
    end else begin
        conv2_output_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        pool2_output_ce0 = 1'b1;
    end else begin
        pool2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        pool2_output_we0 = 1'b1;
    end else begin
        pool2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_234_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign add_ln52_fu_211_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 5'd1);

assign add_ln53_fu_384_p2 = (select_ln52_fu_226_p3 + 3'd1);

assign add_ln58_1_fu_336_p2 = (zext_ln58_fu_306_p1 + 5'd10);

assign add_ln58_2_fu_346_p2 = (zext_ln58_4_fu_342_p1 + select_ln52_3_fu_286_p3);

assign add_ln58_fu_314_p2 = (zext_ln58_1_fu_310_p1 + select_ln52_3_fu_286_p3);

assign add_ln62_1_fu_378_p2 = (zext_ln62_fu_374_p1 + select_ln52_2_fu_260_p3);

assign add_ln62_fu_368_p2 = (zext_ln52_fu_248_p1 + j_1_cast_fu_294_p1);

assign and_ln59_1_fu_524_p2 = (or_ln59_2_fu_518_p2 & or_ln59_1_fu_500_p2);

assign and_ln59_2_fu_530_p2 = (grp_fu_702_p_dout0 & and_ln59_1_fu_524_p2);

assign and_ln59_3_fu_613_p2 = (or_ln59_4_fu_607_p2 & or_ln59_3_fu_589_p2);

assign and_ln59_4_fu_619_p2 = (grp_fu_706_p_dout0 & and_ln59_3_fu_613_p2);

assign and_ln59_5_fu_702_p2 = (or_ln59_6_fu_696_p2 & or_ln59_5_fu_678_p2);

assign and_ln59_6_fu_708_p2 = (grp_fu_710_p_dout0 & and_ln59_5_fu_702_p2);

assign and_ln59_fu_440_p2 = (or_ln59_fu_434_p2 & grp_fu_308_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln59_1_fu_454_p1 = conv2_output_load_1_reg_782_pp0_iter2_reg;

assign bitcast_ln59_2_fu_471_p1 = select_ln59_reg_803;

assign bitcast_ln59_3_fu_543_p1 = conv2_output_load_2_reg_789_pp0_iter3_reg;

assign bitcast_ln59_4_fu_560_p1 = select_ln59_1_reg_810;

assign bitcast_ln59_5_fu_632_p1 = conv2_output_load_3_reg_796_pp0_iter4_reg;

assign bitcast_ln59_6_fu_649_p1 = select_ln59_2_reg_817;

assign bitcast_ln59_fu_405_p1 = conv2_output_load_reg_775;

assign conv2_output_address0 = zext_ln58_6_fu_363_p1;

assign conv2_output_address1 = zext_ln58_5_fu_352_p1;

assign conv2_output_address2 = zext_ln58_3_fu_331_p1;

assign conv2_output_address3 = zext_ln58_2_fu_320_p1;

assign empty_fu_199_p2 = (p_shl4_fu_191_p3 + p_shl6_cast_fu_187_p1);

assign grp_fu_308_p_ce = 1'b1;

assign grp_fu_308_p_din0 = conv2_output_q3;

assign grp_fu_308_p_din1 = 32'd4286578688;

assign grp_fu_308_p_opcode = 5'd2;

assign grp_fu_702_p_ce = 1'b1;

assign grp_fu_702_p_din0 = conv2_output_load_1_reg_782;

assign grp_fu_702_p_din1 = select_ln59_fu_446_p3;

assign grp_fu_702_p_opcode = 5'd2;

assign grp_fu_706_p_ce = 1'b1;

assign grp_fu_706_p_din0 = conv2_output_load_2_reg_789_pp0_iter2_reg;

assign grp_fu_706_p_din1 = select_ln59_1_fu_536_p3;

assign grp_fu_706_p_opcode = 5'd2;

assign grp_fu_710_p_ce = 1'b1;

assign grp_fu_710_p_din0 = conv2_output_load_3_reg_796_pp0_iter3_reg;

assign grp_fu_710_p_din1 = select_ln59_2_fu_625_p3;

assign grp_fu_710_p_opcode = 5'd2;

assign icmp_ln52_fu_205_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_220_p2 = ((ap_sig_allocacmp_j_1_load == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln59_10_fu_666_p2 = ((tmp_9_fu_635_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_11_fu_672_p2 = ((trunc_ln59_5_fu_645_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_12_fu_684_p2 = ((tmp_10_fu_652_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_13_fu_690_p2 = ((trunc_ln59_6_fu_662_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_428_p2 = ((trunc_ln59_fu_418_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_488_p2 = ((tmp_3_fu_457_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_3_fu_494_p2 = ((trunc_ln59_1_fu_467_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_4_fu_506_p2 = ((tmp_4_fu_474_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_5_fu_512_p2 = ((trunc_ln59_2_fu_484_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_6_fu_577_p2 = ((tmp_6_fu_546_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_7_fu_583_p2 = ((trunc_ln59_3_fu_556_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_8_fu_595_p2 = ((tmp_7_fu_563_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_9_fu_601_p2 = ((trunc_ln59_4_fu_573_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_422_p2 = ((tmp_1_fu_408_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_1_cast_fu_294_p1 = select_ln52_fu_226_p3;

assign or_ln58_1_fu_357_p2 = (7'd1 | add_ln58_2_fu_346_p2);

assign or_ln58_fu_325_p2 = (7'd1 | add_ln58_fu_314_p2);

assign or_ln59_1_fu_500_p2 = (icmp_ln59_3_fu_494_p2 | icmp_ln59_2_fu_488_p2);

assign or_ln59_2_fu_518_p2 = (icmp_ln59_5_fu_512_p2 | icmp_ln59_4_fu_506_p2);

assign or_ln59_3_fu_589_p2 = (icmp_ln59_7_fu_583_p2 | icmp_ln59_6_fu_577_p2);

assign or_ln59_4_fu_607_p2 = (icmp_ln59_9_fu_601_p2 | icmp_ln59_8_fu_595_p2);

assign or_ln59_5_fu_678_p2 = (icmp_ln59_11_fu_672_p2 | icmp_ln59_10_fu_666_p2);

assign or_ln59_6_fu_696_p2 = (icmp_ln59_13_fu_690_p2 | icmp_ln59_12_fu_684_p2);

assign or_ln59_fu_434_p2 = (icmp_ln59_fu_422_p2 | icmp_ln59_1_fu_428_p2);

assign p_mid110_fu_280_p2 = (p_shl4_mid1_fu_272_p3 + p_shl6_cast_mid1_fu_268_p1);

assign p_shl4_fu_191_p3 = {{ap_sig_allocacmp_i_1}, {4'd0}};

assign p_shl4_mid1_fu_272_p3 = {{add_ln52_1_fu_234_p2}, {4'd0}};

assign p_shl6_cast_fu_187_p1 = p_shl6_fu_179_p3;

assign p_shl6_cast_mid1_fu_268_p1 = p_shl6_mid1_fu_252_p3;

assign p_shl6_fu_179_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign p_shl6_mid1_fu_252_p3 = {{add_ln52_1_fu_234_p2}, {2'd0}};

assign pool2_output_address0 = zext_ln62_1_fu_721_p1;

assign pool2_output_d0 = ((and_ln59_6_fu_708_p2[0:0] == 1'b1) ? conv2_output_load_3_reg_796_pp0_iter4_reg : select_ln59_2_reg_817);

assign select_ln52_1_fu_240_p3 = ((icmp_ln53_fu_220_p2[0:0] == 1'b1) ? add_ln52_1_fu_234_p2 : ap_sig_allocacmp_i_1);

assign select_ln52_2_fu_260_p3 = ((icmp_ln53_fu_220_p2[0:0] == 1'b1) ? p_shl6_mid1_fu_252_p3 : p_shl6_fu_179_p3);

assign select_ln52_3_fu_286_p3 = ((icmp_ln53_fu_220_p2[0:0] == 1'b1) ? p_mid110_fu_280_p2 : empty_fu_199_p2);

assign select_ln52_fu_226_p3 = ((icmp_ln53_fu_220_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_1_load);

assign select_ln59_1_fu_536_p3 = ((and_ln59_2_fu_530_p2[0:0] == 1'b1) ? conv2_output_load_1_reg_782_pp0_iter2_reg : select_ln59_reg_803);

assign select_ln59_2_fu_625_p3 = ((and_ln59_4_fu_619_p2[0:0] == 1'b1) ? conv2_output_load_2_reg_789_pp0_iter3_reg : select_ln59_1_reg_810);

assign select_ln59_fu_446_p3 = ((and_ln59_fu_440_p2[0:0] == 1'b1) ? conv2_output_load_reg_775 : 32'd4286578688);

assign tmp_10_fu_652_p4 = {{bitcast_ln59_6_fu_649_p1[30:23]}};

assign tmp_1_fu_408_p4 = {{bitcast_ln59_fu_405_p1[30:23]}};

assign tmp_3_fu_457_p4 = {{bitcast_ln59_1_fu_454_p1[30:23]}};

assign tmp_4_fu_474_p4 = {{bitcast_ln59_2_fu_471_p1[30:23]}};

assign tmp_6_fu_546_p4 = {{bitcast_ln59_3_fu_543_p1[30:23]}};

assign tmp_7_fu_563_p4 = {{bitcast_ln59_4_fu_560_p1[30:23]}};

assign tmp_9_fu_635_p4 = {{bitcast_ln59_5_fu_632_p1[30:23]}};

assign tmp_s_fu_298_p3 = {{select_ln52_fu_226_p3}, {1'd0}};

assign trunc_ln59_1_fu_467_p1 = bitcast_ln59_1_fu_454_p1[22:0];

assign trunc_ln59_2_fu_484_p1 = bitcast_ln59_2_fu_471_p1[22:0];

assign trunc_ln59_3_fu_556_p1 = bitcast_ln59_3_fu_543_p1[22:0];

assign trunc_ln59_4_fu_573_p1 = bitcast_ln59_4_fu_560_p1[22:0];

assign trunc_ln59_5_fu_645_p1 = bitcast_ln59_5_fu_632_p1[22:0];

assign trunc_ln59_6_fu_662_p1 = bitcast_ln59_6_fu_649_p1[22:0];

assign trunc_ln59_fu_418_p1 = bitcast_ln59_fu_405_p1[22:0];

assign zext_ln52_fu_248_p1 = select_ln52_1_fu_240_p3;

assign zext_ln58_1_fu_310_p1 = tmp_s_fu_298_p3;

assign zext_ln58_2_fu_320_p1 = add_ln58_fu_314_p2;

assign zext_ln58_3_fu_331_p1 = or_ln58_fu_325_p2;

assign zext_ln58_4_fu_342_p1 = add_ln58_1_fu_336_p2;

assign zext_ln58_5_fu_352_p1 = add_ln58_2_fu_346_p2;

assign zext_ln58_6_fu_363_p1 = or_ln58_1_fu_357_p2;

assign zext_ln58_fu_306_p1 = tmp_s_fu_298_p3;

assign zext_ln62_1_fu_721_p1 = add_ln62_1_reg_770_pp0_iter4_reg;

assign zext_ln62_fu_374_p1 = add_ln62_fu_368_p2;

endmodule //lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_22
