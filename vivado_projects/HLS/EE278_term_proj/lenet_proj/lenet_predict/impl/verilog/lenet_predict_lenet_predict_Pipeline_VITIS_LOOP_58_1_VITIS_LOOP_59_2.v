// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_58_1_VITIS_LOOP_59_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1_output_address0,
        conv1_output_ce0,
        conv1_output_q0,
        pool1_output_address0,
        pool1_output_ce0,
        pool1_output_we0,
        pool1_output_d0,
        grp_fu_423_p_din0,
        grp_fu_423_p_din1,
        grp_fu_423_p_opcode,
        grp_fu_423_p_dout0,
        grp_fu_423_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] conv1_output_address0;
output   conv1_output_ce0;
input  [31:0] conv1_output_q0;
output  [10:0] pool1_output_address0;
output   pool1_output_ce0;
output   pool1_output_we0;
output  [31:0] pool1_output_d0;
output  [31:0] grp_fu_423_p_din0;
output  [31:0] grp_fu_423_p_din1;
output  [4:0] grp_fu_423_p_opcode;
input  [0:0] grp_fu_423_p_dout0;
output   grp_fu_423_p_ce;

reg ap_idle;
reg conv1_output_ce0;
reg pool1_output_ce0;
reg pool1_output_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_151_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln64_fu_242_p1;
reg  signed [63:0] sext_ln64_reg_342;
reg  signed [63:0] sext_ln64_reg_342_pp0_iter1_reg;
reg   [31:0] value_reg_352;
wire    ap_block_pp0_stage0;
reg   [4:0] j_fu_56;
wire   [4:0] add_ln59_fu_247_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_60;
wire   [4:0] select_ln58_2_fu_224_p3;
reg   [4:0] ap_sig_allocacmp_i_1;
reg   [9:0] indvar_flatten_fu_64;
wire   [9:0] add_ln58_1_fu_157_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [9:0] p_shl_fu_121_p3;
wire   [6:0] p_shl1_fu_133_p3;
wire   [10:0] p_shl_cast_fu_129_p1;
wire   [10:0] p_shl1_cast_fu_141_p1;
wire   [0:0] icmp_ln59_fu_166_p2;
wire   [4:0] add_ln58_fu_180_p2;
wire   [9:0] p_shl_mid1_fu_186_p3;
wire   [6:0] p_shl1_mid1_fu_198_p3;
wire   [10:0] p_shl_cast_mid1_fu_194_p1;
wire   [10:0] p_shl1_cast_mid1_fu_206_p1;
wire   [10:0] p_mid1_fu_210_p2;
wire   [10:0] empty_fu_145_p2;
wire   [4:0] select_ln58_fu_172_p3;
wire   [10:0] j_cast_fu_232_p1;
wire   [10:0] select_ln58_1_fu_216_p3;
wire   [10:0] add_ln64_fu_236_p2;
wire   [31:0] bitcast_ln65_fu_268_p1;
wire   [7:0] tmp_1_fu_271_p4;
wire   [22:0] trunc_ln65_fu_281_p1;
wire   [0:0] icmp_ln65_1_fu_291_p2;
wire   [0:0] icmp_ln65_fu_285_p2;
wire   [0:0] or_ln65_fu_297_p2;
wire   [0:0] and_ln65_fu_303_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet_predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= select_ln58_2_fu_224_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln58_1_fu_157_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln59_fu_247_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        sext_ln64_reg_342_pp0_iter1_reg <= sext_ln64_reg_342;
        value_reg_352 <= conv1_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_151_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln64_reg_342 <= sext_ln64_fu_242_p1;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_151_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_output_ce0 = 1'b1;
    end else begin
        conv1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool1_output_ce0 = 1'b1;
    end else begin
        pool1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool1_output_we0 = 1'b1;
    end else begin
        pool1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_157_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln58_fu_180_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign add_ln59_fu_247_p2 = (select_ln58_fu_172_p3 + 5'd1);

assign add_ln64_fu_236_p2 = (j_cast_fu_232_p1 + select_ln58_1_fu_216_p3);

assign and_ln65_fu_303_p2 = (or_ln65_fu_297_p2 & grp_fu_423_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln65_fu_268_p1 = value_reg_352;

assign conv1_output_address0 = sext_ln64_fu_242_p1;

assign empty_fu_145_p2 = (p_shl_cast_fu_129_p1 - p_shl1_cast_fu_141_p1);

assign grp_fu_423_p_ce = 1'b1;

assign grp_fu_423_p_din0 = conv1_output_q0;

assign grp_fu_423_p_din1 = 32'd4286578688;

assign grp_fu_423_p_opcode = 5'd2;

assign icmp_ln58_fu_151_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_166_p2 = ((ap_sig_allocacmp_j_load == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_291_p2 = ((trunc_ln65_fu_281_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_285_p2 = ((tmp_1_fu_271_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_cast_fu_232_p1 = select_ln58_fu_172_p3;

assign or_ln65_fu_297_p2 = (icmp_ln65_fu_285_p2 | icmp_ln65_1_fu_291_p2);

assign p_mid1_fu_210_p2 = (p_shl_cast_mid1_fu_194_p1 - p_shl1_cast_mid1_fu_206_p1);

assign p_shl1_cast_fu_141_p1 = p_shl1_fu_133_p3;

assign p_shl1_cast_mid1_fu_206_p1 = p_shl1_mid1_fu_198_p3;

assign p_shl1_fu_133_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign p_shl1_mid1_fu_198_p3 = {{add_ln58_fu_180_p2}, {2'd0}};

assign p_shl_cast_fu_129_p1 = p_shl_fu_121_p3;

assign p_shl_cast_mid1_fu_194_p1 = p_shl_mid1_fu_186_p3;

assign p_shl_fu_121_p3 = {{ap_sig_allocacmp_i_1}, {5'd0}};

assign p_shl_mid1_fu_186_p3 = {{add_ln58_fu_180_p2}, {5'd0}};

assign pool1_output_address0 = sext_ln64_reg_342_pp0_iter1_reg;

assign pool1_output_d0 = ((and_ln65_fu_303_p2[0:0] == 1'b1) ? value_reg_352 : 32'd4286578688);

assign select_ln58_1_fu_216_p3 = ((icmp_ln59_fu_166_p2[0:0] == 1'b1) ? p_mid1_fu_210_p2 : empty_fu_145_p2);

assign select_ln58_2_fu_224_p3 = ((icmp_ln59_fu_166_p2[0:0] == 1'b1) ? add_ln58_fu_180_p2 : ap_sig_allocacmp_i_1);

assign select_ln58_fu_172_p3 = ((icmp_ln59_fu_166_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sext_ln64_fu_242_p1 = $signed(add_ln64_fu_236_p2);

assign tmp_1_fu_271_p4 = {{bitcast_ln65_fu_268_p1[30:23]}};

assign trunc_ln65_fu_281_p1 = bitcast_ln65_fu_268_p1[22:0];

endmodule //lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_58_1_VITIS_LOOP_59_2
