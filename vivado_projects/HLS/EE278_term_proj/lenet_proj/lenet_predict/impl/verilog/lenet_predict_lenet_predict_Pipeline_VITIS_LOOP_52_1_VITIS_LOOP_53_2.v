// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1_output_address0,
        conv1_output_ce0,
        conv1_output_q0,
        conv1_output_address1,
        conv1_output_ce1,
        conv1_output_q1,
        conv1_output_address2,
        conv1_output_ce2,
        conv1_output_q2,
        conv1_output_address3,
        conv1_output_ce3,
        conv1_output_q3,
        pool1_output_address0,
        pool1_output_ce0,
        pool1_output_we0,
        pool1_output_d0,
        grp_fu_308_p_din0,
        grp_fu_308_p_din1,
        grp_fu_308_p_opcode,
        grp_fu_308_p_dout0,
        grp_fu_308_p_ce,
        grp_fu_702_p_din0,
        grp_fu_702_p_din1,
        grp_fu_702_p_opcode,
        grp_fu_702_p_dout0,
        grp_fu_702_p_ce,
        grp_fu_706_p_din0,
        grp_fu_706_p_din1,
        grp_fu_706_p_opcode,
        grp_fu_706_p_dout0,
        grp_fu_706_p_ce,
        grp_fu_710_p_din0,
        grp_fu_710_p_din1,
        grp_fu_710_p_opcode,
        grp_fu_710_p_dout0,
        grp_fu_710_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] conv1_output_address0;
output   conv1_output_ce0;
input  [31:0] conv1_output_q0;
output  [12:0] conv1_output_address1;
output   conv1_output_ce1;
input  [31:0] conv1_output_q1;
output  [12:0] conv1_output_address2;
output   conv1_output_ce2;
input  [31:0] conv1_output_q2;
output  [12:0] conv1_output_address3;
output   conv1_output_ce3;
input  [31:0] conv1_output_q3;
output  [10:0] pool1_output_address0;
output   pool1_output_ce0;
output   pool1_output_we0;
output  [31:0] pool1_output_d0;
output  [31:0] grp_fu_308_p_din0;
output  [31:0] grp_fu_308_p_din1;
output  [4:0] grp_fu_308_p_opcode;
input  [0:0] grp_fu_308_p_dout0;
output   grp_fu_308_p_ce;
output  [31:0] grp_fu_702_p_din0;
output  [31:0] grp_fu_702_p_din1;
output  [4:0] grp_fu_702_p_opcode;
input  [0:0] grp_fu_702_p_dout0;
output   grp_fu_702_p_ce;
output  [31:0] grp_fu_706_p_din0;
output  [31:0] grp_fu_706_p_din1;
output  [4:0] grp_fu_706_p_opcode;
input  [0:0] grp_fu_706_p_dout0;
output   grp_fu_706_p_ce;
output  [31:0] grp_fu_710_p_din0;
output  [31:0] grp_fu_710_p_din1;
output  [4:0] grp_fu_710_p_opcode;
input  [0:0] grp_fu_710_p_dout0;
output   grp_fu_710_p_ce;

reg ap_idle;
reg conv1_output_ce0;
reg conv1_output_ce1;
reg conv1_output_ce2;
reg conv1_output_ce3;
reg pool1_output_ce0;
reg pool1_output_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_241_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln62_fu_434_p2;
reg   [8:0] add_ln62_reg_826;
reg   [8:0] add_ln62_reg_826_pp0_iter1_reg;
reg   [8:0] add_ln62_reg_826_pp0_iter2_reg;
reg   [8:0] add_ln62_reg_826_pp0_iter3_reg;
reg   [8:0] add_ln62_reg_826_pp0_iter4_reg;
reg   [31:0] conv1_output_load_reg_831;
reg   [31:0] conv1_output_load_1_reg_838;
reg   [31:0] conv1_output_load_1_reg_838_pp0_iter2_reg;
reg   [31:0] conv1_output_load_2_reg_845;
reg   [31:0] conv1_output_load_2_reg_845_pp0_iter2_reg;
reg   [31:0] conv1_output_load_2_reg_845_pp0_iter3_reg;
reg   [31:0] conv1_output_load_3_reg_852;
reg   [31:0] conv1_output_load_3_reg_852_pp0_iter2_reg;
reg   [31:0] conv1_output_load_3_reg_852_pp0_iter3_reg;
reg   [31:0] conv1_output_load_3_reg_852_pp0_iter4_reg;
wire   [31:0] select_ln59_fu_502_p3;
reg   [31:0] select_ln59_reg_859;
wire   [31:0] select_ln59_1_fu_592_p3;
reg   [31:0] select_ln59_1_reg_866;
wire   [31:0] select_ln59_2_fu_681_p3;
reg   [31:0] select_ln59_2_reg_873;
wire  signed [63:0] sext_ln58_fu_386_p1;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln58_1_fu_397_p1;
wire  signed [63:0] sext_ln58_2_fu_418_p1;
wire  signed [63:0] sext_ln58_3_fu_429_p1;
wire  signed [63:0] sext_ln62_fu_777_p1;
reg   [3:0] j_fu_68;
wire   [3:0] add_ln53_fu_440_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_72;
wire   [3:0] select_ln52_fu_352_p3;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [7:0] indvar_flatten_fu_76;
wire   [7:0] add_ln52_1_fu_247_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [7:0] p_shl2_fu_181_p3;
wire   [4:0] p_shl3_fu_193_p3;
wire   [8:0] p_shl2_cast_fu_189_p1;
wire   [8:0] p_shl3_cast_fu_201_p1;
wire   [9:0] p_shl_fu_211_p3;
wire   [6:0] p_shl1_fu_223_p3;
wire   [10:0] p_shl_cast_fu_219_p1;
wire   [10:0] p_shl1_cast_fu_231_p1;
wire   [0:0] icmp_ln53_fu_256_p2;
wire   [3:0] add_ln52_fu_270_p2;
wire   [7:0] p_shl2_mid1_fu_276_p3;
wire   [4:0] p_shl3_mid1_fu_288_p3;
wire   [8:0] p_shl2_cast_mid1_fu_284_p1;
wire   [8:0] p_shl3_cast_mid1_fu_296_p1;
wire   [8:0] p_mid1_fu_300_p2;
wire   [8:0] empty_fu_205_p2;
wire   [9:0] p_shl_mid1_fu_314_p3;
wire   [6:0] p_shl1_mid1_fu_326_p3;
wire   [10:0] p_shl_cast_mid1_fu_322_p1;
wire   [10:0] p_shl1_cast_mid1_fu_334_p1;
wire   [10:0] p_mid13_fu_338_p2;
wire   [10:0] empty_28_fu_235_p2;
wire   [3:0] select_ln52_1_fu_262_p3;
wire   [4:0] tmp_12_fu_364_p3;
wire   [10:0] zext_ln58_1_fu_376_p1;
wire   [10:0] select_ln52_3_fu_344_p3;
wire  signed [10:0] add_ln58_fu_380_p2;
wire   [10:0] or_ln58_fu_391_p2;
wire   [5:0] zext_ln58_fu_372_p1;
wire   [5:0] add_ln58_3_fu_402_p2;
wire   [10:0] zext_ln58_2_fu_408_p1;
wire  signed [10:0] add_ln58_1_fu_412_p2;
wire   [10:0] or_ln58_1_fu_423_p2;
wire   [8:0] j_cast9_fu_360_p1;
wire   [8:0] select_ln52_2_fu_306_p3;
wire   [31:0] bitcast_ln59_fu_461_p1;
wire   [7:0] tmp_1_fu_464_p4;
wire   [22:0] trunc_ln59_fu_474_p1;
wire   [0:0] icmp_ln59_1_fu_484_p2;
wire   [0:0] icmp_ln59_fu_478_p2;
wire   [0:0] or_ln59_fu_490_p2;
wire   [0:0] and_ln59_fu_496_p2;
wire   [31:0] bitcast_ln59_1_fu_510_p1;
wire   [31:0] bitcast_ln59_2_fu_527_p1;
wire   [7:0] tmp_3_fu_513_p4;
wire   [22:0] trunc_ln59_7_fu_523_p1;
wire   [0:0] icmp_ln59_3_fu_550_p2;
wire   [0:0] icmp_ln59_2_fu_544_p2;
wire   [7:0] tmp_4_fu_530_p4;
wire   [22:0] trunc_ln59_8_fu_540_p1;
wire   [0:0] icmp_ln59_5_fu_568_p2;
wire   [0:0] icmp_ln59_4_fu_562_p2;
wire   [0:0] or_ln59_1_fu_556_p2;
wire   [0:0] or_ln59_2_fu_574_p2;
wire   [0:0] and_ln59_1_fu_580_p2;
wire   [0:0] and_ln59_2_fu_586_p2;
wire   [31:0] bitcast_ln59_3_fu_599_p1;
wire   [31:0] bitcast_ln59_4_fu_616_p1;
wire   [7:0] tmp_6_fu_602_p4;
wire   [22:0] trunc_ln59_9_fu_612_p1;
wire   [0:0] icmp_ln59_7_fu_639_p2;
wire   [0:0] icmp_ln59_6_fu_633_p2;
wire   [7:0] tmp_7_fu_619_p4;
wire   [22:0] trunc_ln59_10_fu_629_p1;
wire   [0:0] icmp_ln59_9_fu_657_p2;
wire   [0:0] icmp_ln59_8_fu_651_p2;
wire   [0:0] or_ln59_3_fu_645_p2;
wire   [0:0] or_ln59_4_fu_663_p2;
wire   [0:0] and_ln59_3_fu_669_p2;
wire   [0:0] and_ln59_4_fu_675_p2;
wire   [31:0] bitcast_ln59_5_fu_688_p1;
wire   [31:0] bitcast_ln59_6_fu_705_p1;
wire   [7:0] tmp_9_fu_691_p4;
wire   [22:0] trunc_ln59_11_fu_701_p1;
wire   [0:0] icmp_ln59_11_fu_728_p2;
wire   [0:0] icmp_ln59_10_fu_722_p2;
wire   [7:0] tmp_s_fu_708_p4;
wire   [22:0] trunc_ln59_12_fu_718_p1;
wire   [0:0] icmp_ln59_13_fu_746_p2;
wire   [0:0] icmp_ln59_12_fu_740_p2;
wire   [0:0] or_ln59_5_fu_734_p2;
wire   [0:0] or_ln59_6_fu_752_p2;
wire   [0:0] and_ln59_5_fu_758_p2;
wire   [0:0] and_ln59_6_fu_764_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lenet_predict_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_72 <= select_ln52_fu_352_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_76 <= add_ln52_1_fu_247_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_76 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_68 <= add_ln53_fu_440_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln62_reg_826 <= add_ln62_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln62_reg_826_pp0_iter1_reg <= add_ln62_reg_826;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln62_reg_826_pp0_iter2_reg <= add_ln62_reg_826_pp0_iter1_reg;
        add_ln62_reg_826_pp0_iter3_reg <= add_ln62_reg_826_pp0_iter2_reg;
        add_ln62_reg_826_pp0_iter4_reg <= add_ln62_reg_826_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        conv1_output_load_1_reg_838_pp0_iter2_reg <= conv1_output_load_1_reg_838;
        conv1_output_load_2_reg_845_pp0_iter2_reg <= conv1_output_load_2_reg_845;
        conv1_output_load_2_reg_845_pp0_iter3_reg <= conv1_output_load_2_reg_845_pp0_iter2_reg;
        conv1_output_load_3_reg_852_pp0_iter2_reg <= conv1_output_load_3_reg_852;
        conv1_output_load_3_reg_852_pp0_iter3_reg <= conv1_output_load_3_reg_852_pp0_iter2_reg;
        conv1_output_load_3_reg_852_pp0_iter4_reg <= conv1_output_load_3_reg_852_pp0_iter3_reg;
        select_ln59_1_reg_866 <= select_ln59_1_fu_592_p3;
        select_ln59_2_reg_873 <= select_ln59_2_fu_681_p3;
        select_ln59_reg_859 <= select_ln59_fu_502_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_output_load_1_reg_838 <= conv1_output_q2;
        conv1_output_load_2_reg_845 <= conv1_output_q1;
        conv1_output_load_3_reg_852 <= conv1_output_q0;
        conv1_output_load_reg_831 <= conv1_output_q3;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_241_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_output_ce0 = 1'b1;
    end else begin
        conv1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_output_ce1 = 1'b1;
    end else begin
        conv1_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_output_ce2 = 1'b1;
    end else begin
        conv1_output_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1_output_ce3 = 1'b1;
    end else begin
        conv1_output_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        pool1_output_ce0 = 1'b1;
    end else begin
        pool1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        pool1_output_we0 = 1'b1;
    end else begin
        pool1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_247_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln52_fu_270_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign add_ln53_fu_440_p2 = (select_ln52_1_fu_262_p3 + 4'd1);

assign add_ln58_1_fu_412_p2 = (zext_ln58_2_fu_408_p1 + select_ln52_3_fu_344_p3);

assign add_ln58_3_fu_402_p2 = (zext_ln58_fu_372_p1 + 6'd28);

assign add_ln58_fu_380_p2 = (zext_ln58_1_fu_376_p1 + select_ln52_3_fu_344_p3);

assign add_ln62_fu_434_p2 = (j_cast9_fu_360_p1 + select_ln52_2_fu_306_p3);

assign and_ln59_1_fu_580_p2 = (or_ln59_2_fu_574_p2 & or_ln59_1_fu_556_p2);

assign and_ln59_2_fu_586_p2 = (grp_fu_702_p_dout0 & and_ln59_1_fu_580_p2);

assign and_ln59_3_fu_669_p2 = (or_ln59_4_fu_663_p2 & or_ln59_3_fu_645_p2);

assign and_ln59_4_fu_675_p2 = (grp_fu_706_p_dout0 & and_ln59_3_fu_669_p2);

assign and_ln59_5_fu_758_p2 = (or_ln59_6_fu_752_p2 & or_ln59_5_fu_734_p2);

assign and_ln59_6_fu_764_p2 = (grp_fu_710_p_dout0 & and_ln59_5_fu_758_p2);

assign and_ln59_fu_496_p2 = (or_ln59_fu_490_p2 & grp_fu_308_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln59_1_fu_510_p1 = conv1_output_load_1_reg_838_pp0_iter2_reg;

assign bitcast_ln59_2_fu_527_p1 = select_ln59_reg_859;

assign bitcast_ln59_3_fu_599_p1 = conv1_output_load_2_reg_845_pp0_iter3_reg;

assign bitcast_ln59_4_fu_616_p1 = select_ln59_1_reg_866;

assign bitcast_ln59_5_fu_688_p1 = conv1_output_load_3_reg_852_pp0_iter4_reg;

assign bitcast_ln59_6_fu_705_p1 = select_ln59_2_reg_873;

assign bitcast_ln59_fu_461_p1 = conv1_output_load_reg_831;

assign conv1_output_address0 = sext_ln58_3_fu_429_p1;

assign conv1_output_address1 = sext_ln58_2_fu_418_p1;

assign conv1_output_address2 = sext_ln58_1_fu_397_p1;

assign conv1_output_address3 = sext_ln58_fu_386_p1;

assign empty_28_fu_235_p2 = (p_shl_cast_fu_219_p1 - p_shl1_cast_fu_231_p1);

assign empty_fu_205_p2 = (p_shl2_cast_fu_189_p1 - p_shl3_cast_fu_201_p1);

assign grp_fu_308_p_ce = 1'b1;

assign grp_fu_308_p_din0 = conv1_output_q3;

assign grp_fu_308_p_din1 = 32'd4286578688;

assign grp_fu_308_p_opcode = 5'd2;

assign grp_fu_702_p_ce = 1'b1;

assign grp_fu_702_p_din0 = conv1_output_load_1_reg_838;

assign grp_fu_702_p_din1 = select_ln59_fu_502_p3;

assign grp_fu_702_p_opcode = 5'd2;

assign grp_fu_706_p_ce = 1'b1;

assign grp_fu_706_p_din0 = conv1_output_load_2_reg_845_pp0_iter2_reg;

assign grp_fu_706_p_din1 = select_ln59_1_fu_592_p3;

assign grp_fu_706_p_opcode = 5'd2;

assign grp_fu_710_p_ce = 1'b1;

assign grp_fu_710_p_din0 = conv1_output_load_3_reg_852_pp0_iter3_reg;

assign grp_fu_710_p_din1 = select_ln59_2_fu_681_p3;

assign grp_fu_710_p_opcode = 5'd2;

assign icmp_ln52_fu_241_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_256_p2 = ((ap_sig_allocacmp_j_load == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln59_10_fu_722_p2 = ((tmp_9_fu_691_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_11_fu_728_p2 = ((trunc_ln59_11_fu_701_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_12_fu_740_p2 = ((tmp_s_fu_708_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_13_fu_746_p2 = ((trunc_ln59_12_fu_718_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_484_p2 = ((trunc_ln59_fu_474_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_544_p2 = ((tmp_3_fu_513_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_3_fu_550_p2 = ((trunc_ln59_7_fu_523_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_4_fu_562_p2 = ((tmp_4_fu_530_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_5_fu_568_p2 = ((trunc_ln59_8_fu_540_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_6_fu_633_p2 = ((tmp_6_fu_602_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_7_fu_639_p2 = ((trunc_ln59_9_fu_612_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_8_fu_651_p2 = ((tmp_7_fu_619_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_9_fu_657_p2 = ((trunc_ln59_10_fu_629_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_478_p2 = ((tmp_1_fu_464_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_cast9_fu_360_p1 = select_ln52_1_fu_262_p3;

assign or_ln58_1_fu_423_p2 = (11'd1 | add_ln58_1_fu_412_p2);

assign or_ln58_fu_391_p2 = (11'd1 | add_ln58_fu_380_p2);

assign or_ln59_1_fu_556_p2 = (icmp_ln59_3_fu_550_p2 | icmp_ln59_2_fu_544_p2);

assign or_ln59_2_fu_574_p2 = (icmp_ln59_5_fu_568_p2 | icmp_ln59_4_fu_562_p2);

assign or_ln59_3_fu_645_p2 = (icmp_ln59_7_fu_639_p2 | icmp_ln59_6_fu_633_p2);

assign or_ln59_4_fu_663_p2 = (icmp_ln59_9_fu_657_p2 | icmp_ln59_8_fu_651_p2);

assign or_ln59_5_fu_734_p2 = (icmp_ln59_11_fu_728_p2 | icmp_ln59_10_fu_722_p2);

assign or_ln59_6_fu_752_p2 = (icmp_ln59_13_fu_746_p2 | icmp_ln59_12_fu_740_p2);

assign or_ln59_fu_490_p2 = (icmp_ln59_fu_478_p2 | icmp_ln59_1_fu_484_p2);

assign p_mid13_fu_338_p2 = (p_shl_cast_mid1_fu_322_p1 - p_shl1_cast_mid1_fu_334_p1);

assign p_mid1_fu_300_p2 = (p_shl2_cast_mid1_fu_284_p1 - p_shl3_cast_mid1_fu_296_p1);

assign p_shl1_cast_fu_231_p1 = p_shl1_fu_223_p3;

assign p_shl1_cast_mid1_fu_334_p1 = p_shl1_mid1_fu_326_p3;

assign p_shl1_fu_223_p3 = {{ap_sig_allocacmp_i_2}, {3'd0}};

assign p_shl1_mid1_fu_326_p3 = {{add_ln52_fu_270_p2}, {3'd0}};

assign p_shl2_cast_fu_189_p1 = p_shl2_fu_181_p3;

assign p_shl2_cast_mid1_fu_284_p1 = p_shl2_mid1_fu_276_p3;

assign p_shl2_fu_181_p3 = {{ap_sig_allocacmp_i_2}, {4'd0}};

assign p_shl2_mid1_fu_276_p3 = {{add_ln52_fu_270_p2}, {4'd0}};

assign p_shl3_cast_fu_201_p1 = p_shl3_fu_193_p3;

assign p_shl3_cast_mid1_fu_296_p1 = p_shl3_mid1_fu_288_p3;

assign p_shl3_fu_193_p3 = {{ap_sig_allocacmp_i_2}, {1'd0}};

assign p_shl3_mid1_fu_288_p3 = {{add_ln52_fu_270_p2}, {1'd0}};

assign p_shl_cast_fu_219_p1 = p_shl_fu_211_p3;

assign p_shl_cast_mid1_fu_322_p1 = p_shl_mid1_fu_314_p3;

assign p_shl_fu_211_p3 = {{ap_sig_allocacmp_i_2}, {6'd0}};

assign p_shl_mid1_fu_314_p3 = {{add_ln52_fu_270_p2}, {6'd0}};

assign pool1_output_address0 = sext_ln62_fu_777_p1;

assign pool1_output_d0 = ((and_ln59_6_fu_764_p2[0:0] == 1'b1) ? conv1_output_load_3_reg_852_pp0_iter4_reg : select_ln59_2_reg_873);

assign select_ln52_1_fu_262_p3 = ((icmp_ln53_fu_256_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln52_2_fu_306_p3 = ((icmp_ln53_fu_256_p2[0:0] == 1'b1) ? p_mid1_fu_300_p2 : empty_fu_205_p2);

assign select_ln52_3_fu_344_p3 = ((icmp_ln53_fu_256_p2[0:0] == 1'b1) ? p_mid13_fu_338_p2 : empty_28_fu_235_p2);

assign select_ln52_fu_352_p3 = ((icmp_ln53_fu_256_p2[0:0] == 1'b1) ? add_ln52_fu_270_p2 : ap_sig_allocacmp_i_2);

assign select_ln59_1_fu_592_p3 = ((and_ln59_2_fu_586_p2[0:0] == 1'b1) ? conv1_output_load_1_reg_838_pp0_iter2_reg : select_ln59_reg_859);

assign select_ln59_2_fu_681_p3 = ((and_ln59_4_fu_675_p2[0:0] == 1'b1) ? conv1_output_load_2_reg_845_pp0_iter3_reg : select_ln59_1_reg_866);

assign select_ln59_fu_502_p3 = ((and_ln59_fu_496_p2[0:0] == 1'b1) ? conv1_output_load_reg_831 : 32'd4286578688);

assign sext_ln58_1_fu_397_p1 = $signed(or_ln58_fu_391_p2);

assign sext_ln58_2_fu_418_p1 = add_ln58_1_fu_412_p2;

assign sext_ln58_3_fu_429_p1 = $signed(or_ln58_1_fu_423_p2);

assign sext_ln58_fu_386_p1 = add_ln58_fu_380_p2;

assign sext_ln62_fu_777_p1 = $signed(add_ln62_reg_826_pp0_iter4_reg);

assign tmp_12_fu_364_p3 = {{select_ln52_1_fu_262_p3}, {1'd0}};

assign tmp_1_fu_464_p4 = {{bitcast_ln59_fu_461_p1[30:23]}};

assign tmp_3_fu_513_p4 = {{bitcast_ln59_1_fu_510_p1[30:23]}};

assign tmp_4_fu_530_p4 = {{bitcast_ln59_2_fu_527_p1[30:23]}};

assign tmp_6_fu_602_p4 = {{bitcast_ln59_3_fu_599_p1[30:23]}};

assign tmp_7_fu_619_p4 = {{bitcast_ln59_4_fu_616_p1[30:23]}};

assign tmp_9_fu_691_p4 = {{bitcast_ln59_5_fu_688_p1[30:23]}};

assign tmp_s_fu_708_p4 = {{bitcast_ln59_6_fu_705_p1[30:23]}};

assign trunc_ln59_10_fu_629_p1 = bitcast_ln59_4_fu_616_p1[22:0];

assign trunc_ln59_11_fu_701_p1 = bitcast_ln59_5_fu_688_p1[22:0];

assign trunc_ln59_12_fu_718_p1 = bitcast_ln59_6_fu_705_p1[22:0];

assign trunc_ln59_7_fu_523_p1 = bitcast_ln59_1_fu_510_p1[22:0];

assign trunc_ln59_8_fu_540_p1 = bitcast_ln59_2_fu_527_p1[22:0];

assign trunc_ln59_9_fu_612_p1 = bitcast_ln59_3_fu_599_p1[22:0];

assign trunc_ln59_fu_474_p1 = bitcast_ln59_fu_461_p1[22:0];

assign zext_ln58_1_fu_376_p1 = tmp_12_fu_364_p3;

assign zext_ln58_2_fu_408_p1 = add_ln58_3_fu_402_p2;

assign zext_ln58_fu_372_p1 = tmp_12_fu_364_p3;

endmodule //lenet_predict_lenet_predict_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_53_2
